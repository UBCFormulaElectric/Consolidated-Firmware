"""
This file contains all the functionality required to generate C code from our
.dbc file
"""
import logging
import sys
import argparse
from boards.shared.generate_CAN.cantools_codegen import *
from boards.shared.generate_CAN.canrx_codegen import *
from boards.shared.generate_CAN.cantx_codegen import *

VALID_BOARDS = ['FSM', 'DCM', 'PDM', 'BMS']

def generate_c_code_from_dbc(board_name: str, source_dir: str, header_dir: str, 
        cantools_source_dir: str, cantools_header_dir: str, dbc_path: str):
    """
    Generate C code from the dbc at the given path, and place said generated
    code into the directories indicated by the other arguments

    TODO: per-arg doc comments here?
    """

    if board_name not in VALID_BOARDS:
        raise ValueError('Error: Invalid board name. Valid options: ' + 
                ' '.join(valid_boards))

    # DBC name without the file extension
    database_name = os.path.basename(dbc_path).replace('.dbc', '')

    # Load DBC in preparation of cantools
    database = load_file(dbc_path, database_format="dbc")
    for msg in list(msg for msg in map(Message, database.messages)):
        for signal in msg.signals:
            if signal.type_length > 32:
                raise Exception(
                    "[%s] -> [%s] must be less than 32-bit to ensure atomic access on our 32-bit microcontrollers!" % (msg.snake_name, signal.snake_name))

    # Generate CAN TX code
    cantx_source = CanTxSourceFileGenerator(database, os.path.join(source_dir, 'App_CanTx.c'), board_name, 'App_CanTx')
    cantx_source.generateSource()

    cantx_header = CanTxHeaderFileGenerator(database, os.path.join(header_dir, 'App_CanTx.h'), board_name, 'App_CanTx')
    cantx_header.generateHeader()

    # Generate CAN RX code
    canrx_source = CanRxSourceFileGenerator(database, os.path.join(source_dir, 'App_CanRx.c'), board_name, 'App_CanRx')
    canrx_source.generateSource()

    canrx_header = CanRxHeaderFileGenerator(database, os.path.join(header_dir, 'App_CanRx.h'), board_name, 'App_CanRx')
    canrx_header.generateHeader()

    generate_cantools_c_code(database, database_name, cantools_source_dir, cantools_header_dir)

if __name__ == "__main__":
    # Parse arugments
    parser = argparse.ArgumentParser()
    parser.add_argument('--board', help='Choose one of the following: ' + ' '.join(VALID_BOARDS))
    parser.add_argument('--source_dir', help='Output directory of the generated source files for sending periodic CAN messages')
    parser.add_argument('--header_dir', help='Output directory of the generated header files for sending periodic CAN messages')
    parser.add_argument('--cantools_source_dir',help='Output directory of the source files generated by cantools')
    parser.add_argument('--cantools_header_dir',help='Output directory of the header files generated by cantools')
    parser.add_argument('--dbc', help='Path to the DBC file')
    args = parser.parse_args()
    # Configure logging level
    logging.basicConfig(level=logging.DEBUG)

    generate_c_code_from_dbc(args.board, args.source_dir, args.header_dir, args.cantools_source_dir, args.cantools_header_dir, args.dbc)
