/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools
 */

#ifndef CANMSGS_H
#define CANMSGS_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CANMSGS_FSM_ERRORS_FRAME_ID (0x40u)
#define CANMSGS_FSM_CAN_TX_FIFO_OVERFLOW_FRAME_ID (0x42u)
#define CANMSGS_FSM_STARTUP_FRAME_ID (0x43u)
#define CANMSGS_FSM_AIR_SHUTDOWN_FRAME_ID (0x50u)
#define CANMSGS_PDM_AIR_SHUTDOWN_FRAME_ID (0x64u)
#define CANMSGS_PDM_MOTOR_SHUTDOWN_FRAME_ID (0x65u)
#define CANMSGS_BMS_STARTUP_FRAME_ID (0x03u)
#define CANMSGS_PDM_ERRORS_FRAME_ID (0x60u)
#define CANMSGS_PDM_CAN_TX_FIFO_OVERFLOW_FRAME_ID (0x62u)
#define CANMSGS_PDM_HEARTBEAT_FRAME_ID (0x61u)
#define CANMSGS_FSM_HEARTBEAT_FRAME_ID (0x41u)
#define CANMSGS_PDM_STARTUP_FRAME_ID (0x63u)
#define CANMSGS_BMS_HEARTBEAT_FRAME_ID (0x01u)
#define CANMSGS_DCM_HEARTBEAT_FRAME_ID (0x21u)
#define CANMSGS_BMS_CAN_TX_FIFO_OVERFLOW_FRAME_ID (0x02u)
#define CANMSGS_DCM_CAN_TX_FIFO_OVERFLOW_FRAME_ID (0x22u)
#define CANMSGS_DCM_STARTUP_FRAME_ID (0x23u)
#define CANMSGS_PDM_AUX1_AUX2_CURRENT_FRAME_ID (0x66u)
#define CANMSGS_PDM_COOLING_PDMFAN_CURRENT_FRAME_ID (0x67u)
#define CANMSGS_PDM_AIRSHDN_CANGLV_CURRENT_FRAME_ID (0x68u)
#define CANMSGS_PDM_ACCUMULATOR_FAN_CURRENT_FRAME_ID (0x69u)
#define CANMSGS_PDM_INVERTER_IO_CURRENT_FRAME_ID (0x6au)
#define CANMSGS_PDM_GLV_VBAT_FRAME_ID (0x6bu)
#define CANMSGS_PDM_FLYWIRE_FRAME_ID (0x6cu)

/* Frame lengths in bytes. */
#define CANMSGS_FSM_ERRORS_LENGTH (8u)
#define CANMSGS_FSM_CAN_TX_FIFO_OVERFLOW_LENGTH (4u)
#define CANMSGS_FSM_STARTUP_LENGTH (0u)
#define CANMSGS_FSM_AIR_SHUTDOWN_LENGTH (0u)
#define CANMSGS_PDM_AIR_SHUTDOWN_LENGTH (0u)
#define CANMSGS_PDM_MOTOR_SHUTDOWN_LENGTH (0u)
#define CANMSGS_BMS_STARTUP_LENGTH (0u)
#define CANMSGS_PDM_ERRORS_LENGTH (8u)
#define CANMSGS_PDM_CAN_TX_FIFO_OVERFLOW_LENGTH (4u)
#define CANMSGS_PDM_HEARTBEAT_LENGTH (8u)
#define CANMSGS_FSM_HEARTBEAT_LENGTH (0u)
#define CANMSGS_PDM_STARTUP_LENGTH (0u)
#define CANMSGS_BMS_HEARTBEAT_LENGTH (0u)
#define CANMSGS_DCM_HEARTBEAT_LENGTH (0u)
#define CANMSGS_BMS_CAN_TX_FIFO_OVERFLOW_LENGTH (4u)
#define CANMSGS_DCM_CAN_TX_FIFO_OVERFLOW_LENGTH (4u)
#define CANMSGS_DCM_STARTUP_LENGTH (0u)
#define CANMSGS_PDM_AUX1_AUX2_CURRENT_LENGTH (8u)
#define CANMSGS_PDM_COOLING_PDMFAN_CURRENT_LENGTH (8u)
#define CANMSGS_PDM_AIRSHDN_CANGLV_CURRENT_LENGTH (8u)
#define CANMSGS_PDM_ACCUMULATOR_FAN_CURRENT_LENGTH (8u)
#define CANMSGS_PDM_INVERTER_IO_CURRENT_LENGTH (8u)
#define CANMSGS_PDM_GLV_VBAT_LENGTH (8u)
#define CANMSGS_PDM_FLYWIRE_LENGTH (4u)

/* Extended or standard frame types. */
#define CANMSGS_FSM_ERRORS_IS_EXTENDED (0)
#define CANMSGS_FSM_CAN_TX_FIFO_OVERFLOW_IS_EXTENDED (0)
#define CANMSGS_FSM_STARTUP_IS_EXTENDED (0)
#define CANMSGS_FSM_AIR_SHUTDOWN_IS_EXTENDED (0)
#define CANMSGS_PDM_AIR_SHUTDOWN_IS_EXTENDED (0)
#define CANMSGS_PDM_MOTOR_SHUTDOWN_IS_EXTENDED (0)
#define CANMSGS_BMS_STARTUP_IS_EXTENDED (0)
#define CANMSGS_PDM_ERRORS_IS_EXTENDED (0)
#define CANMSGS_PDM_CAN_TX_FIFO_OVERFLOW_IS_EXTENDED (0)
#define CANMSGS_PDM_HEARTBEAT_IS_EXTENDED (0)
#define CANMSGS_FSM_HEARTBEAT_IS_EXTENDED (0)
#define CANMSGS_PDM_STARTUP_IS_EXTENDED (0)
#define CANMSGS_BMS_HEARTBEAT_IS_EXTENDED (0)
#define CANMSGS_DCM_HEARTBEAT_IS_EXTENDED (0)
#define CANMSGS_BMS_CAN_TX_FIFO_OVERFLOW_IS_EXTENDED (0)
#define CANMSGS_DCM_CAN_TX_FIFO_OVERFLOW_IS_EXTENDED (0)
#define CANMSGS_DCM_STARTUP_IS_EXTENDED (0)
#define CANMSGS_PDM_AUX1_AUX2_CURRENT_IS_EXTENDED (0)
#define CANMSGS_PDM_COOLING_PDMFAN_CURRENT_IS_EXTENDED (0)
#define CANMSGS_PDM_AIRSHDN_CANGLV_CURRENT_IS_EXTENDED (0)
#define CANMSGS_PDM_ACCUMULATOR_FAN_CURRENT_IS_EXTENDED (0)
#define CANMSGS_PDM_INVERTER_IO_CURRENT_IS_EXTENDED (0)
#define CANMSGS_PDM_GLV_VBAT_IS_EXTENDED (0)
#define CANMSGS_PDM_FLYWIRE_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define CANMSGS_FSM_ERRORS_CYCLE_TIME_MS (1000u)
#define CANMSGS_FSM_CAN_TX_FIFO_OVERFLOW_CYCLE_TIME_MS (0u)
#define CANMSGS_FSM_STARTUP_CYCLE_TIME_MS (0u)
#define CANMSGS_FSM_AIR_SHUTDOWN_CYCLE_TIME_MS (0u)
#define CANMSGS_PDM_AIR_SHUTDOWN_CYCLE_TIME_MS (0u)
#define CANMSGS_PDM_MOTOR_SHUTDOWN_CYCLE_TIME_MS (0u)
#define CANMSGS_BMS_STARTUP_CYCLE_TIME_MS (0u)
#define CANMSGS_PDM_ERRORS_CYCLE_TIME_MS (1000u)
#define CANMSGS_PDM_CAN_TX_FIFO_OVERFLOW_CYCLE_TIME_MS (0u)
#define CANMSGS_PDM_HEARTBEAT_CYCLE_TIME_MS (300u)
#define CANMSGS_FSM_HEARTBEAT_CYCLE_TIME_MS (300u)
#define CANMSGS_PDM_STARTUP_CYCLE_TIME_MS (0u)
#define CANMSGS_BMS_HEARTBEAT_CYCLE_TIME_MS (300u)
#define CANMSGS_DCM_HEARTBEAT_CYCLE_TIME_MS (300u)
#define CANMSGS_BMS_CAN_TX_FIFO_OVERFLOW_CYCLE_TIME_MS (0u)
#define CANMSGS_DCM_CAN_TX_FIFO_OVERFLOW_CYCLE_TIME_MS (0u)
#define CANMSGS_DCM_STARTUP_CYCLE_TIME_MS (0u)
#define CANMSGS_PDM_AUX1_AUX2_CURRENT_CYCLE_TIME_MS (1000u)
#define CANMSGS_PDM_COOLING_PDMFAN_CURRENT_CYCLE_TIME_MS (1000u)
#define CANMSGS_PDM_AIRSHDN_CANGLV_CURRENT_CYCLE_TIME_MS (1000u)
#define CANMSGS_PDM_ACCUMULATOR_FAN_CURRENT_CYCLE_TIME_MS (1000u)
#define CANMSGS_PDM_INVERTER_IO_CURRENT_CYCLE_TIME_MS (1000u)
#define CANMSGS_PDM_GLV_VBAT_CYCLE_TIME_MS (1000u)
#define CANMSGS_PDM_FLYWIRE_CYCLE_TIME_MS (1000u)

/* Signal choices. */


/**
 * Signals in message FSM_ERRORS.
 *
 * This message contains a bit for each error that the FSM might throw
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_errors_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t papps_out_of_range : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sapps_out_of_range : 1;
};

/**
 * Signals in message FSM_CAN_TX_FIFO_OVERFLOW.
 *
 * Indicates that we tried to transmit messages faster then we can send them, so our internal FIFO queue overflowed
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_can_tx_fifo_overflow_t {
    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t overflow_count : 32;
};

/**
 * Signals in message FSM_STARTUP.
 *
 * Sent out by the FSM when it starts up
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_startup_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message FSM_AIR_SHUTDOWN.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_air_shutdown_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PDM_AIR_SHUTDOWN.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_air_shutdown_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PDM_MOTOR_SHUTDOWN.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_motor_shutdown_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message BMS_STARTUP.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_bms_startup_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PDM_ERRORS.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_errors_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t missing_heartbeat : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t boost_pgood_fault : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_balance_overvoltage_fault : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charger_fault : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t efuse_fault : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _12_v_fault_under_voltage : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _12_v_fault_over_voltage : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vbat_fault : 1;
};

/**
 * Signals in message PDM_CAN_TX_FIFO_OVERFLOW.
 *
 * Indicates that we tried to transmit messages faster then we can send them, so our internal FIFO queue overflowed
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_can_tx_fifo_overflow_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t overflow_count : 32;
};

/**
 * Signals in message PDM_HEARTBEAT.
 *
 * TODO: descriptive comment
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_heartbeat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message FSM_HEARTBEAT.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_heartbeat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PDM_STARTUP.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_startup_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message BMS_HEARTBEAT.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_bms_heartbeat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message DCM_HEARTBEAT.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_dcm_heartbeat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message BMS_CAN_TX_FIFO_OVERFLOW.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_bms_can_tx_fifo_overflow_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t overflow_count : 32;
};

/**
 * Signals in message DCM_CAN_TX_FIFO_OVERFLOW.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_dcm_can_tx_fifo_overflow_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t overflow_count : 32;
};

/**
 * Signals in message DCM_STARTUP.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_dcm_startup_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PDM_AUX1_AUX2_CURRENT.
 *
 * This message indicates the current being drawn by the auxiliary 1 and 2 outputs
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_aux1_aux2_current_t {
    /**
     * This variable indicates the current being drawn by the auxiliary 1 output
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float auxiliary1_current;

    /**
     * This variable indicates the current being drawn by the auxiliary 2 output
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float auxiliary2_current;
};

/**
 * Signals in message PDM_COOLING_PDMFAN_CURRENT.
 *
 * This message indicates the current being drawn by the cooling pump and PDM enclosure fan
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_cooling_pdmfan_current_t {
    /**
     * This variable indicates the current being drawn by the cooling pump
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float cooling_pump_current;

    /**
     * This variable indicates the current being drawn by the fan on the PDM enclosure
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float pdm_enclosure_fan_current;
};

/**
 * Signals in message PDM_AIRSHDN_CANGLV_CURRENT.
 *
 * This message indicates the current being drawn by the AIR shutdown circuit and the 12V Grounded-Low-Voltage (GLV) system
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_airshdn_canglv_current_t {
    /**
     * This variable indicates the current being drawn by the AIR shutdown circuit
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float air_shutdown_current;

    /**
     * This variable indicates the current being drawn by the 12V Grounded-Low-Voltage (GLV) system
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float grounded_low_voltage_current;
};

/**
 * Signals in message PDM_ACCUMULATOR_FAN_CURRENT.
 *
 * This message indicates the current being drawn by the fans on the accumulator
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_accumulator_fan_current_t {
    /**
     * This variable indicates the current being drawn by the fans on the accumulator segments
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float accumulator_segment_fan_current;

    /**
     * This variable indicates the current being drawn by the fans on the accumulator enclosure
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float accumulator_enc_fan_current;
};

/**
 * Signals in message PDM_INVERTER_IO_CURRENT.
 *
 * This message indicates the current being drawn by the left and right BAMOCAR D3 controller
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_inverter_io_current_t {
    /**
     * This variable indicates the current being drawn by the left BAMOCAR D3 controller
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float left_inverter_gpi_os_current;

    /**
     * This variable indicates the current being drawn by the right BAMOCAR D3 controller
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 A)
     * Scale: 1
     * Offset: 0
     */
    float right_inverter_gpi_os_current;
};

/**
 * Signals in message PDM_GLV_VBAT.
 *
 * This message indicates the voltage sense for the 12V Grounded Low Voltage (GLV) system and the two on-board 18650s
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_glv_vbat_t {
    /**
     * This variable indicates the voltage sense for the 12V powering the Grounded Low Voltage (GLV) system
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 V)
     * Scale: 1
     * Offset: 0
     */
    float glv;

    /**
     * This variable indicates the the voltage sense for the two on-board 18650s
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 V)
     * Scale: 1
     * Offset: 0
     */
    float vbat;
};

/**
 * Signals in message PDM_FLYWIRE.
 *
 * The message indicates the voltage sense for the Vicor 12V output
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_flywire_t {
    /**
     * The variable indicates the voltage sense for the Vicor 12V output
     *
     * Range: -340000000000000000000000000000000000000..340000000000000000000000000000000000000 (-3.4E+38..3.4E+38 V)
     * Scale: 1
     * Offset: 0
     */
    float flywire;
};

/**
 * Pack message FSM_ERRORS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_errors_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_errors_t *src_p,
    size_t size);

/**
 * Unpack message FSM_ERRORS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_errors_unpack(
    struct CanMsgs_fsm_errors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_fsm_errors_papps_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_fsm_errors_papps_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_fsm_errors_papps_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_fsm_errors_sapps_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_fsm_errors_sapps_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_fsm_errors_sapps_out_of_range_is_in_range(uint8_t value);

/**
 * Pack message FSM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_can_tx_fifo_overflow_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_can_tx_fifo_overflow_t *src_p,
    size_t size);

/**
 * Unpack message FSM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_can_tx_fifo_overflow_unpack(
    struct CanMsgs_fsm_can_tx_fifo_overflow_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanMsgs_fsm_can_tx_fifo_overflow_overflow_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_fsm_can_tx_fifo_overflow_overflow_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_fsm_can_tx_fifo_overflow_overflow_count_is_in_range(uint32_t value);

/**
 * Pack message FSM_STARTUP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_startup_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_startup_t *src_p,
    size_t size);

/**
 * Unpack message FSM_STARTUP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_startup_unpack(
    struct CanMsgs_fsm_startup_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message FSM_AIR_SHUTDOWN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_air_shutdown_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_air_shutdown_t *src_p,
    size_t size);

/**
 * Unpack message FSM_AIR_SHUTDOWN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_air_shutdown_unpack(
    struct CanMsgs_fsm_air_shutdown_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message PDM_AIR_SHUTDOWN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_air_shutdown_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_air_shutdown_t *src_p,
    size_t size);

/**
 * Unpack message PDM_AIR_SHUTDOWN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_air_shutdown_unpack(
    struct CanMsgs_pdm_air_shutdown_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message PDM_MOTOR_SHUTDOWN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_motor_shutdown_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_motor_shutdown_t *src_p,
    size_t size);

/**
 * Unpack message PDM_MOTOR_SHUTDOWN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_motor_shutdown_unpack(
    struct CanMsgs_pdm_motor_shutdown_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message BMS_STARTUP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_bms_startup_pack(
    uint8_t *dst_p,
    const struct CanMsgs_bms_startup_t *src_p,
    size_t size);

/**
 * Unpack message BMS_STARTUP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_bms_startup_unpack(
    struct CanMsgs_bms_startup_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message PDM_ERRORS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_errors_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_errors_t *src_p,
    size_t size);

/**
 * Unpack message PDM_ERRORS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_errors_unpack(
    struct CanMsgs_pdm_errors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_missing_heartbeat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_missing_heartbeat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_missing_heartbeat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_boost_pgood_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_boost_pgood_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_boost_pgood_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_cell_balance_overvoltage_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_cell_balance_overvoltage_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_cell_balance_overvoltage_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_charger_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_charger_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_charger_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_efuse_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_efuse_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_efuse_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors__12_v_fault_under_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors__12_v_fault_under_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors__12_v_fault_under_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors__12_v_fault_over_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors__12_v_fault_over_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors__12_v_fault_over_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_vbat_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_vbat_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_vbat_fault_is_in_range(uint8_t value);

/**
 * Pack message PDM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_can_tx_fifo_overflow_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_can_tx_fifo_overflow_t *src_p,
    size_t size);

/**
 * Unpack message PDM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_can_tx_fifo_overflow_unpack(
    struct CanMsgs_pdm_can_tx_fifo_overflow_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanMsgs_pdm_can_tx_fifo_overflow_overflow_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_can_tx_fifo_overflow_overflow_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_can_tx_fifo_overflow_overflow_count_is_in_range(uint32_t value);

/**
 * Pack message PDM_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_heartbeat_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message PDM_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_heartbeat_unpack(
    struct CanMsgs_pdm_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message FSM_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_heartbeat_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message FSM_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_heartbeat_unpack(
    struct CanMsgs_fsm_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message PDM_STARTUP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_startup_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_startup_t *src_p,
    size_t size);

/**
 * Unpack message PDM_STARTUP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_startup_unpack(
    struct CanMsgs_pdm_startup_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message BMS_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_bms_heartbeat_pack(
    uint8_t *dst_p,
    const struct CanMsgs_bms_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_bms_heartbeat_unpack(
    struct CanMsgs_bms_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message DCM_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_dcm_heartbeat_pack(
    uint8_t *dst_p,
    const struct CanMsgs_dcm_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message DCM_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_dcm_heartbeat_unpack(
    struct CanMsgs_dcm_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message BMS_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_bms_can_tx_fifo_overflow_pack(
    uint8_t *dst_p,
    const struct CanMsgs_bms_can_tx_fifo_overflow_t *src_p,
    size_t size);

/**
 * Unpack message BMS_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_bms_can_tx_fifo_overflow_unpack(
    struct CanMsgs_bms_can_tx_fifo_overflow_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanMsgs_bms_can_tx_fifo_overflow_overflow_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_bms_can_tx_fifo_overflow_overflow_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_bms_can_tx_fifo_overflow_overflow_count_is_in_range(uint32_t value);

/**
 * Pack message DCM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_dcm_can_tx_fifo_overflow_pack(
    uint8_t *dst_p,
    const struct CanMsgs_dcm_can_tx_fifo_overflow_t *src_p,
    size_t size);

/**
 * Unpack message DCM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_dcm_can_tx_fifo_overflow_unpack(
    struct CanMsgs_dcm_can_tx_fifo_overflow_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanMsgs_dcm_can_tx_fifo_overflow_overflow_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_dcm_can_tx_fifo_overflow_overflow_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_dcm_can_tx_fifo_overflow_overflow_count_is_in_range(uint32_t value);

/**
 * Pack message DCM_STARTUP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_dcm_startup_pack(
    uint8_t *dst_p,
    const struct CanMsgs_dcm_startup_t *src_p,
    size_t size);

/**
 * Unpack message DCM_STARTUP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_dcm_startup_unpack(
    struct CanMsgs_dcm_startup_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message PDM_AUX1_AUX2_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_aux1_aux2_current_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_aux1_aux2_current_t *src_p,
    size_t size);

/**
 * Unpack message PDM_AUX1_AUX2_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_aux1_aux2_current_unpack(
    struct CanMsgs_pdm_aux1_aux2_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_aux1_aux2_current_auxiliary1_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_aux1_aux2_current_auxiliary1_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_aux1_aux2_current_auxiliary1_current_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_aux1_aux2_current_auxiliary2_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_aux1_aux2_current_auxiliary2_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_aux1_aux2_current_auxiliary2_current_is_in_range(float value);

/**
 * Pack message PDM_COOLING_PDMFAN_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_cooling_pdmfan_current_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_cooling_pdmfan_current_t *src_p,
    size_t size);

/**
 * Unpack message PDM_COOLING_PDMFAN_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_cooling_pdmfan_current_unpack(
    struct CanMsgs_pdm_cooling_pdmfan_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_cooling_pdmfan_current_cooling_pump_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_cooling_pdmfan_current_cooling_pump_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_cooling_pdmfan_current_cooling_pump_current_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_cooling_pdmfan_current_pdm_enclosure_fan_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_cooling_pdmfan_current_pdm_enclosure_fan_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_cooling_pdmfan_current_pdm_enclosure_fan_current_is_in_range(float value);

/**
 * Pack message PDM_AIRSHDN_CANGLV_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_airshdn_canglv_current_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_airshdn_canglv_current_t *src_p,
    size_t size);

/**
 * Unpack message PDM_AIRSHDN_CANGLV_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_airshdn_canglv_current_unpack(
    struct CanMsgs_pdm_airshdn_canglv_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_airshdn_canglv_current_air_shutdown_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_airshdn_canglv_current_air_shutdown_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_airshdn_canglv_current_air_shutdown_current_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_airshdn_canglv_current_grounded_low_voltage_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_airshdn_canglv_current_grounded_low_voltage_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_airshdn_canglv_current_grounded_low_voltage_current_is_in_range(float value);

/**
 * Pack message PDM_ACCUMULATOR_FAN_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_accumulator_fan_current_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_accumulator_fan_current_t *src_p,
    size_t size);

/**
 * Unpack message PDM_ACCUMULATOR_FAN_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_accumulator_fan_current_unpack(
    struct CanMsgs_pdm_accumulator_fan_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_accumulator_fan_current_accumulator_segment_fan_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_accumulator_fan_current_accumulator_segment_fan_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_accumulator_fan_current_accumulator_segment_fan_current_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_accumulator_fan_current_accumulator_enc_fan_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_accumulator_fan_current_accumulator_enc_fan_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_accumulator_fan_current_accumulator_enc_fan_current_is_in_range(float value);

/**
 * Pack message PDM_INVERTER_IO_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_inverter_io_current_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_inverter_io_current_t *src_p,
    size_t size);

/**
 * Unpack message PDM_INVERTER_IO_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_inverter_io_current_unpack(
    struct CanMsgs_pdm_inverter_io_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_inverter_io_current_left_inverter_gpi_os_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_inverter_io_current_left_inverter_gpi_os_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_inverter_io_current_left_inverter_gpi_os_current_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_inverter_io_current_right_inverter_gpi_os_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_inverter_io_current_right_inverter_gpi_os_current_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_inverter_io_current_right_inverter_gpi_os_current_is_in_range(float value);

/**
 * Pack message PDM_GLV_VBAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_glv_vbat_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_glv_vbat_t *src_p,
    size_t size);

/**
 * Unpack message PDM_GLV_VBAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_glv_vbat_unpack(
    struct CanMsgs_pdm_glv_vbat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_glv_vbat_glv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_glv_vbat_glv_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_glv_vbat_glv_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_glv_vbat_vbat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_glv_vbat_vbat_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_glv_vbat_vbat_is_in_range(float value);

/**
 * Pack message PDM_FLYWIRE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_flywire_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_flywire_t *src_p,
    size_t size);

/**
 * Unpack message PDM_FLYWIRE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_flywire_unpack(
    struct CanMsgs_pdm_flywire_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float CanMsgs_pdm_flywire_flywire_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_flywire_flywire_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_flywire_flywire_is_in_range(float value);

#endif
