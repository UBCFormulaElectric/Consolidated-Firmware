#pragma once
#include "Io_SharedFreqOnlyPwmInputConfig.h"

#ifndef MAX_NUM_OF_FREQ_ONLY_PWM_INPUTS
#define MAX_NUM_OF_FREQ_ONLY_PWM_INPUTS 1
#endif

struct FreqOnlyPwmInput;

/**
 * Allocate and initialize a PWM input using the given (hardware) timer
 *
 * @note The given timer must be initialized with:
 *       - Input Capture direct mode
 *
 * @param htim: The handle of the timer measuring the PWM input
 * @param timer_frequency_hz: The frequency of the timer measuring the PWM input
 * @param rising_edge_tim_channel: The rising edge channel of the timer
 * measuring the PWM input
 * @param timer_auto_reload_reg : Maximum value that the counter can count to
 * @param timer_active_channel: Channel where we expect the interrupt to occur
 * @return Pointer to the allocated and initialized PWM input
 */
struct FreqOnlyPwmInput *Io_SharedFreqOnlyPwmInput_Create(
    TIM_HandleTypeDef *   htim,
    float                 timer_frequency_hz,
    uint32_t              rising_edge_tim_channel,
    uint32_t              timer_auto_reload_reg,
    HAL_TIM_ActiveChannel timer_active_channel);

/**
 * Get the frequency for the given PWM input
 * @param pwm_input: The PWM input to get frequency for
 * @return The frequency for the given PWM input
 */
float Io_SharedFreqOnlyPwmInput_GetFrequency(
    struct FreqOnlyPwmInput *pwm_input);

/**
 * Get the timer handle for the given PWM input
 * @param pwm_input: The PWM input used to get the timer handle
 * @return The timer handle for the given PWM input
 */
TIM_HandleTypeDef *Io_SharedFreqOnlyPwmInput_GetTimerHandle(
    struct FreqOnlyPwmInput *const pwm_input);

/**
 * Get the configured active timer channel for the given PWM input
 * @param pwm_input: The PWM input used to get the configured active timer
 *                   channel
 * @return The configured active timer channel for the given PWM input
 */
HAL_TIM_ActiveChannel Io_SharedFreqOnlyPwmInput_GetTimerActiveChannel(
    struct FreqOnlyPwmInput *const pwm_input);

/**
 * Update the frequency for the given PWM input
 *
 * @param pwm_input: The PWM input to update for
 */
void Io_SharedFreqOnlyPwmInput_Tick(struct FreqOnlyPwmInput *pwm_input);

/**
 * Increments timer_overflow_counter after an interrupt generated by a timer
 * overflow occurs
 *
 * @param pwm_input : The PWM input used to update the frequency when
 * captured PWM enters invalid range
 */
void Io_SharedFreqOnlyPwmInput_TimerOverflowUpdate(
    struct FreqOnlyPwmInput *pwm_input);
