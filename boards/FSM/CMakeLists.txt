#THIS FILE IS AUTO GENERATED FROM THE TEMPLATE! DO NOT CHANGE!
SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_VERSION 1)
cmake_minimum_required(VERSION 3.14)

# specify cross compilers and tools
SET(CMAKE_C_COMPILER_WORKS 1)
SET(CMAKE_C_COMPILER arm-none-eabi-gcc)
set(CMAKE_ASM_COMPILER  arm-none-eabi-gcc)
set(CMAKE_OBJCOPY arm-none-eabi-objcopy)
set(CMAKE_OBJDUMP arm-none-eabi-objdump)
set(SIZE arm-none-eabi-size)

SET(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/STM32F302C8Tx_FLASH.ld)

# Hardware floating point
SET(FPU_FLAGS "-mfloat-abi=hard -mfpu=fpv4-sp-d16")
add_definitions(-DARM_MATH_CM4 -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING)

# Enable assert_param macro in the HAL driver
add_definitions(-DUSE_FULL_ASSERT=1)

SET(COMMON_FLAGS
    "-mcpu=cortex-m4 ${FPU_FLAGS} -mthumb -mthumb-interwork -ffunction-sections -fdata-sections \
    -g -fno-common -fmessage-length=0 -Wall -Werror -Wextra -pedantic -specs=nosys.specs -specs=nano.specs")

SET(CMAKE_C_FLAGS_INIT ${COMMON_FLAGS})
SET(CMAKE_EXE_LINKER_FLAGS_INIT "-Wl,-gc-sections,--print-memory-usage -T ${LINKER_SCRIPT}")

PROJECT(FSM C ASM)
set(CMAKE_C_STANDARD 11)

add_definitions(-D__weak=__attribute__\(\(weak\)\) -D__packed=__attribute__\(\(__packed__\)\) -DUSE_HAL_DRIVER -DSTM32F302x8)

# The source files and header files are sorted into 3 groups:
#   1. Board-specific code: For example, App_StateMachine.c.
#   2. Shared code: Everything under src/shared/.
#   3. STM32CubeMX driver code: Drivers generated by STM32CubeMX that we do not
#      want to modify at all.
#   4. Auto-generated code: Code that is generated as part of the build process
#      and is not tracked in version control.
# The groupings allow us to set different compiler and linker options for each
# group. The main goal is to to enable warnings as errors (-Werror) for all
# files, but the STM32CubeMX driver code violates a handful of warnings. The
# solution is to suppress warnings for the STM32CubeMX driver code.

# 1. Board-specific code
file(GLOB_RECURSE SOURCES "Src/*.*")
include_directories(Inc Drivers/STM32F3xx_HAL_Driver/Inc Drivers/STM32F3xx_HAL_Driver/Inc/Legacy Middlewares/Third_Party/FreeRTOS/Source/include Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F Drivers/CMSIS/Device/ST/STM32F3xx/Include Drivers/CMSIS/Include)

# 2. Shared code
add_subdirectory(${CMAKE_SOURCE_DIR}/../shared __shared__)
include_directories(${SHARED_INCLUDE_DIRS})

# 3. STM32CubeMX driver code
# 3-1. Global the source files recursively
file(GLOB_RECURSE STM32CUBEMX_DRIVER_SRCS "startup/*.*" "Middlewares/*.*" "Drivers/*.*" "Src/syscalls.c")
# 3-2. STM32CubeMX GUI generates a second copy of system_stm32f3xx.c, which
# causes the linking process to fail due to multiple definition. Manually remove
# this second copy of system_stm32f3xx.c from the compilation process. Note that
# the correct system_stm32f3xx.c lives under Src/.
list(FILTER STM32CUBEMX_DRIVER_SRCS EXCLUDE REGEX ".*Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/system_stm32f3xx.c")

# 4. Auto-generated code
# 4-1. Generate CAN code using DBC
SET(DBC ${CMAKE_SOURCE_DIR}/../shared/CAN/CanMsgs.dbc)
SET(CANMSGS_AUTOGENERATED_SRCS ${CMAKE_SOURCE_DIR}/Src/auto_generated/App_CanTx.c
                               ${CMAKE_SOURCE_DIR}/Src/auto_generated/App_CanRx.c
                               ${CMAKE_SOURCE_DIR}/../shared/CAN/auto_generated/CanMsgs.c)
add_custom_command(
    OUTPUT ${CANMSGS_AUTOGENERATED_SRCS}
    COMMAND pipenv run python ${CMAKE_SOURCE_DIR}/../shared/CAN/generate_c_code_from_dbc.py
            FSM
            ${CMAKE_SOURCE_DIR}/Src/auto_generated
            ${CMAKE_SOURCE_DIR}/Inc/auto_generated
            ${CMAKE_SOURCE_DIR}/../shared/CAN/auto_generated
            ${CMAKE_SOURCE_DIR}/../shared/CAN/auto_generated
            ${DBC}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    DEPENDS ${DBC})

# 4-2. Generate STM32CubeMX code if the .ioc file was modified. We also need to
# re-run clang-format because the STM32CubeMX-generated code is not compliant to
# our clang-format rules.
if(NOT STM32CUBEMX_BIN_PATH)
    # Default STM32CubeMX path
    if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
        set(STM32CUBEMX_BIN_PATH "C:/Program Files (x86)/STMicroelectronics/STM32Cube/STM32CubeMX/STM32CubeMX.exe")
    else()
        set(STM32CUBEMX_BIN_PATH /usr/local/STM32CubeMX/STM32CubeMX)
    endif()
endif()
SET(IOC ${CMAKE_SOURCE_DIR}/FSM.ioc)
add_custom_command(
    OUTPUT ${IOC}.md5
    COMMAND pipenv run python ${CMAKE_SOURCE_DIR}/../../scripts/utilities/generate_cube_code.py
    FSM
    ${IOC}
    ${CMAKE_SOURCE_DIR}
    ${STM32CUBEMX_BIN_PATH}
    COMMAND pipenv run python ${CMAKE_SOURCE_DIR}/../../clang-format/fix_formatting.py
    COMMAND pipenv run python ${CMAKE_SOURCE_DIR}/../../scripts/utilities/generate_md5_checksum.py
    ${IOC}
    ${IOC}.md5
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    MAIN_DEPENDENCY ${IOC})

# 4-3. Generate C code to store the Git hash in read-only memory
SET(GIT_HASH_FILENAME GitHash)
SET(GIT_HASH_AUTOGENERATED_SRC ${CMAKE_SOURCE_DIR}/Src/auto_generated/${GIT_HASH_FILENAME}.c)

# ${FAKE_FILE} is used here because we rely on that file being detected as
# missing every build so that the real header "GitHash.c" and "GitHash.h" are
# updated.
#
# Keep this until we find a better way to resolve!
SET(FAKE_FILE ${CMAKE_CURRENT_BINARY_DIR}/__fakefile)

# This custom target is always built
add_custom_target(__alwaysRun ALL
    DEPENDS ${FAKE_FILE})

# Create the actual C code for Git hash
add_custom_command(
    OUTPUT ${FAKE_FILE}
    COMMAND pipenv run python ${CMAKE_SOURCE_DIR}/../shared/GitHash/generate_git_hash.py
    ${GIT_HASH_FILENAME}
    ${CMAKE_SOURCE_DIR}/Src/auto_generated
    ${CMAKE_SOURCE_DIR}/Inc/auto_generated
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

# Mark the output as a generated file
set_source_files_properties(${GIT_HASH_AUTOGENERATED_SRC}
    PROPERTIES GENERATED TRUE)

# Suppress source file warnings for STM32CubeMX drivers using -w compiler flag
set_source_files_properties(${STM32CUBEMX_DRIVER_SRCS} PROPERTIES COMPILE_FLAGS "-w")

# Suppress header file warnings for STM32CubeMX drivers by marking them as SYSTEM includes
include_directories(SYSTEM Drivers/STM32F3xx_HAL_Driver/Inc Drivers/STM32F3xx_HAL_Driver/Inc/Legacy Middlewares/Third_Party/FreeRTOS/Source/include Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F Drivers/CMSIS/Device/ST/STM32F3xx/Include Drivers/CMSIS/Include)

add_executable(${PROJECT_NAME}.elf ${SOURCES} ${STM32CUBEMX_DRIVER_SRCS} ${SHARED_SRCS} ${CANMSGS_AUTOGENERATED_SRCS} ${IOC}.md5 ${GIT_HASH_AUTOGENERATED_SRC} ${LINKER_SCRIPT})

# Add targets that should be built before the .ELF file
add_dependencies(${PROJECT_NAME}.elf __alwaysRun)

# Compile static libraries
add_subdirectory("../../lib" "${CMAKE_CURRENT_BINARY_DIR}/__lib__")
include_directories(${LIB_INCLUDE_DIRS})

# Link static libraries against .ELF
target_link_libraries(${PROJECT_NAME}.elf SEGGER_RTT)

set(CMAKE_EXE_LINKER_FLAGS
    "${CMAKE_EXE_LINKER_FLAGS} -Wl,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map")

set(HEX_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.hex)
set(BIN_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.bin)
set(ASM_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.asm)

add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -Oihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${HEX_FILE}
    COMMAND ${CMAKE_OBJCOPY} -Obinary $<TARGET_FILE:${PROJECT_NAME}.elf> ${BIN_FILE}
    COMMAND ${CMAKE_OBJDUMP} -DS $<TARGET_FILE:${PROJECT_NAME}.elf> > ${ASM_FILE}
    COMMENT "
Building ${HEX_FILE}
Building ${BIN_FILE}
Building ${ASM_FILE}")
