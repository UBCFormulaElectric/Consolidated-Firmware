#include <stdlib.h>
#include <assert.h>
#include <stdbool.h>

/*
#define PDM_NON_CRITICAL_MISSING_HEARTBEAT
#define PDM_NON_CRITICAL_BOOST_PGOOD_FAULT
#define PDM_NON_CRITICAL_CHARGER_FAULT
#define PDM_NON_CRITICAL_EFUSE_FAULT
#define PDM_NON_CRITICAL_STACK_WATERMARK_ABOVE_THRESHOLD_TASK1HZ
#define PDM_NON_CRITICAL_STACK_WATERMARK_ABOVE_THRESHOLD_TASK1KHZ
#define PDM_NON_CRITICAL_STACK_WATERMARK_ABOVE_THRESHOLD_TASKCANRX
#define PDM_NON_CRITICAL_STACK_WATERMARK_ABOVE_THRESHOLD_TASKCANTX
#define PDM_NON_CRITICAL_WATCHDOG_TIMEOUT
#define PDM_NON_CRITICAL_VBAT_VOLTAGE_OUT_OF_RANGE
#define PDM_NON_CRITICAL__24V_AUX_VOLTAGE_OUT_OF_RANGE
#define PDM_NON_CRITICAL__24V_ACC_VOLTAGE_OUT_OF_RANGE
#define PDM_NON_CRITICAL_AUX1_CURRENT_OUT_OF_RANGE
#define PDM_NON_CRITICAL_AUX2_CURRENT_OUT_OF_RANGE
#define PDM_NON_CRITICAL_LEFT_INVERTER_CURRENT_OUT_OF_RANGE
#define PDM_NON_CRITICAL_RIGHT_INVERTER_CURRENT_OUT_OF_RANGE
#define PDM_NON_CRITICAL_ENERGY_METER_CURRENT_OUT_OF_RANGE
#define PDM_NON_CRITICAL_CAN_CURRENT_OUT_OF_RANGE
#define PDM_NON_CRITICAL_AIR_SHUTDOWN_CURRENT_OUT_OF_RANGE
*/
struct PdmError;

enum ErrorType
{
    NON_CRITICAL_ERROR,
    AIR_SHUTDOWN_ERROR,
    MOTOR_SHUTDOWN_ERROR,
    NUM_ERROR_TYPES,
};
enum ErrorId
{
    PDM_NON_CRITICAL_MISSING_HEARTBEAT,
    PDM_NON_CRITICAL_BOOST_PGOOD_FAULT,
    PDM_NON_CRITICAL_CHARGER_FAULT,
    PDM_NON_CRITICAL_EFUSE_FAULT,
    PDM_NON_CRITICAL_STACK_WATERMARK_ABOVE_THRESHOLD_TASK1HZ,
    PDM_NON_CRITICAL_STACK_WATERMARK_ABOVE_THRESHOLD_TASK1KHZ,
    PDM_NON_CRITICAL_STACK_WATERMARK_ABOVE_THRESHOLD_TASKCANRX,
    PDM_NON_CRITICAL_STACK_WATERMARK_ABOVE_THRESHOLD_TASKCANTX,
    PDM_NON_CRITICAL_WATCHDOG_TIMEOUT,
    PDM_NON_CRITICAL_VBAT_VOLTAGE_OUT_OF_RANGE,
    PDM_NON_CRITICAL__24V_AUX_VOLTAGE_OUT_OF_RANGE,
    PDM_NON_CRITICAL__24V_ACC_VOLTAGE_OUT_OF_RANGE,
    PDM_NON_CRITICAL_AUX1_CURRENT_OUT_OF_RANGE,
    PDM_NON_CRITICAL_AUX2_CURRENT_OUT_OF_RANGE,
    PDM_NON_CRITICAL_LEFT_INVERTER_CURRENT_OUT_OF_RANGE,
    PDM_NON_CRITICAL_RIGHT_INVERTER_CURRENT_OUT_OF_RANGE,
    PDM_NON_CRITICAL_ENERGY_METER_CURRENT_OUT_OF_RANGE,
    PDM_NON_CRITICAL_CAN_CURRENT_OUT_OF_RANGE,
    PDM_NON_CRITICAL_AIR_SHUTDOWN_CURRENT_OUT_OF_RANGE,
    NUM_ERROR_IDS
};

struct ErrorList
{
    // Number of valid entries in "errors"
    uint32_t num_errors;

    // Only the first num_errors elements are valid
    struct PdmError *errors[NUM_ERROR_IDS];
};



struct PdmError;
struct PdmError *App_PdmError_Create(void);

void App_PdmError_Destroy(struct PdmError *pdm_error);

void App_PdmError_SetErrorType(struct PdmError *error, enum ErrorType error_type);
void App_PdmError_SetId(struct PdmError *pdm_error, uint32_t id);
void App_PdmError_SetIsSet(struct PdmError *pdm_error, bool is_set);

enum ErrorType App_PdmError_GetErrorType(const struct PdmError *pdm_error);
uint32_t App_PdmError_GetId(const struct PdmError *pdm_error);

bool App_PdmError_GetIsSet(const struct PdmError *pdm_error);
bool App_PdmError_IsCritical(const struct PdmError *pdm_error);
bool App_PdmError_IsNonCritical(const struct PdmError *pdm_error);
bool App_PdmError_IsErrorInList(struct ErrorList *error_list, enum ErrorId error_id);


