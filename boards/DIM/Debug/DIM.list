
DIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001174  08001174  00011174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080011ac  080011ac  000111ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080011b0  080011b0  000111b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080011b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000048  2000000c  080011c0  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000054  080011c0  00020054  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a40a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001769  00000000  00000000  0002a446  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002110  00000000  00000000  0002bbaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004a8  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000490  00000000  00000000  0002e168  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000175ec  00000000  00000000  0002e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005948  00000000  00000000  00045be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007e4b2  00000000  00000000  0004b52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000c99de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000a5c  00000000  00000000  000c9a5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800115c 	.word	0x0800115c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800115c 	.word	0x0800115c

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
 80001ce:	7818      	ldrb	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80001d8:	4a0c      	ldr	r2, [pc, #48]	; (800020c <HAL_InitTick+0x44>)
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f926 	bl	8000430 <HAL_SYSTICK_Config>
 80001e4:	b968      	cbnz	r0, 8000202 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e6:	2c0f      	cmp	r4, #15
 80001e8:	d901      	bls.n	80001ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80001ea:	2001      	movs	r0, #1
 80001ec:	e00a      	b.n	8000204 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ee:	2200      	movs	r2, #0
 80001f0:	4621      	mov	r1, r4
 80001f2:	f04f 30ff 	mov.w	r0, #4294967295
 80001f6:	f000 f8e7 	bl	80003c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001fa:	4b03      	ldr	r3, [pc, #12]	; (8000208 <HAL_InitTick+0x40>)
 80001fc:	605c      	str	r4, [r3, #4]
  }
   /* Return function status */
  return HAL_OK;
 80001fe:	2000      	movs	r0, #0
 8000200:	e000      	b.n	8000204 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000202:	2001      	movs	r0, #1
}
 8000204:	bd10      	pop	{r4, pc}
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	20000008 	.word	0x20000008

08000210 <HAL_Init>:
{
 8000210:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f8c1 	bl	80003a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f000 feb6 	bl	8000f98 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	6811      	ldr	r1, [r2, #0]
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <HAL_IncTick+0x14>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000258:	2800      	cmp	r0, #0
 800025a:	f000 80a1 	beq.w	80003a0 <HAL_CAN_Init+0x148>
{
 800025e:	b538      	push	{r3, r4, r5, lr}
 8000260:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000262:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000266:	b1d3      	cbz	r3, 800029e <HAL_CAN_Init+0x46>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000268:	6822      	ldr	r2, [r4, #0]
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	f023 0302 	bic.w	r3, r3, #2
 8000270:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000272:	f7ff ffeb 	bl	800024c <HAL_GetTick>
 8000276:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000278:	6823      	ldr	r3, [r4, #0]
 800027a:	685a      	ldr	r2, [r3, #4]
 800027c:	f012 0f02 	tst.w	r2, #2
 8000280:	d010      	beq.n	80002a4 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000282:	f7ff ffe3 	bl	800024c <HAL_GetTick>
 8000286:	1b40      	subs	r0, r0, r5
 8000288:	280a      	cmp	r0, #10
 800028a:	d9f5      	bls.n	8000278 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800028c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800028e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000292:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000294:	2305      	movs	r3, #5
 8000296:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800029a:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800029c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800029e:	f000 fe93 	bl	8000fc8 <HAL_CAN_MspInit>
 80002a2:	e7e1      	b.n	8000268 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	f042 0201 	orr.w	r2, r2, #1
 80002aa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80002ac:	f7ff ffce 	bl	800024c <HAL_GetTick>
 80002b0:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002b2:	6823      	ldr	r3, [r4, #0]
 80002b4:	685a      	ldr	r2, [r3, #4]
 80002b6:	f012 0f01 	tst.w	r2, #1
 80002ba:	d10d      	bne.n	80002d8 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002bc:	f7ff ffc6 	bl	800024c <HAL_GetTick>
 80002c0:	1b40      	subs	r0, r0, r5
 80002c2:	280a      	cmp	r0, #10
 80002c4:	d9f5      	bls.n	80002b2 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002cc:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80002ce:	2305      	movs	r3, #5
 80002d0:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80002d4:	2001      	movs	r0, #1
 80002d6:	e7e1      	b.n	800029c <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80002d8:	7e22      	ldrb	r2, [r4, #24]
 80002da:	2a01      	cmp	r2, #1
 80002dc:	d03d      	beq.n	800035a <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002e4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80002e6:	7e63      	ldrb	r3, [r4, #25]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d03b      	beq.n	8000364 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002ec:	6822      	ldr	r2, [r4, #0]
 80002ee:	6813      	ldr	r3, [r2, #0]
 80002f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002f4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002f6:	7ea3      	ldrb	r3, [r4, #26]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d039      	beq.n	8000370 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002fc:	6822      	ldr	r2, [r4, #0]
 80002fe:	6813      	ldr	r3, [r2, #0]
 8000300:	f023 0320 	bic.w	r3, r3, #32
 8000304:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000306:	7ee3      	ldrb	r3, [r4, #27]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d037      	beq.n	800037c <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800030c:	6822      	ldr	r2, [r4, #0]
 800030e:	6813      	ldr	r3, [r2, #0]
 8000310:	f043 0310 	orr.w	r3, r3, #16
 8000314:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000316:	7f23      	ldrb	r3, [r4, #28]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d035      	beq.n	8000388 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800031c:	6822      	ldr	r2, [r4, #0]
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	f023 0308 	bic.w	r3, r3, #8
 8000324:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000326:	7f63      	ldrb	r3, [r4, #29]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d033      	beq.n	8000394 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800032c:	6822      	ldr	r2, [r4, #0]
 800032e:	6813      	ldr	r3, [r2, #0]
 8000330:	f023 0304 	bic.w	r3, r3, #4
 8000334:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000336:	68a3      	ldr	r3, [r4, #8]
 8000338:	68e2      	ldr	r2, [r4, #12]
 800033a:	4313      	orrs	r3, r2
 800033c:	6922      	ldr	r2, [r4, #16]
 800033e:	4313      	orrs	r3, r2
 8000340:	6962      	ldr	r2, [r4, #20]
 8000342:	4313      	orrs	r3, r2
 8000344:	6862      	ldr	r2, [r4, #4]
 8000346:	3a01      	subs	r2, #1
 8000348:	6821      	ldr	r1, [r4, #0]
 800034a:	4313      	orrs	r3, r2
 800034c:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800034e:	2000      	movs	r0, #0
 8000350:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000352:	2301      	movs	r3, #1
 8000354:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000358:	e7a0      	b.n	800029c <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	e7c0      	b.n	80002e6 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000364:	6822      	ldr	r2, [r4, #0]
 8000366:	6813      	ldr	r3, [r2, #0]
 8000368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800036c:	6013      	str	r3, [r2, #0]
 800036e:	e7c2      	b.n	80002f6 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000370:	6822      	ldr	r2, [r4, #0]
 8000372:	6813      	ldr	r3, [r2, #0]
 8000374:	f043 0320 	orr.w	r3, r3, #32
 8000378:	6013      	str	r3, [r2, #0]
 800037a:	e7c4      	b.n	8000306 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800037c:	6822      	ldr	r2, [r4, #0]
 800037e:	6813      	ldr	r3, [r2, #0]
 8000380:	f023 0310 	bic.w	r3, r3, #16
 8000384:	6013      	str	r3, [r2, #0]
 8000386:	e7c6      	b.n	8000316 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000388:	6822      	ldr	r2, [r4, #0]
 800038a:	6813      	ldr	r3, [r2, #0]
 800038c:	f043 0308 	orr.w	r3, r3, #8
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	e7c8      	b.n	8000326 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000394:	6822      	ldr	r2, [r4, #0]
 8000396:	6813      	ldr	r3, [r2, #0]
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	6013      	str	r3, [r2, #0]
 800039e:	e7ca      	b.n	8000336 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80003a0:	2001      	movs	r0, #1
}
 80003a2:	4770      	bx	lr

080003a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80003a6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80003ac:	041b      	lsls	r3, r3, #16
 80003ae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003b0:	0200      	lsls	r0, r0, #8
 80003b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80003b8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80003bc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80003c0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <HAL_NVIC_SetPriority+0x60>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d2:	f1c3 0407 	rsb	r4, r3, #7
 80003d6:	2c04      	cmp	r4, #4
 80003d8:	bf28      	it	cs
 80003da:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003dc:	1d1d      	adds	r5, r3, #4
 80003de:	2d06      	cmp	r5, #6
 80003e0:	d918      	bls.n	8000414 <HAL_NVIC_SetPriority+0x4c>
 80003e2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e4:	f04f 35ff 	mov.w	r5, #4294967295
 80003e8:	fa05 f404 	lsl.w	r4, r5, r4
 80003ec:	ea21 0104 	bic.w	r1, r1, r4
 80003f0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003f2:	fa05 f303 	lsl.w	r3, r5, r3
 80003f6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003fa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80003fc:	2800      	cmp	r0, #0
 80003fe:	db0b      	blt.n	8000418 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000400:	0109      	lsls	r1, r1, #4
 8000402:	b2c9      	uxtb	r1, r1
 8000404:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000408:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800040c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000410:	bc30      	pop	{r4, r5}
 8000412:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000414:	2300      	movs	r3, #0
 8000416:	e7e5      	b.n	80003e4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000418:	f000 000f 	and.w	r0, r0, #15
 800041c:	0109      	lsls	r1, r1, #4
 800041e:	b2c9      	uxtb	r1, r1
 8000420:	4b02      	ldr	r3, [pc, #8]	; (800042c <HAL_NVIC_SetPriority+0x64>)
 8000422:	5419      	strb	r1, [r3, r0]
 8000424:	e7f4      	b.n	8000410 <HAL_NVIC_SetPriority+0x48>
 8000426:	bf00      	nop
 8000428:	e000ed00 	.word	0xe000ed00
 800042c:	e000ed14 	.word	0xe000ed14

08000430 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000430:	3801      	subs	r0, #1
 8000432:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000436:	d20a      	bcs.n	800044e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <HAL_SYSTICK_Config+0x24>)
 800043a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	4a06      	ldr	r2, [pc, #24]	; (8000458 <HAL_SYSTICK_Config+0x28>)
 800043e:	21f0      	movs	r1, #240	; 0xf0
 8000440:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000444:	2000      	movs	r0, #0
 8000446:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000448:	2207      	movs	r2, #7
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800044e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	e000e010 	.word	0xe000e010
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800045c:	b4f0      	push	{r4, r5, r6, r7}
 800045e:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8000460:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000462:	e036      	b.n	80004d2 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000464:	2403      	movs	r4, #3
 8000466:	e000      	b.n	800046a <HAL_GPIO_Init+0xe>
 8000468:	2400      	movs	r4, #0
 800046a:	40b4      	lsls	r4, r6
 800046c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800046e:	3502      	adds	r5, #2
 8000470:	4e58      	ldr	r6, [pc, #352]	; (80005d4 <HAL_GPIO_Init+0x178>)
 8000472:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000476:	4c58      	ldr	r4, [pc, #352]	; (80005d8 <HAL_GPIO_Init+0x17c>)
 8000478:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800047a:	43d4      	mvns	r4, r2
 800047c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000480:	684f      	ldr	r7, [r1, #4]
 8000482:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000486:	d001      	beq.n	800048c <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8000488:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 800048c:	4d52      	ldr	r5, [pc, #328]	; (80005d8 <HAL_GPIO_Init+0x17c>)
 800048e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000490:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000492:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000496:	684f      	ldr	r7, [r1, #4]
 8000498:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800049c:	d001      	beq.n	80004a2 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800049e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80004a2:	4d4d      	ldr	r5, [pc, #308]	; (80005d8 <HAL_GPIO_Init+0x17c>)
 80004a4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004a6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80004a8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004ac:	684f      	ldr	r7, [r1, #4]
 80004ae:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80004b2:	d001      	beq.n	80004b8 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 80004b4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80004b8:	4d47      	ldr	r5, [pc, #284]	; (80005d8 <HAL_GPIO_Init+0x17c>)
 80004ba:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80004bc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80004be:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004c0:	684e      	ldr	r6, [r1, #4]
 80004c2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80004c6:	d001      	beq.n	80004cc <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80004c8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80004cc:	4a42      	ldr	r2, [pc, #264]	; (80005d8 <HAL_GPIO_Init+0x17c>)
 80004ce:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80004d0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004d2:	680a      	ldr	r2, [r1, #0]
 80004d4:	fa32 f403 	lsrs.w	r4, r2, r3
 80004d8:	d078      	beq.n	80005cc <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004da:	2401      	movs	r4, #1
 80004dc:	409c      	lsls	r4, r3
    if(iocurrent)
 80004de:	4022      	ands	r2, r4
 80004e0:	d0f6      	beq.n	80004d0 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004e2:	684d      	ldr	r5, [r1, #4]
 80004e4:	2d02      	cmp	r5, #2
 80004e6:	d001      	beq.n	80004ec <HAL_GPIO_Init+0x90>
 80004e8:	2d12      	cmp	r5, #18
 80004ea:	d110      	bne.n	800050e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3];
 80004ec:	08de      	lsrs	r6, r3, #3
 80004ee:	3608      	adds	r6, #8
 80004f0:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004f4:	f003 0507 	and.w	r5, r3, #7
 80004f8:	00af      	lsls	r7, r5, #2
 80004fa:	250f      	movs	r5, #15
 80004fc:	40bd      	lsls	r5, r7
 80004fe:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000502:	690d      	ldr	r5, [r1, #16]
 8000504:	40bd      	lsls	r5, r7
 8000506:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800050a:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 800050e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000510:	005f      	lsls	r7, r3, #1
 8000512:	2503      	movs	r5, #3
 8000514:	40bd      	lsls	r5, r7
 8000516:	43ed      	mvns	r5, r5
 8000518:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800051c:	684e      	ldr	r6, [r1, #4]
 800051e:	f006 0603 	and.w	r6, r6, #3
 8000522:	40be      	lsls	r6, r7
 8000524:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8000528:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800052a:	684e      	ldr	r6, [r1, #4]
 800052c:	f106 3cff 	add.w	ip, r6, #4294967295
 8000530:	f1bc 0f01 	cmp.w	ip, #1
 8000534:	d903      	bls.n	800053e <HAL_GPIO_Init+0xe2>
 8000536:	2e11      	cmp	r6, #17
 8000538:	d001      	beq.n	800053e <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800053a:	2e12      	cmp	r6, #18
 800053c:	d110      	bne.n	8000560 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 800053e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000540:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000544:	68ce      	ldr	r6, [r1, #12]
 8000546:	40be      	lsls	r6, r7
 8000548:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 800054c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800054e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000550:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000554:	684e      	ldr	r6, [r1, #4]
 8000556:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800055a:	409e      	lsls	r6, r3
 800055c:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 800055e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000560:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000562:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000564:	688c      	ldr	r4, [r1, #8]
 8000566:	40bc      	lsls	r4, r7
 8000568:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800056a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800056c:	684c      	ldr	r4, [r1, #4]
 800056e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000572:	d0ad      	beq.n	80004d0 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000574:	4c19      	ldr	r4, [pc, #100]	; (80005dc <HAL_GPIO_Init+0x180>)
 8000576:	69a5      	ldr	r5, [r4, #24]
 8000578:	f045 0501 	orr.w	r5, r5, #1
 800057c:	61a5      	str	r5, [r4, #24]
 800057e:	69a4      	ldr	r4, [r4, #24]
 8000580:	f004 0401 	and.w	r4, r4, #1
 8000584:	9401      	str	r4, [sp, #4]
 8000586:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000588:	089d      	lsrs	r5, r3, #2
 800058a:	1cae      	adds	r6, r5, #2
 800058c:	4c11      	ldr	r4, [pc, #68]	; (80005d4 <HAL_GPIO_Init+0x178>)
 800058e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000592:	f003 0403 	and.w	r4, r3, #3
 8000596:	00a6      	lsls	r6, r4, #2
 8000598:	240f      	movs	r4, #15
 800059a:	40b4      	lsls	r4, r6
 800059c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005a0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80005a4:	f43f af60 	beq.w	8000468 <HAL_GPIO_Init+0xc>
 80005a8:	4c0d      	ldr	r4, [pc, #52]	; (80005e0 <HAL_GPIO_Init+0x184>)
 80005aa:	42a0      	cmp	r0, r4
 80005ac:	d00a      	beq.n	80005c4 <HAL_GPIO_Init+0x168>
 80005ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005b2:	42a0      	cmp	r0, r4
 80005b4:	d008      	beq.n	80005c8 <HAL_GPIO_Init+0x16c>
 80005b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005ba:	42a0      	cmp	r0, r4
 80005bc:	f43f af52 	beq.w	8000464 <HAL_GPIO_Init+0x8>
 80005c0:	2405      	movs	r4, #5
 80005c2:	e752      	b.n	800046a <HAL_GPIO_Init+0xe>
 80005c4:	2401      	movs	r4, #1
 80005c6:	e750      	b.n	800046a <HAL_GPIO_Init+0xe>
 80005c8:	2402      	movs	r4, #2
 80005ca:	e74e      	b.n	800046a <HAL_GPIO_Init+0xe>
  }
}
 80005cc:	b002      	add	sp, #8
 80005ce:	bcf0      	pop	{r4, r5, r6, r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40010000 	.word	0x40010000
 80005d8:	40010400 	.word	0x40010400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	48000400 	.word	0x48000400

080005e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005e4:	b90a      	cbnz	r2, 80005ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80005e6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80005e8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80005ea:	6181      	str	r1, [r0, #24]
 80005ec:	4770      	bx	lr
	...

080005f0 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80005f0:	2800      	cmp	r0, #0
 80005f2:	f000 82f5 	beq.w	8000be0 <HAL_RCC_OscConfig+0x5f0>
{
 80005f6:	b570      	push	{r4, r5, r6, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005fc:	6803      	ldr	r3, [r0, #0]
 80005fe:	f013 0f01 	tst.w	r3, #1
 8000602:	d03b      	beq.n	800067c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000604:	4bb5      	ldr	r3, [pc, #724]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f003 030c 	and.w	r3, r3, #12
 800060c:	2b04      	cmp	r3, #4
 800060e:	d01e      	beq.n	800064e <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000610:	4bb2      	ldr	r3, [pc, #712]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f003 030c 	and.w	r3, r3, #12
 8000618:	2b08      	cmp	r3, #8
 800061a:	d013      	beq.n	8000644 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061c:	6863      	ldr	r3, [r4, #4]
 800061e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000622:	d068      	beq.n	80006f6 <HAL_RCC_OscConfig+0x106>
 8000624:	2b00      	cmp	r3, #0
 8000626:	f040 8092 	bne.w	800074e <HAL_RCC_OscConfig+0x15e>
 800062a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800062e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e05d      	b.n	8000700 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000644:	4ba5      	ldr	r3, [pc, #660]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800064c:	d0e6      	beq.n	800061c <HAL_RCC_OscConfig+0x2c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800064e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000652:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000656:	4ba1      	ldr	r3, [pc, #644]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000658:	6819      	ldr	r1, [r3, #0]
 800065a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800065e:	fa93 f3a3 	rbit	r3, r3
 8000662:	fab3 f383 	clz	r3, r3
 8000666:	f003 031f 	and.w	r3, r3, #31
 800066a:	2201      	movs	r2, #1
 800066c:	fa02 f303 	lsl.w	r3, r2, r3
 8000670:	420b      	tst	r3, r1
 8000672:	d003      	beq.n	800067c <HAL_RCC_OscConfig+0x8c>
 8000674:	6863      	ldr	r3, [r4, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	f000 82b4 	beq.w	8000be4 <HAL_RCC_OscConfig+0x5f4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800067c:	6823      	ldr	r3, [r4, #0]
 800067e:	f013 0f02 	tst.w	r3, #2
 8000682:	f000 80c6 	beq.w	8000812 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000686:	4b95      	ldr	r3, [pc, #596]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f013 0f0c 	tst.w	r3, #12
 800068e:	f000 809c 	beq.w	80007ca <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000692:	4b92      	ldr	r3, [pc, #584]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	f003 030c 	and.w	r3, r3, #12
 800069a:	2b08      	cmp	r3, #8
 800069c:	f000 808f 	beq.w	80007be <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006a0:	6923      	ldr	r3, [r4, #16]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 80f3 	beq.w	800088e <HAL_RCC_OscConfig+0x29e>
 80006a8:	2201      	movs	r2, #1
 80006aa:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80006ae:	fab3 f383 	clz	r3, r3
 80006b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006be:	f7ff fdc5 	bl	800024c <HAL_GetTick>
 80006c2:	4605      	mov	r5, r0
 80006c4:	2302      	movs	r3, #2
 80006c6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006ca:	4b84      	ldr	r3, [pc, #528]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 80006cc:	6819      	ldr	r1, [r3, #0]
 80006ce:	2302      	movs	r3, #2
 80006d0:	fa93 f3a3 	rbit	r3, r3
 80006d4:	fab3 f383 	clz	r3, r3
 80006d8:	f003 031f 	and.w	r3, r3, #31
 80006dc:	2201      	movs	r2, #1
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	420b      	tst	r3, r1
 80006e4:	f040 80c4 	bne.w	8000870 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006e8:	f7ff fdb0 	bl	800024c <HAL_GetTick>
 80006ec:	1b40      	subs	r0, r0, r5
 80006ee:	2802      	cmp	r0, #2
 80006f0:	d9e8      	bls.n	80006c4 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80006f2:	2003      	movs	r0, #3
 80006f4:	e283      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006f6:	4a79      	ldr	r2, [pc, #484]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 80006f8:	6813      	ldr	r3, [r2, #0]
 80006fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006fe:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000700:	4a76      	ldr	r2, [pc, #472]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000702:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000704:	f023 030f 	bic.w	r3, r3, #15
 8000708:	68a1      	ldr	r1, [r4, #8]
 800070a:	430b      	orrs	r3, r1
 800070c:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800070e:	6863      	ldr	r3, [r4, #4]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d036      	beq.n	8000782 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8000714:	f7ff fd9a 	bl	800024c <HAL_GetTick>
 8000718:	4605      	mov	r5, r0
 800071a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800071e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000722:	4b6e      	ldr	r3, [pc, #440]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000724:	6819      	ldr	r1, [r3, #0]
 8000726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800072a:	fa93 f3a3 	rbit	r3, r3
 800072e:	fab3 f383 	clz	r3, r3
 8000732:	f003 031f 	and.w	r3, r3, #31
 8000736:	2201      	movs	r2, #1
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	420b      	tst	r3, r1
 800073e:	d19d      	bne.n	800067c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000740:	f7ff fd84 	bl	800024c <HAL_GetTick>
 8000744:	1b40      	subs	r0, r0, r5
 8000746:	2864      	cmp	r0, #100	; 0x64
 8000748:	d9e7      	bls.n	800071a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800074a:	2003      	movs	r0, #3
 800074c:	e257      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800074e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000752:	d009      	beq.n	8000768 <HAL_RCC_OscConfig+0x178>
 8000754:	4b61      	ldr	r3, [pc, #388]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	e7cb      	b.n	8000700 <HAL_RCC_OscConfig+0x110>
 8000768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800076c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e7be      	b.n	8000700 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000782:	f7ff fd63 	bl	800024c <HAL_GetTick>
 8000786:	4605      	mov	r5, r0
 8000788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800078c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000790:	4b52      	ldr	r3, [pc, #328]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000792:	6819      	ldr	r1, [r3, #0]
 8000794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000798:	fa93 f3a3 	rbit	r3, r3
 800079c:	fab3 f383 	clz	r3, r3
 80007a0:	f003 031f 	and.w	r3, r3, #31
 80007a4:	2201      	movs	r2, #1
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	420b      	tst	r3, r1
 80007ac:	f43f af66 	beq.w	800067c <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007b0:	f7ff fd4c 	bl	800024c <HAL_GetTick>
 80007b4:	1b40      	subs	r0, r0, r5
 80007b6:	2864      	cmp	r0, #100	; 0x64
 80007b8:	d9e6      	bls.n	8000788 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80007ba:	2003      	movs	r0, #3
 80007bc:	e21f      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80007be:	4b47      	ldr	r3, [pc, #284]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80007c6:	f47f af6b 	bne.w	80006a0 <HAL_RCC_OscConfig+0xb0>
 80007ca:	2302      	movs	r3, #2
 80007cc:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007d0:	4b42      	ldr	r3, [pc, #264]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	2302      	movs	r3, #2
 80007d6:	fa93 f3a3 	rbit	r3, r3
 80007da:	fab3 f383 	clz	r3, r3
 80007de:	f003 031f 	and.w	r3, r3, #31
 80007e2:	2201      	movs	r2, #1
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	420b      	tst	r3, r1
 80007ea:	d004      	beq.n	80007f6 <HAL_RCC_OscConfig+0x206>
 80007ec:	6923      	ldr	r3, [r4, #16]
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d001      	beq.n	80007f6 <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 80007f2:	2001      	movs	r0, #1
 80007f4:	e203      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007f6:	4839      	ldr	r0, [pc, #228]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 80007f8:	6803      	ldr	r3, [r0, #0]
 80007fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007fe:	6961      	ldr	r1, [r4, #20]
 8000800:	22f8      	movs	r2, #248	; 0xf8
 8000802:	fa92 f2a2 	rbit	r2, r2
 8000806:	fab2 f282 	clz	r2, r2
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	4313      	orrs	r3, r2
 8000810:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000812:	6823      	ldr	r3, [r4, #0]
 8000814:	f013 0f08 	tst.w	r3, #8
 8000818:	f000 808c 	beq.w	8000934 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800081c:	69a3      	ldr	r3, [r4, #24]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d060      	beq.n	80008e4 <HAL_RCC_OscConfig+0x2f4>
 8000822:	2101      	movs	r1, #1
 8000824:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000828:	fab2 f282 	clz	r2, r2
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <HAL_RCC_OscConfig+0x2f0>)
 800082e:	4413      	add	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000834:	f7ff fd0a 	bl	800024c <HAL_GetTick>
 8000838:	4605      	mov	r5, r0
 800083a:	2302      	movs	r3, #2
 800083c:	fa93 f2a3 	rbit	r2, r3
 8000840:	fa93 f2a3 	rbit	r2, r3
 8000844:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000848:	4a24      	ldr	r2, [pc, #144]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 800084a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800084c:	fa93 f3a3 	rbit	r3, r3
 8000850:	fab3 f383 	clz	r3, r3
 8000854:	f003 031f 	and.w	r3, r3, #31
 8000858:	2201      	movs	r2, #1
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	420b      	tst	r3, r1
 8000860:	d168      	bne.n	8000934 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000862:	f7ff fcf3 	bl	800024c <HAL_GetTick>
 8000866:	1b40      	subs	r0, r0, r5
 8000868:	2802      	cmp	r0, #2
 800086a:	d9e6      	bls.n	800083a <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 800086c:	2003      	movs	r0, #3
 800086e:	e1c6      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000870:	481a      	ldr	r0, [pc, #104]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 8000872:	6803      	ldr	r3, [r0, #0]
 8000874:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000878:	6961      	ldr	r1, [r4, #20]
 800087a:	22f8      	movs	r2, #248	; 0xf8
 800087c:	fa92 f2a2 	rbit	r2, r2
 8000880:	fab2 f282 	clz	r2, r2
 8000884:	fa01 f202 	lsl.w	r2, r1, r2
 8000888:	4313      	orrs	r3, r2
 800088a:	6003      	str	r3, [r0, #0]
 800088c:	e7c1      	b.n	8000812 <HAL_RCC_OscConfig+0x222>
 800088e:	2301      	movs	r3, #1
 8000890:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000894:	fab3 f383 	clz	r3, r3
 8000898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800089c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008a6:	f7ff fcd1 	bl	800024c <HAL_GetTick>
 80008aa:	4605      	mov	r5, r0
 80008ac:	2302      	movs	r3, #2
 80008ae:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_RCC_OscConfig+0x2ec>)
 80008b4:	6819      	ldr	r1, [r3, #0]
 80008b6:	2302      	movs	r3, #2
 80008b8:	fa93 f3a3 	rbit	r3, r3
 80008bc:	fab3 f383 	clz	r3, r3
 80008c0:	f003 031f 	and.w	r3, r3, #31
 80008c4:	2201      	movs	r2, #1
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	420b      	tst	r3, r1
 80008cc:	d0a1      	beq.n	8000812 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008ce:	f7ff fcbd 	bl	800024c <HAL_GetTick>
 80008d2:	1b40      	subs	r0, r0, r5
 80008d4:	2802      	cmp	r0, #2
 80008d6:	d9e9      	bls.n	80008ac <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 80008d8:	2003      	movs	r0, #3
 80008da:	e190      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
 80008dc:	40021000 	.word	0x40021000
 80008e0:	10908120 	.word	0x10908120
 80008e4:	2201      	movs	r2, #1
 80008e6:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80008ea:	fab2 f282 	clz	r2, r2
 80008ee:	4bc0      	ldr	r3, [pc, #768]	; (8000bf0 <HAL_RCC_OscConfig+0x600>)
 80008f0:	4413      	add	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008f8:	f7ff fca8 	bl	800024c <HAL_GetTick>
 80008fc:	4605      	mov	r5, r0
 80008fe:	2302      	movs	r3, #2
 8000900:	fa93 f2a3 	rbit	r2, r3
 8000904:	fa93 f2a3 	rbit	r2, r3
 8000908:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800090c:	4ab9      	ldr	r2, [pc, #740]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 800090e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000910:	fa93 f3a3 	rbit	r3, r3
 8000914:	fab3 f383 	clz	r3, r3
 8000918:	f003 031f 	and.w	r3, r3, #31
 800091c:	2201      	movs	r2, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	420b      	tst	r3, r1
 8000924:	d006      	beq.n	8000934 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000926:	f7ff fc91 	bl	800024c <HAL_GetTick>
 800092a:	1b40      	subs	r0, r0, r5
 800092c:	2802      	cmp	r0, #2
 800092e:	d9e6      	bls.n	80008fe <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8000930:	2003      	movs	r0, #3
 8000932:	e164      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	f013 0f04 	tst.w	r3, #4
 800093a:	f000 80b3 	beq.w	8000aa4 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800093e:	4bad      	ldr	r3, [pc, #692]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000946:	d120      	bne.n	800098a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	4baa      	ldr	r3, [pc, #680]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000950:	61da      	str	r2, [r3, #28]
 8000952:	69db      	ldr	r3, [r3, #28]
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800095c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800095e:	4ba6      	ldr	r3, [pc, #664]	; (8000bf8 <HAL_RCC_OscConfig+0x608>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000966:	d012      	beq.n	800098e <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000968:	68e3      	ldr	r3, [r4, #12]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d023      	beq.n	80009b6 <HAL_RCC_OscConfig+0x3c6>
 800096e:	bb73      	cbnz	r3, 80009ce <HAL_RCC_OscConfig+0x3de>
 8000970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000974:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000978:	6a1a      	ldr	r2, [r3, #32]
 800097a:	f022 0201 	bic.w	r2, r2, #1
 800097e:	621a      	str	r2, [r3, #32]
 8000980:	6a1a      	ldr	r2, [r3, #32]
 8000982:	f022 0204 	bic.w	r2, r2, #4
 8000986:	621a      	str	r2, [r3, #32]
 8000988:	e01a      	b.n	80009c0 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 800098a:	2500      	movs	r5, #0
 800098c:	e7e7      	b.n	800095e <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800098e:	4a9a      	ldr	r2, [pc, #616]	; (8000bf8 <HAL_RCC_OscConfig+0x608>)
 8000990:	6813      	ldr	r3, [r2, #0]
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000998:	f7ff fc58 	bl	800024c <HAL_GetTick>
 800099c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800099e:	4b96      	ldr	r3, [pc, #600]	; (8000bf8 <HAL_RCC_OscConfig+0x608>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80009a6:	d1df      	bne.n	8000968 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009a8:	f7ff fc50 	bl	800024c <HAL_GetTick>
 80009ac:	1b80      	subs	r0, r0, r6
 80009ae:	2864      	cmp	r0, #100	; 0x64
 80009b0:	d9f5      	bls.n	800099e <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 80009b2:	2003      	movs	r0, #3
 80009b4:	e123      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009b6:	4a8f      	ldr	r2, [pc, #572]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 80009b8:	6a13      	ldr	r3, [r2, #32]
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009c0:	68e3      	ldr	r3, [r4, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d041      	beq.n	8000a4a <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009c6:	f7ff fc41 	bl	800024c <HAL_GetTick>
 80009ca:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009cc:	e02b      	b.n	8000a26 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ce:	2b05      	cmp	r3, #5
 80009d0:	d009      	beq.n	80009e6 <HAL_RCC_OscConfig+0x3f6>
 80009d2:	4b88      	ldr	r3, [pc, #544]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 80009d4:	6a1a      	ldr	r2, [r3, #32]
 80009d6:	f022 0201 	bic.w	r2, r2, #1
 80009da:	621a      	str	r2, [r3, #32]
 80009dc:	6a1a      	ldr	r2, [r3, #32]
 80009de:	f022 0204 	bic.w	r2, r2, #4
 80009e2:	621a      	str	r2, [r3, #32]
 80009e4:	e7ec      	b.n	80009c0 <HAL_RCC_OscConfig+0x3d0>
 80009e6:	4b83      	ldr	r3, [pc, #524]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 80009e8:	6a1a      	ldr	r2, [r3, #32]
 80009ea:	f042 0204 	orr.w	r2, r2, #4
 80009ee:	621a      	str	r2, [r3, #32]
 80009f0:	6a1a      	ldr	r2, [r3, #32]
 80009f2:	f042 0201 	orr.w	r2, r2, #1
 80009f6:	621a      	str	r2, [r3, #32]
 80009f8:	e7e2      	b.n	80009c0 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009fa:	4b7e      	ldr	r3, [pc, #504]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 80009fc:	6a19      	ldr	r1, [r3, #32]
 80009fe:	2302      	movs	r3, #2
 8000a00:	fa93 f3a3 	rbit	r3, r3
 8000a04:	fab3 f383 	clz	r3, r3
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	4219      	tst	r1, r3
 8000a14:	d145      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a16:	f7ff fc19 	bl	800024c <HAL_GetTick>
 8000a1a:	1b80      	subs	r0, r0, r6
 8000a1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80e1 	bhi.w	8000be8 <HAL_RCC_OscConfig+0x5f8>
 8000a26:	2302      	movs	r3, #2
 8000a28:	fa93 f2a3 	rbit	r2, r3
 8000a2c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a30:	fab3 f383 	clz	r3, r3
 8000a34:	095b      	lsrs	r3, r3, #5
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d0dd      	beq.n	80009fa <HAL_RCC_OscConfig+0x40a>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	fa93 f3a3 	rbit	r3, r3
 8000a44:	4b6b      	ldr	r3, [pc, #428]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000a46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000a48:	e7d9      	b.n	80009fe <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a4a:	f7ff fbff 	bl	800024c <HAL_GetTick>
 8000a4e:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a50:	e015      	b.n	8000a7e <HAL_RCC_OscConfig+0x48e>
 8000a52:	4b68      	ldr	r3, [pc, #416]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000a54:	6a19      	ldr	r1, [r3, #32]
 8000a56:	2302      	movs	r3, #2
 8000a58:	fa93 f3a3 	rbit	r3, r3
 8000a5c:	fab3 f383 	clz	r3, r3
 8000a60:	f003 031f 	and.w	r3, r3, #31
 8000a64:	2201      	movs	r2, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	4219      	tst	r1, r3
 8000a6c:	d019      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6e:	f7ff fbed 	bl	800024c <HAL_GetTick>
 8000a72:	1b80      	subs	r0, r0, r6
 8000a74:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a78:	4298      	cmp	r0, r3
 8000a7a:	f200 80b7 	bhi.w	8000bec <HAL_RCC_OscConfig+0x5fc>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	fa93 f2a3 	rbit	r2, r3
 8000a84:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a88:	fab3 f383 	clz	r3, r3
 8000a8c:	095b      	lsrs	r3, r3, #5
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d0dd      	beq.n	8000a52 <HAL_RCC_OscConfig+0x462>
 8000a96:	2302      	movs	r3, #2
 8000a98:	fa93 f3a3 	rbit	r3, r3
 8000a9c:	4b55      	ldr	r3, [pc, #340]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000a9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000aa0:	e7d9      	b.n	8000a56 <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000aa2:	bbb5      	cbnz	r5, 8000b12 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aa4:	69e3      	ldr	r3, [r4, #28]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 80a8 	beq.w	8000bfc <HAL_RCC_OscConfig+0x60c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000aac:	4a51      	ldr	r2, [pc, #324]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000aae:	6852      	ldr	r2, [r2, #4]
 8000ab0:	f002 020c 	and.w	r2, r2, #12
 8000ab4:	2a08      	cmp	r2, #8
 8000ab6:	f000 80a4 	beq.w	8000c02 <HAL_RCC_OscConfig+0x612>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d02f      	beq.n	8000b1e <HAL_RCC_OscConfig+0x52e>
 8000abe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ac6:	fab3 f383 	clz	r3, r3
 8000aca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ace:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad8:	f7ff fbb8 	bl	800024c <HAL_GetTick>
 8000adc:	4604      	mov	r4, r0
 8000ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ae2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ae6:	4b43      	ldr	r3, [pc, #268]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000ae8:	6819      	ldr	r1, [r3, #0]
 8000aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aee:	fa93 f3a3 	rbit	r3, r3
 8000af2:	fab3 f383 	clz	r3, r3
 8000af6:	f003 031f 	and.w	r3, r3, #31
 8000afa:	2201      	movs	r2, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	4219      	tst	r1, r3
 8000b02:	d06b      	beq.n	8000bdc <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b04:	f7ff fba2 	bl	800024c <HAL_GetTick>
 8000b08:	1b00      	subs	r0, r0, r4
 8000b0a:	2802      	cmp	r0, #2
 8000b0c:	d9e7      	bls.n	8000ade <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 8000b0e:	2003      	movs	r0, #3
 8000b10:	e075      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b12:	4a38      	ldr	r2, [pc, #224]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000b14:	69d3      	ldr	r3, [r2, #28]
 8000b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	61d3      	str	r3, [r2, #28]
 8000b1c:	e7c2      	b.n	8000aa4 <HAL_RCC_OscConfig+0x4b4>
 8000b1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b22:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b26:	fab3 f383 	clz	r3, r3
 8000b2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b38:	f7ff fb88 	bl	800024c <HAL_GetTick>
 8000b3c:	4605      	mov	r5, r0
 8000b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b42:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000b48:	6819      	ldr	r1, [r3, #0]
 8000b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b4e:	fa93 f3a3 	rbit	r3, r3
 8000b52:	fab3 f383 	clz	r3, r3
 8000b56:	f003 031f 	and.w	r3, r3, #31
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	4219      	tst	r1, r3
 8000b62:	d006      	beq.n	8000b72 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b64:	f7ff fb72 	bl	800024c <HAL_GetTick>
 8000b68:	1b40      	subs	r0, r0, r5
 8000b6a:	2802      	cmp	r0, #2
 8000b6c:	d9e7      	bls.n	8000b3e <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8000b6e:	2003      	movs	r0, #3
 8000b70:	e045      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b72:	4920      	ldr	r1, [pc, #128]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000b74:	684b      	ldr	r3, [r1, #4]
 8000b76:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000b7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b7c:	6a20      	ldr	r0, [r4, #32]
 8000b7e:	4302      	orrs	r2, r0
 8000b80:	4313      	orrs	r3, r2
 8000b82:	604b      	str	r3, [r1, #4]
 8000b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b88:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000b8c:	fab3 f383 	clz	r3, r3
 8000b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fb55 	bl	800024c <HAL_GetTick>
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_RCC_OscConfig+0x604>)
 8000bae:	6819      	ldr	r1, [r3, #0]
 8000bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bb4:	fa93 f3a3 	rbit	r3, r3
 8000bb8:	fab3 f383 	clz	r3, r3
 8000bbc:	f003 031f 	and.w	r3, r3, #31
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	4219      	tst	r1, r3
 8000bc8:	d106      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bca:	f7ff fb3f 	bl	800024c <HAL_GetTick>
 8000bce:	1b00      	subs	r0, r0, r4
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9e7      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	e012      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e010      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e00e      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
    return HAL_ERROR;
 8000be0:	2001      	movs	r0, #1
}
 8000be2:	4770      	bx	lr
        return HAL_ERROR;
 8000be4:	2001      	movs	r0, #1
 8000be6:	e00a      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
          return HAL_TIMEOUT;
 8000be8:	2003      	movs	r0, #3
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
          return HAL_TIMEOUT;
 8000bec:	2003      	movs	r0, #3
 8000bee:	e006      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
 8000bf0:	10908120 	.word	0x10908120
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40007000 	.word	0x40007000
  return HAL_OK;
 8000bfc:	2000      	movs	r0, #0
}
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000c02:	2001      	movs	r0, #1
 8000c04:	e7fb      	b.n	8000bfe <HAL_RCC_OscConfig+0x60e>
 8000c06:	bf00      	nop

08000c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c08:	b410      	push	{r4}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x60>)
 8000c0c:	685c      	ldr	r4, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000c0e:	f004 030c 	and.w	r3, r4, #12
 8000c12:	2b08      	cmp	r3, #8
 8000c14:	d126      	bne.n	8000c64 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000c16:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8000c1a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000c1e:	fa93 f3a3 	rbit	r3, r3
 8000c22:	fab3 f383 	clz	r3, r3
 8000c26:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2a:	4910      	ldr	r1, [pc, #64]	; (8000c6c <HAL_RCC_GetSysClockFreq+0x64>)
 8000c2c:	5cc8      	ldrb	r0, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x60>)
 8000c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa92 f2a2 	rbit	r2, r2
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	40d3      	lsrs	r3, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	7c1a      	ldrb	r2, [r3, #16]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000c46:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000c4a:	d105      	bne.n	8000c58 <HAL_RCC_GetSysClockFreq+0x50>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x68>)
 8000c4e:	fb03 f000 	mul.w	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c56:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c5e:	fb00 f003 	mul.w	r0, r0, r3
 8000c62:	e7f6      	b.n	8000c52 <HAL_RCC_GetSysClockFreq+0x4a>
      sysclockfreq = HSE_VALUE;
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000c66:	e7f4      	b.n	8000c52 <HAL_RCC_GetSysClockFreq+0x4a>
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	08001174 	.word	0x08001174
 8000c70:	003d0900 	.word	0x003d0900
 8000c74:	007a1200 	.word	0x007a1200

08000c78 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	f000 80c0 	beq.w	8000dfe <HAL_RCC_ClockConfig+0x186>
{
 8000c7e:	b570      	push	{r4, r5, r6, lr}
 8000c80:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c82:	4b61      	ldr	r3, [pc, #388]	; (8000e08 <HAL_RCC_ClockConfig+0x190>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d20c      	bcs.n	8000ca8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c8e:	4a5e      	ldr	r2, [pc, #376]	; (8000e08 <HAL_RCC_ClockConfig+0x190>)
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	f023 0307 	bic.w	r3, r3, #7
 8000c96:	430b      	orrs	r3, r1
 8000c98:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c9a:	6813      	ldr	r3, [r2, #0]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d001      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8000ca4:	2001      	movs	r0, #1
}
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	f013 0f02 	tst.w	r3, #2
 8000cae:	d006      	beq.n	8000cbe <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cb0:	4a56      	ldr	r2, [pc, #344]	; (8000e0c <HAL_RCC_ClockConfig+0x194>)
 8000cb2:	6853      	ldr	r3, [r2, #4]
 8000cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cb8:	68a0      	ldr	r0, [r4, #8]
 8000cba:	4303      	orrs	r3, r0
 8000cbc:	6053      	str	r3, [r2, #4]
 8000cbe:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	f013 0f01 	tst.w	r3, #1
 8000cc6:	d05a      	beq.n	8000d7e <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc8:	6863      	ldr	r3, [r4, #4]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d02d      	beq.n	8000d2a <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d040      	beq.n	8000d54 <HAL_RCC_ClockConfig+0xdc>
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd8:	4a4c      	ldr	r2, [pc, #304]	; (8000e0c <HAL_RCC_ClockConfig+0x194>)
 8000cda:	6810      	ldr	r0, [r2, #0]
 8000cdc:	2202      	movs	r2, #2
 8000cde:	fa92 f2a2 	rbit	r2, r2
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	f002 021f 	and.w	r2, r2, #31
 8000cea:	2101      	movs	r1, #1
 8000cec:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf0:	4210      	tst	r0, r2
 8000cf2:	f000 8086 	beq.w	8000e02 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cf6:	4945      	ldr	r1, [pc, #276]	; (8000e0c <HAL_RCC_ClockConfig+0x194>)
 8000cf8:	684a      	ldr	r2, [r1, #4]
 8000cfa:	f022 0203 	bic.w	r2, r2, #3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000d02:	f7ff faa3 	bl	800024c <HAL_GetTick>
 8000d06:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d08:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <HAL_RCC_ClockConfig+0x194>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	6862      	ldr	r2, [r4, #4]
 8000d12:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d16:	d032      	beq.n	8000d7e <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d18:	f7ff fa98 	bl	800024c <HAL_GetTick>
 8000d1c:	1b80      	subs	r0, r0, r6
 8000d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d9f0      	bls.n	8000d08 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8000d26:	2003      	movs	r0, #3
 8000d28:	e7bd      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x2e>
 8000d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d2e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d32:	4a36      	ldr	r2, [pc, #216]	; (8000e0c <HAL_RCC_ClockConfig+0x194>)
 8000d34:	6810      	ldr	r0, [r2, #0]
 8000d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	f002 021f 	and.w	r2, r2, #31
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	4202      	tst	r2, r0
 8000d4e:	d1d2      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
 8000d52:	e7a8      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x2e>
 8000d54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d58:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <HAL_RCC_ClockConfig+0x194>)
 8000d5e:	6810      	ldr	r0, [r2, #0]
 8000d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d64:	fa92 f2a2 	rbit	r2, r2
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	f002 021f 	and.w	r2, r2, #31
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	4210      	tst	r0, r2
 8000d78:	d1bd      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	e793      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_RCC_ClockConfig+0x190>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	42ab      	cmp	r3, r5
 8000d88:	d90c      	bls.n	8000da4 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_RCC_ClockConfig+0x190>)
 8000d8c:	6813      	ldr	r3, [r2, #0]
 8000d8e:	f023 0307 	bic.w	r3, r3, #7
 8000d92:	432b      	orrs	r3, r5
 8000d94:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d001      	beq.n	8000da4 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8000da0:	2001      	movs	r0, #1
 8000da2:	e780      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	f013 0f04 	tst.w	r3, #4
 8000daa:	d006      	beq.n	8000dba <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dac:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_RCC_ClockConfig+0x194>)
 8000dae:	6853      	ldr	r3, [r2, #4]
 8000db0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000db4:	68e1      	ldr	r1, [r4, #12]
 8000db6:	430b      	orrs	r3, r1
 8000db8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	f013 0f08 	tst.w	r3, #8
 8000dc0:	d007      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_RCC_ClockConfig+0x194>)
 8000dc4:	6853      	ldr	r3, [r2, #4]
 8000dc6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000dca:	6921      	ldr	r1, [r4, #16]
 8000dcc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dd0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000dd2:	f7ff ff19 	bl	8000c08 <HAL_RCC_GetSysClockFreq>
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_RCC_ClockConfig+0x194>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dde:	22f0      	movs	r2, #240	; 0xf0
 8000de0:	fa92 f2a2 	rbit	r2, r2
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	40d3      	lsrs	r3, r2
 8000dea:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <HAL_RCC_ClockConfig+0x198>)
 8000dec:	5cd3      	ldrb	r3, [r2, r3]
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_RCC_ClockConfig+0x19c>)
 8000df2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff f9e7 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	e753      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
}
 8000e00:	4770      	bx	lr
        return HAL_ERROR;
 8000e02:	2001      	movs	r0, #1
 8000e04:	e74f      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x2e>
 8000e06:	bf00      	nop
 8000e08:	40022000 	.word	0x40022000
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	08001194 	.word	0x08001194
 8000e14:	20000008 	.word	0x20000008

08000e18 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1a:	b089      	sub	sp, #36	; 0x24
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	9403      	str	r4, [sp, #12]
 8000e20:	9404      	str	r4, [sp, #16]
 8000e22:	9405      	str	r4, [sp, #20]
 8000e24:	9406      	str	r4, [sp, #24]
 8000e26:	9407      	str	r4, [sp, #28]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <MX_GPIO_Init+0xd8>)
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e30:	615a      	str	r2, [r3, #20]
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000e38:	9200      	str	r2, [sp, #0]
 8000e3a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000e4a:	9201      	str	r2, [sp, #4]
 8000e4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	9b02      	ldr	r3, [sp, #8]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, DIM_R_Pin | PDM_G_Pin, GPIO_PIN_RESET);
 8000e60:	4f24      	ldr	r7, [pc, #144]	; (8000ef4 <MX_GPIO_Init+0xdc>)
 8000e62:	4622      	mov	r2, r4
 8000e64:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000e68:	4638      	mov	r0, r7
 8000e6a:	f7ff fbbb 	bl	80005e4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(
 8000e6e:	4622      	mov	r2, r4
 8000e70:	21ff      	movs	r1, #255	; 0xff
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f7ff fbb5 	bl	80005e4 <HAL_GPIO_WritePin>
        DCM_B_Pin | DIM_G_Pin | DIM_B_Pin | PDM_R_Pin | DCM_G_Pin | PDM_B_Pin |
            FSM_G_Pin | BMS_B_Pin,
        GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(
 8000e7a:	4d1f      	ldr	r5, [pc, #124]	; (8000ef8 <MX_GPIO_Init+0xe0>)
 8000e7c:	4622      	mov	r2, r4
 8000e7e:	f240 4127 	movw	r1, #1063	; 0x427
 8000e82:	4628      	mov	r0, r5
 8000e84:	f7ff fbae 	bl	80005e4 <HAL_GPIO_WritePin>
        GPIOB, DCM_R_Pin | BMS_G_Pin | FSM_R_Pin | FSM_B_Pin | BMS_R_Pin,
        GPIO_PIN_RESET);

    /*Configure GPIO pins : DIM_R_Pin PDM_G_Pin */
    GPIO_InitStruct.Pin   = DIM_R_Pin | PDM_G_Pin;
 8000e88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2601      	movs	r6, #1
 8000e90:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000e92:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	a903      	add	r1, sp, #12
 8000e98:	4638      	mov	r0, r7
 8000e9a:	f7ff fadf 	bl	800045c <HAL_GPIO_Init>

    /*Configure GPIO pins : DCM_B_Pin DIM_G_Pin DIM_B_Pin PDM_R_Pin
                             DCM_G_Pin PDM_B_Pin FSM_G_Pin BMS_B_Pin */
    GPIO_InitStruct.Pin = DCM_B_Pin | DIM_G_Pin | DIM_B_Pin | PDM_R_Pin |
 8000e9e:	23ff      	movs	r3, #255	; 0xff
 8000ea0:	9303      	str	r3, [sp, #12]
                          DCM_G_Pin | PDM_B_Pin | FSM_G_Pin | BMS_B_Pin;
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ea2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000ea4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	a903      	add	r1, sp, #12
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f7ff fad5 	bl	800045c <HAL_GPIO_Init>

    /*Configure GPIO pins : DCM_R_Pin BMS_G_Pin FSM_R_Pin FSM_B_Pin
                             BMS_R_Pin */
    GPIO_InitStruct.Pin =
 8000eb2:	f240 4327 	movw	r3, #1063	; 0x427
 8000eb6:	9303      	str	r3, [sp, #12]
        DCM_R_Pin | BMS_G_Pin | FSM_R_Pin | FSM_B_Pin | BMS_R_Pin;
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000eb8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000eba:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	a903      	add	r1, sp, #12
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	f7ff facb 	bl	800045c <HAL_GPIO_Init>

    /*Configure GPIO pins : DRIVE_MODE5_Pin DRIVE_MODE4_Pin */
    GPIO_InitStruct.Pin  = DRIVE_MODE5_Pin | DRIVE_MODE4_Pin;
 8000ec6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000eca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	a903      	add	r1, sp, #12
 8000ed2:	4628      	mov	r0, r5
 8000ed4:	f7ff fac2 	bl	800045c <HAL_GPIO_Init>

    /*Configure GPIO pins : DRIVE_MODE3_Pin DRIVE_MODE2_Pin DRIVE_MODE1_Pin */
    GPIO_InitStruct.Pin  = DRIVE_MODE3_Pin | DRIVE_MODE2_Pin | DRIVE_MODE1_Pin;
 8000ed8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000edc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	a903      	add	r1, sp, #12
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f7ff fab8 	bl	800045c <HAL_GPIO_Init>
}
 8000eec:	b009      	add	sp, #36	; 0x24
 8000eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	48000400 	.word	0x48000400

08000efc <MX_CAN_Init>:
{
 8000efc:	b508      	push	{r3, lr}
    hcan.Instance                  = CAN;
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <MX_CAN_Init+0x28>)
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_CAN_Init+0x2c>)
 8000f02:	6003      	str	r3, [r0, #0]
    hcan.Init.Prescaler            = 16;
 8000f04:	2310      	movs	r3, #16
 8000f06:	6043      	str	r3, [r0, #4]
    hcan.Init.Mode                 = CAN_MODE_NORMAL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	6083      	str	r3, [r0, #8]
    hcan.Init.SyncJumpWidth        = CAN_SJW_1TQ;
 8000f0c:	60c3      	str	r3, [r0, #12]
    hcan.Init.TimeSeg1             = CAN_BS1_1TQ;
 8000f0e:	6103      	str	r3, [r0, #16]
    hcan.Init.TimeSeg2             = CAN_BS2_1TQ;
 8000f10:	6143      	str	r3, [r0, #20]
    hcan.Init.TimeTriggeredMode    = DISABLE;
 8000f12:	7603      	strb	r3, [r0, #24]
    hcan.Init.AutoBusOff           = DISABLE;
 8000f14:	7643      	strb	r3, [r0, #25]
    hcan.Init.AutoWakeUp           = DISABLE;
 8000f16:	7683      	strb	r3, [r0, #26]
    hcan.Init.AutoRetransmission   = DISABLE;
 8000f18:	76c3      	strb	r3, [r0, #27]
    hcan.Init.ReceiveFifoLocked    = DISABLE;
 8000f1a:	7703      	strb	r3, [r0, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 8000f1c:	7743      	strb	r3, [r0, #29]
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f1e:	f7ff f99b 	bl	8000258 <HAL_CAN_Init>
}
 8000f22:	bd08      	pop	{r3, pc}
 8000f24:	2000002c 	.word	0x2000002c
 8000f28:	40006400 	.word	0x40006400

08000f2c <SystemClock_Config>:
{
 8000f2c:	b510      	push	{r4, lr}
 8000f2e:	b090      	sub	sp, #64	; 0x40
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f30:	2224      	movs	r2, #36	; 0x24
 8000f32:	2100      	movs	r1, #0
 8000f34:	a807      	add	r0, sp, #28
 8000f36:	f000 f909 	bl	800114c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	9401      	str	r4, [sp, #4]
 8000f3e:	9402      	str	r4, [sp, #8]
 8000f40:	9403      	str	r4, [sp, #12]
 8000f42:	9404      	str	r4, [sp, #16]
 8000f44:	9405      	str	r4, [sp, #20]
    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000f46:	2302      	movs	r3, #2
 8000f48:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	930a      	str	r3, [sp, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4e:	2310      	movs	r3, #16
 8000f50:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	a806      	add	r0, sp, #24
 8000f54:	f7ff fb4c 	bl	80005f0 <HAL_RCC_OscConfig>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000f58:	230f      	movs	r3, #15
 8000f5a:	9301      	str	r3, [sp, #4]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 8000f5c:	9402      	str	r4, [sp, #8]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000f5e:	9403      	str	r4, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f60:	9404      	str	r4, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f62:	9405      	str	r4, [sp, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f64:	4621      	mov	r1, r4
 8000f66:	a801      	add	r0, sp, #4
 8000f68:	f7ff fe86 	bl	8000c78 <HAL_RCC_ClockConfig>
}
 8000f6c:	b010      	add	sp, #64	; 0x40
 8000f6e:	bd10      	pop	{r4, pc}

08000f70 <main>:
{
 8000f70:	b500      	push	{lr}
 8000f72:	b083      	sub	sp, #12
    HAL_Init();
 8000f74:	f7ff f94c 	bl	8000210 <HAL_Init>
    SystemClock_Config();
 8000f78:	f7ff ffd8 	bl	8000f2c <SystemClock_Config>
    MX_GPIO_Init();
 8000f7c:	f7ff ff4c 	bl	8000e18 <MX_GPIO_Init>
    MX_CAN_Init();
 8000f80:	f7ff ffbc 	bl	8000efc <MX_CAN_Init>
 8000f84:	e005      	b.n	8000f92 <main+0x22>
    	for(volatile int i=0;i<5;i++){
 8000f86:	9b01      	ldr	r3, [sp, #4]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	9b01      	ldr	r3, [sp, #4]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	ddf9      	ble.n	8000f86 <main+0x16>
 8000f92:	2300      	movs	r3, #0
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	e7f9      	b.n	8000f8c <main+0x1c>

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8000f98:	b082      	sub	sp, #8
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_MspInit+0x2c>)
 8000f9c:	699a      	ldr	r2, [r3, #24]
 8000f9e:	f042 0201 	orr.w	r2, r2, #1
 8000fa2:	619a      	str	r2, [r3, #24]
 8000fa4:	699a      	ldr	r2, [r3, #24]
 8000fa6:	f002 0201 	and.w	r2, r2, #1
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	69da      	ldr	r2, [r3, #28]
 8000fb0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fb4:	61da      	str	r2, [r3, #28]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	9b01      	ldr	r3, [sp, #4]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000fc0:	b002      	add	sp, #8
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_CAN_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000fc8:	b500      	push	{lr}
 8000fca:	b089      	sub	sp, #36	; 0x24
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9303      	str	r3, [sp, #12]
 8000fd0:	9304      	str	r3, [sp, #16]
 8000fd2:	9305      	str	r3, [sp, #20]
 8000fd4:	9306      	str	r3, [sp, #24]
 8000fd6:	9307      	str	r3, [sp, #28]
    if (hcan->Instance == CAN)
 8000fd8:	6802      	ldr	r2, [r0, #0]
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_CAN_MspInit+0x64>)
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d002      	beq.n	8000fe6 <HAL_CAN_MspInit+0x1e>

        /* USER CODE BEGIN CAN_MspInit 1 */

        /* USER CODE END CAN_MspInit 1 */
    }
}
 8000fe0:	b009      	add	sp, #36	; 0x24
 8000fe2:	f85d fb04 	ldr.w	pc, [sp], #4
        __HAL_RCC_CAN1_CLK_ENABLE();
 8000fe6:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8000fea:	69da      	ldr	r2, [r3, #28]
 8000fec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000ff0:	61da      	str	r2, [r3, #28]
 8000ff2:	69da      	ldr	r2, [r3, #28]
 8000ff4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000ff8:	9201      	str	r2, [sp, #4]
 8000ffa:	9a01      	ldr	r2, [sp, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pin       = GPIO_PIN_11 | GPIO_PIN_12;
 800100e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001012:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	9306      	str	r3, [sp, #24]
        GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 800101c:	2309      	movs	r3, #9
 800101e:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	a903      	add	r1, sp, #12
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f7ff fa19 	bl	800045c <HAL_GPIO_Init>
}
 800102a:	e7d9      	b.n	8000fe0 <HAL_CAN_MspInit+0x18>
 800102c:	40006400 	.word	0x40006400

08001030 <NMI_Handler>:

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

    /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001030:	4770      	bx	lr

08001032 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler>

08001034 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler>

08001036 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler>

08001038 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler>

0800103a <SVC_Handler>:

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001040:	b508      	push	{r3, lr}
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8001042:	f7ff f8f7 	bl	8000234 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bd08      	pop	{r3, pc}

08001048 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4915      	ldr	r1, [pc, #84]	; (80010a0 <SystemInit+0x58>)
 800104a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800104e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <SystemInit+0x5c>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001060:	6858      	ldr	r0, [r3, #4]
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <SystemInit+0x60>)
 8001064:	4002      	ands	r2, r0
 8001066:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800106e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001072:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800107a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001082:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001086:	f022 020f 	bic.w	r2, r2, #15
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800108c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <SystemInit+0x64>)
 8001090:	4002      	ands	r2, r0
 8001092:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001098:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800109c:	608b      	str	r3, [r1, #8]
#endif
}
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	40021000 	.word	0x40021000
 80010a8:	f87fc00c 	.word	0xf87fc00c
 80010ac:	ff00fccc 	.word	0xff00fccc

080010b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010b6:	e003      	b.n	80010c0 <LoopCopyDataInit>

080010b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010be:	3104      	adds	r1, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010c8:	d3f6      	bcc.n	80010b8 <CopyDataInit>
	ldr	r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010cc:	e002      	b.n	80010d4 <LoopFillZerobss>

080010ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010d0:	f842 3b04 	str.w	r3, [r2], #4

080010d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <LoopForever+0x16>)
	cmp	r2, r3
 80010d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010d8:	d3f9      	bcc.n	80010ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010da:	f7ff ffb5 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f000 f811 	bl	8001104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e2:	f7ff ff45 	bl	8000f70 <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e8:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80010ec:	080011b4 	.word	0x080011b4
	ldr	r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010f4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010f8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010fc:	20000054 	.word	0x20000054

08001100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_IRQHandler>
	...

08001104 <__libc_init_array>:
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	4e0d      	ldr	r6, [pc, #52]	; (800113c <__libc_init_array+0x38>)
 8001108:	4c0d      	ldr	r4, [pc, #52]	; (8001140 <__libc_init_array+0x3c>)
 800110a:	1ba4      	subs	r4, r4, r6
 800110c:	10a4      	asrs	r4, r4, #2
 800110e:	2500      	movs	r5, #0
 8001110:	42a5      	cmp	r5, r4
 8001112:	d109      	bne.n	8001128 <__libc_init_array+0x24>
 8001114:	4e0b      	ldr	r6, [pc, #44]	; (8001144 <__libc_init_array+0x40>)
 8001116:	4c0c      	ldr	r4, [pc, #48]	; (8001148 <__libc_init_array+0x44>)
 8001118:	f000 f820 	bl	800115c <_init>
 800111c:	1ba4      	subs	r4, r4, r6
 800111e:	10a4      	asrs	r4, r4, #2
 8001120:	2500      	movs	r5, #0
 8001122:	42a5      	cmp	r5, r4
 8001124:	d105      	bne.n	8001132 <__libc_init_array+0x2e>
 8001126:	bd70      	pop	{r4, r5, r6, pc}
 8001128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800112c:	4798      	blx	r3
 800112e:	3501      	adds	r5, #1
 8001130:	e7ee      	b.n	8001110 <__libc_init_array+0xc>
 8001132:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001136:	4798      	blx	r3
 8001138:	3501      	adds	r5, #1
 800113a:	e7f2      	b.n	8001122 <__libc_init_array+0x1e>
 800113c:	080011ac 	.word	0x080011ac
 8001140:	080011ac 	.word	0x080011ac
 8001144:	080011ac 	.word	0x080011ac
 8001148:	080011b0 	.word	0x080011b0

0800114c <memset>:
 800114c:	4402      	add	r2, r0
 800114e:	4603      	mov	r3, r0
 8001150:	4293      	cmp	r3, r2
 8001152:	d100      	bne.n	8001156 <memset+0xa>
 8001154:	4770      	bx	lr
 8001156:	f803 1b01 	strb.w	r1, [r3], #1
 800115a:	e7f9      	b.n	8001150 <memset+0x4>

0800115c <_init>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	bf00      	nop
 8001160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001162:	bc08      	pop	{r3}
 8001164:	469e      	mov	lr, r3
 8001166:	4770      	bx	lr

08001168 <_fini>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	bf00      	nop
 800116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116e:	bc08      	pop	{r3}
 8001170:	469e      	mov	lr, r3
 8001172:	4770      	bx	lr
