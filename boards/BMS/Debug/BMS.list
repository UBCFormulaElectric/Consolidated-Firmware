
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000483c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa8  08004aa8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004aa8  08004aa8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aa8  08004aa8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aac  08004aac  00014aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df8  20000010  08004ac0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e08  08004ac0  00020e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000dce7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00012f69  00000000  00000000  0002dd27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002909  00000000  00000000  00040c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001108  00000000  00000000  000435a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000981dc  00000000  00000000  000446a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000fc0  00000000  00000000  000dc888  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001a3bd  00000000  00000000  000dd848  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004668  00000000  00000000  000f7c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049b4 	.word	0x080049b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080049b4 	.word	0x080049b4

080001d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000208 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001d6:	e003      	b.n	80001e0 <LoopCopyDataInit>

080001d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001de:	3104      	adds	r1, #4

080001e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001e0:	480b      	ldr	r0, [pc, #44]	; (8000210 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001e2:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <LoopForever+0xe>)
	adds	r2, r0, r1
 80001e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e8:	d3f6      	bcc.n	80001d8 <CopyDataInit>
	ldr	r2, =_sbss
 80001ea:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001ec:	e002      	b.n	80001f4 <LoopFillZerobss>

080001ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001f0:	f842 3b04 	str.w	r3, [r2], #4

080001f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <LoopForever+0x16>)
	cmp	r2, r3
 80001f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f8:	d3f9      	bcc.n	80001ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001fa:	f004 fb99 	bl	8004930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001fe:	f004 fbad 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000202:	f003 ffe5 	bl	80041d0 <main>

08000206 <LoopForever>:

LoopForever:
    b LoopForever
 8000206:	e7fe      	b.n	8000206 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000208:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 800020c:	08004ab0 	.word	0x08004ab0
	ldr	r0, =_sdata
 8000210:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000214:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000218:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800021c:	20000e08 	.word	0x20000e08

08000220 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000220:	e7fe      	b.n	8000220 <ADC1_IRQHandler>
	...

08000224 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f001 f8a2 	bl	800137e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f004 fade 	bl	80047fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f004 fa1c 	bl	800467c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <HAL_IncTick+0x20>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	461a      	mov	r2, r3
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x24>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4413      	add	r3, r2
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <HAL_IncTick+0x24>)
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	20000004 	.word	0x20000004
 8000274:	200003bc 	.word	0x200003bc

08000278 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  return uwTick;  
 800027c:	4b03      	ldr	r3, [pc, #12]	; (800028c <HAL_GetTick+0x14>)
 800027e:	681b      	ldr	r3, [r3, #0]
}
 8000280:	4618      	mov	r0, r3
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	200003bc 	.word	0x200003bc

08000290 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b09a      	sub	sp, #104	; 0x68
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000298:	2300      	movs	r3, #0
 800029a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800029e:	2300      	movs	r3, #0
 80002a0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d101      	bne.n	80002b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80002ac:	2301      	movs	r3, #1
 80002ae:	e169      	b.n	8000584 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	691b      	ldr	r3, [r3, #16]
 80002b4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ba:	f003 0310 	and.w	r3, r3, #16
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d176      	bne.n	80003b0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d152      	bne.n	8000370 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2200      	movs	r2, #0
 80002da:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2200      	movs	r2, #0
 80002e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f004 f9f1 	bl	80046cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d13b      	bne.n	8000370 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 fc05 	bl	8000b08 <ADC_Disable>
 80002fe:	4603      	mov	r3, r0
 8000300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	2b00      	cmp	r3, #0
 800030e:	d12f      	bne.n	8000370 <HAL_ADC_Init+0xe0>
 8000310:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000314:	2b00      	cmp	r3, #0
 8000316:	d12b      	bne.n	8000370 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800031c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000320:	f023 0302 	bic.w	r3, r3, #2
 8000324:	f043 0202 	orr.w	r2, r3, #2
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	689a      	ldr	r2, [r3, #8]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800033a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	689a      	ldr	r2, [r3, #8]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800034a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800034c:	4b8f      	ldr	r3, [pc, #572]	; (800058c <HAL_ADC_Init+0x2fc>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a8f      	ldr	r2, [pc, #572]	; (8000590 <HAL_ADC_Init+0x300>)
 8000352:	fba2 2303 	umull	r2, r3, r2, r3
 8000356:	0c9a      	lsrs	r2, r3, #18
 8000358:	4613      	mov	r3, r2
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4413      	add	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000362:	e002      	b.n	800036a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	3b01      	subs	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d1f9      	bne.n	8000364 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037a:	2b00      	cmp	r3, #0
 800037c:	d007      	beq.n	800038e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800038c:	d110      	bne.n	80003b0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000392:	f023 0312 	bic.w	r3, r3, #18
 8000396:	f043 0210 	orr.w	r2, r3, #16
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003a2:	f043 0201 	orr.w	r2, r3, #1
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b4:	f003 0310 	and.w	r3, r3, #16
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 80d6 	bne.w	800056a <HAL_ADC_Init+0x2da>
 80003be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f040 80d1 	bne.w	800056a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f040 80c9 	bne.w	800056a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80003e0:	f043 0202 	orr.w	r2, r3, #2
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80003e8:	4b6a      	ldr	r3, [pc, #424]	; (8000594 <HAL_ADC_Init+0x304>)
 80003ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	f003 0303 	and.w	r3, r3, #3
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d108      	bne.n	8000410 <HAL_ADC_Init+0x180>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	2b01      	cmp	r3, #1
 800040a:	d101      	bne.n	8000410 <HAL_ADC_Init+0x180>
 800040c:	2301      	movs	r3, #1
 800040e:	e000      	b.n	8000412 <HAL_ADC_Init+0x182>
 8000410:	2300      	movs	r3, #0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d11c      	bne.n	8000450 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000416:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000418:	2b00      	cmp	r3, #0
 800041a:	d010      	beq.n	800043e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	f003 0303 	and.w	r3, r3, #3
 8000424:	2b01      	cmp	r3, #1
 8000426:	d107      	bne.n	8000438 <HAL_ADC_Init+0x1a8>
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	2b01      	cmp	r3, #1
 8000432:	d101      	bne.n	8000438 <HAL_ADC_Init+0x1a8>
 8000434:	2301      	movs	r3, #1
 8000436:	e000      	b.n	800043a <HAL_ADC_Init+0x1aa>
 8000438:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800043a:	2b00      	cmp	r3, #0
 800043c:	d108      	bne.n	8000450 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800043e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	431a      	orrs	r2, r3
 800044c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800044e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7e5b      	ldrb	r3, [r3, #25]
 8000454:	035b      	lsls	r3, r3, #13
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800045a:	2a01      	cmp	r2, #1
 800045c:	d002      	beq.n	8000464 <HAL_ADC_Init+0x1d4>
 800045e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000462:	e000      	b.n	8000466 <HAL_ADC_Init+0x1d6>
 8000464:	2200      	movs	r2, #0
 8000466:	431a      	orrs	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	431a      	orrs	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	4313      	orrs	r3, r2
 8000474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000476:	4313      	orrs	r3, r2
 8000478:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d11b      	bne.n	80004bc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	7e5b      	ldrb	r3, [r3, #25]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d109      	bne.n	80004a0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	3b01      	subs	r3, #1
 8000492:	045a      	lsls	r2, r3, #17
 8000494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000496:	4313      	orrs	r3, r2
 8000498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800049c:	663b      	str	r3, [r7, #96]	; 0x60
 800049e:	e00d      	b.n	80004bc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80004a8:	f043 0220 	orr.w	r2, r3, #32
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004b4:	f043 0201 	orr.w	r2, r3, #1
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d007      	beq.n	80004d4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004cc:	4313      	orrs	r3, r2
 80004ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80004d0:	4313      	orrs	r3, r2
 80004d2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	f003 030c 	and.w	r3, r3, #12
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d114      	bne.n	800050c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	6812      	ldr	r2, [r2, #0]
 80004ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004f0:	f023 0302 	bic.w	r3, r3, #2
 80004f4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	7e1b      	ldrb	r3, [r3, #24]
 80004fa:	039a      	lsls	r2, r3, #14
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4313      	orrs	r3, r2
 8000506:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000508:	4313      	orrs	r3, r2
 800050a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68da      	ldr	r2, [r3, #12]
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <HAL_ADC_Init+0x308>)
 8000514:	4013      	ands	r3, r2
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	6812      	ldr	r2, [r2, #0]
 800051a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800051c:	430b      	orrs	r3, r1
 800051e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	691b      	ldr	r3, [r3, #16]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d10c      	bne.n	8000542 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f023 010f 	bic.w	r1, r3, #15
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	1e5a      	subs	r2, r3, #1
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	430a      	orrs	r2, r1
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
 8000540:	e007      	b.n	8000552 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f022 020f 	bic.w	r2, r2, #15
 8000550:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f023 0303 	bic.w	r3, r3, #3
 8000560:	f043 0201 	orr.w	r2, r3, #1
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	641a      	str	r2, [r3, #64]	; 0x40
 8000568:	e00a      	b.n	8000580 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f023 0312 	bic.w	r3, r3, #18
 8000572:	f043 0210 	orr.w	r2, r3, #16
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800057a:	2301      	movs	r3, #1
 800057c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000580:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000584:	4618      	mov	r0, r3
 8000586:	3768      	adds	r7, #104	; 0x68
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000000c 	.word	0x2000000c
 8000590:	431bde83 	.word	0x431bde83
 8000594:	50000300 	.word	0x50000300
 8000598:	fff0c007 	.word	0xfff0c007

0800059c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800059c:	b480      	push	{r7}
 800059e:	b09b      	sub	sp, #108	; 0x6c
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d101      	bne.n	80005be <HAL_ADC_ConfigChannel+0x22>
 80005ba:	2302      	movs	r3, #2
 80005bc:	e299      	b.n	8000af2 <HAL_ADC_ConfigChannel+0x556>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2201      	movs	r2, #1
 80005c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	f040 827d 	bne.w	8000ad0 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d81c      	bhi.n	8000618 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	461a      	mov	r2, r3
 80005f2:	231f      	movs	r3, #31
 80005f4:	4093      	lsls	r3, r2
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4019      	ands	r1, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	fa00 f203 	lsl.w	r2, r0, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	430a      	orrs	r2, r1
 8000614:	631a      	str	r2, [r3, #48]	; 0x30
 8000616:	e063      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b09      	cmp	r3, #9
 800061e:	d81e      	bhi.n	800065e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	3b1e      	subs	r3, #30
 8000634:	221f      	movs	r2, #31
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	4019      	ands	r1, r3
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	4613      	mov	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	3b1e      	subs	r3, #30
 8000650:	fa00 f203 	lsl.w	r2, r0, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	430a      	orrs	r2, r1
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
 800065c:	e040      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	2b0e      	cmp	r3, #14
 8000664:	d81e      	bhi.n	80006a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	3b3c      	subs	r3, #60	; 0x3c
 800067a:	221f      	movs	r2, #31
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	4019      	ands	r1, r3
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	3b3c      	subs	r3, #60	; 0x3c
 8000696:	fa00 f203 	lsl.w	r2, r0, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	430a      	orrs	r2, r1
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38
 80006a2:	e01d      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	3b5a      	subs	r3, #90	; 0x5a
 80006b8:	221f      	movs	r2, #31
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43db      	mvns	r3, r3
 80006c0:	4019      	ands	r1, r3
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	4613      	mov	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4413      	add	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	3b5a      	subs	r3, #90	; 0x5a
 80006d4:	fa00 f203 	lsl.w	r2, r0, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	430a      	orrs	r2, r1
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f003 030c 	and.w	r3, r3, #12
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f040 80e5 	bne.w	80008ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b09      	cmp	r3, #9
 80006f6:	d91c      	bls.n	8000732 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6999      	ldr	r1, [r3, #24]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	3b1e      	subs	r3, #30
 800070a:	2207      	movs	r2, #7
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	43db      	mvns	r3, r3
 8000712:	4019      	ands	r1, r3
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	6898      	ldr	r0, [r3, #8]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	3b1e      	subs	r3, #30
 8000724:	fa00 f203 	lsl.w	r2, r0, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	430a      	orrs	r2, r1
 800072e:	619a      	str	r2, [r3, #24]
 8000730:	e019      	b.n	8000766 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6959      	ldr	r1, [r3, #20]
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	2207      	movs	r2, #7
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	4019      	ands	r1, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	6898      	ldr	r0, [r3, #8]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	fa00 f203 	lsl.w	r2, r0, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	430a      	orrs	r2, r1
 8000764:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	695a      	ldr	r2, [r3, #20]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	08db      	lsrs	r3, r3, #3
 8000772:	f003 0303 	and.w	r3, r3, #3
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	3b01      	subs	r3, #1
 8000784:	2b03      	cmp	r3, #3
 8000786:	d84f      	bhi.n	8000828 <HAL_ADC_ConfigChannel+0x28c>
 8000788:	a201      	add	r2, pc, #4	; (adr r2, 8000790 <HAL_ADC_ConfigChannel+0x1f4>)
 800078a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078e:	bf00      	nop
 8000790:	080007a1 	.word	0x080007a1
 8000794:	080007c3 	.word	0x080007c3
 8000798:	080007e5 	.word	0x080007e5
 800079c:	08000807 	.word	0x08000807
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007a6:	4b99      	ldr	r3, [pc, #612]	; (8000a0c <HAL_ADC_ConfigChannel+0x470>)
 80007a8:	4013      	ands	r3, r2
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	0691      	lsls	r1, r2, #26
 80007b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80007b2:	430a      	orrs	r2, r1
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80007c0:	e07e      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80007c8:	4b90      	ldr	r3, [pc, #576]	; (8000a0c <HAL_ADC_ConfigChannel+0x470>)
 80007ca:	4013      	ands	r3, r2
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	0691      	lsls	r1, r2, #26
 80007d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80007d4:	430a      	orrs	r2, r1
 80007d6:	431a      	orrs	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80007e2:	e06d      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80007ea:	4b88      	ldr	r3, [pc, #544]	; (8000a0c <HAL_ADC_ConfigChannel+0x470>)
 80007ec:	4013      	ands	r3, r2
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	0691      	lsls	r1, r2, #26
 80007f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80007f6:	430a      	orrs	r2, r1
 80007f8:	431a      	orrs	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000802:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000804:	e05c      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800080c:	4b7f      	ldr	r3, [pc, #508]	; (8000a0c <HAL_ADC_ConfigChannel+0x470>)
 800080e:	4013      	ands	r3, r2
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	0691      	lsls	r1, r2, #26
 8000816:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000818:	430a      	orrs	r2, r1
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000824:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000826:	e04b      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	069b      	lsls	r3, r3, #26
 8000838:	429a      	cmp	r2, r3
 800083a:	d107      	bne.n	800084c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800084a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	069b      	lsls	r3, r3, #26
 800085c:	429a      	cmp	r2, r3
 800085e:	d107      	bne.n	8000870 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800086e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	069b      	lsls	r3, r3, #26
 8000880:	429a      	cmp	r2, r3
 8000882:	d107      	bne.n	8000894 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000892:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800089a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	069b      	lsls	r3, r3, #26
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d10a      	bne.n	80008be <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80008b8:	e001      	b.n	80008be <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80008ba:	bf00      	nop
 80008bc:	e000      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80008be:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <HAL_ADC_ConfigChannel+0x344>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d101      	bne.n	80008e0 <HAL_ADC_ConfigChannel+0x344>
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <HAL_ADC_ConfigChannel+0x346>
 80008e0:	2300      	movs	r3, #0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 80ff 	bne.w	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d00f      	beq.n	8000910 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2201      	movs	r2, #1
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800090e:	e049      	b.n	80009a4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2201      	movs	r2, #1
 800091e:	409a      	lsls	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	430a      	orrs	r2, r1
 8000926:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b09      	cmp	r3, #9
 8000930:	d91c      	bls.n	800096c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6999      	ldr	r1, [r3, #24]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	3b1b      	subs	r3, #27
 8000944:	2207      	movs	r2, #7
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	4019      	ands	r1, r3
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	6898      	ldr	r0, [r3, #8]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	3b1b      	subs	r3, #27
 800095e:	fa00 f203 	lsl.w	r2, r0, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	430a      	orrs	r2, r1
 8000968:	619a      	str	r2, [r3, #24]
 800096a:	e01b      	b.n	80009a4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6959      	ldr	r1, [r3, #20]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	2207      	movs	r2, #7
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	4019      	ands	r1, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	6898      	ldr	r0, [r3, #8]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	fa00 f203 	lsl.w	r2, r0, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	430a      	orrs	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_ADC_ConfigChannel+0x474>)
 80009a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b10      	cmp	r3, #16
 80009ae:	d105      	bne.n	80009bc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80009b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d014      	beq.n	80009e6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80009c0:	2b11      	cmp	r3, #17
 80009c2:	d105      	bne.n	80009d0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80009c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00a      	beq.n	80009e6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80009d4:	2b12      	cmp	r3, #18
 80009d6:	f040 8086 	bne.w	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80009da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d17f      	bne.n	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d10d      	bne.n	8000a14 <HAL_ADC_ConfigChannel+0x478>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d106      	bne.n	8000a14 <HAL_ADC_ConfigChannel+0x478>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e005      	b.n	8000a16 <HAL_ADC_ConfigChannel+0x47a>
 8000a0a:	bf00      	nop
 8000a0c:	83fff000 	.word	0x83fff000
 8000a10:	50000300 	.word	0x50000300
 8000a14:	2300      	movs	r3, #0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d150      	bne.n	8000abc <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a1a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d010      	beq.n	8000a42 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d107      	bne.n	8000a3c <HAL_ADC_ConfigChannel+0x4a0>
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d101      	bne.n	8000a3c <HAL_ADC_ConfigChannel+0x4a0>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <HAL_ADC_ConfigChannel+0x4a2>
 8000a3c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d13c      	bne.n	8000abc <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b10      	cmp	r3, #16
 8000a48:	d11d      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x4ea>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a52:	d118      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <HAL_ADC_ConfigChannel+0x564>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <HAL_ADC_ConfigChannel+0x568>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	0c9a      	lsrs	r2, r3, #18
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a76:	e002      	b.n	8000a7e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f9      	bne.n	8000a78 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000a84:	e02e      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b11      	cmp	r3, #17
 8000a8c:	d10b      	bne.n	8000aa6 <HAL_ADC_ConfigChannel+0x50a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a96:	d106      	bne.n	8000aa6 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aa2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000aa4:	e01e      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b12      	cmp	r3, #18
 8000aac:	d11a      	bne.n	8000ae4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ab8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000aba:	e013      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f043 0220 	orr.w	r2, r3, #32
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ace:	e00a      	b.n	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f043 0220 	orr.w	r2, r3, #32
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ae2:	e000      	b.n	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ae4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000aee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	376c      	adds	r7, #108	; 0x6c
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	2000000c 	.word	0x2000000c
 8000b04:	431bde83 	.word	0x431bde83

08000b08 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d108      	bne.n	8000b34 <ADC_Disable+0x2c>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d101      	bne.n	8000b34 <ADC_Disable+0x2c>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <ADC_Disable+0x2e>
 8000b34:	2300      	movs	r3, #0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d040      	beq.n	8000bbc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f003 030d 	and.w	r3, r3, #13
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d10f      	bne.n	8000b68 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f042 0202 	orr.w	r2, r2, #2
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000b60:	f7ff fb8a 	bl	8000278 <HAL_GetTick>
 8000b64:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000b66:	e022      	b.n	8000bae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f043 0210 	orr.w	r2, r3, #16
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	f043 0201 	orr.w	r2, r3, #1
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e01c      	b.n	8000bbe <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b84:	f7ff fb78 	bl	8000278 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d90d      	bls.n	8000bae <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f043 0210 	orr.w	r2, r3, #16
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f043 0201 	orr.w	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e007      	b.n	8000bbe <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d0e3      	beq.n	8000b84 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e0ed      	b.n	8000db4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f003 fdad 	bl	8004744 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0202 	bic.w	r2, r2, #2
 8000bf8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bfa:	f7ff fb3d 	bl	8000278 <HAL_GetTick>
 8000bfe:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c00:	e012      	b.n	8000c28 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c02:	f7ff fb39 	bl	8000278 <HAL_GetTick>
 8000c06:	4602      	mov	r2, r0
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	2b0a      	cmp	r3, #10
 8000c0e:	d90b      	bls.n	8000c28 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2205      	movs	r2, #5
 8000c20:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e0c5      	b.n	8000db4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1e5      	bne.n	8000c02 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f042 0201 	orr.w	r2, r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c46:	f7ff fb17 	bl	8000278 <HAL_GetTick>
 8000c4a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c4c:	e012      	b.n	8000c74 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c4e:	f7ff fb13 	bl	8000278 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b0a      	cmp	r3, #10
 8000c5a:	d90b      	bls.n	8000c74 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2205      	movs	r2, #5
 8000c6c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e09f      	b.n	8000db4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0e5      	beq.n	8000c4e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7e1b      	ldrb	r3, [r3, #24]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d108      	bne.n	8000c9c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e007      	b.n	8000cac <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000caa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7e5b      	ldrb	r3, [r3, #25]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d108      	bne.n	8000cc6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e007      	b.n	8000cd6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7e9b      	ldrb	r3, [r3, #26]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d108      	bne.n	8000cf0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f042 0220 	orr.w	r2, r2, #32
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	e007      	b.n	8000d00 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0220 	bic.w	r2, r2, #32
 8000cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7edb      	ldrb	r3, [r3, #27]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d108      	bne.n	8000d1a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0210 	bic.w	r2, r2, #16
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e007      	b.n	8000d2a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 0210 	orr.w	r2, r2, #16
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7f1b      	ldrb	r3, [r3, #28]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d108      	bne.n	8000d44 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f042 0208 	orr.w	r2, r2, #8
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	e007      	b.n	8000d54 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0208 	bic.w	r2, r2, #8
 8000d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7f5b      	ldrb	r3, [r3, #29]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d108      	bne.n	8000d6e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0204 	orr.w	r2, r2, #4
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e007      	b.n	8000d7e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0204 	bic.w	r2, r2, #4
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	431a      	orrs	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	ea42 0103 	orr.w	r1, r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d07c      	beq.n	8000efc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d023      	beq.n	8000e54 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2201      	movs	r2, #1
 8000e12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 f97d 	bl	800111e <HAL_CAN_TxMailbox0CompleteCallback>
 8000e24:	e016      	b.n	8000e54 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
 8000e38:	e00c      	b.n	8000e54 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4c:	e002      	b.n	8000e54 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f983 	bl	800115a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d024      	beq.n	8000ea8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f95d 	bl	8001132 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e78:	e016      	b.n	8000ea8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8c:	e00c      	b.n	8000ea8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea0:	e002      	b.n	8000ea8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f963 	bl	800116e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d024      	beq.n	8000efc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f93d 	bl	8001146 <HAL_CAN_TxMailbox2CompleteCallback>
 8000ecc:	e016      	b.n	8000efc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee0:	e00c      	b.n	8000efc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d004      	beq.n	8000ef6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef4:	e002      	b.n	8000efc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f943 	bl	8001182 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00c      	beq.n	8000f20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2208      	movs	r2, #8
 8000f3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f934 	bl	80011aa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f91b 	bl	8001196 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00c      	beq.n	8000f84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d007      	beq.n	8000f84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2210      	movs	r2, #16
 8000f82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f916 	bl	80011d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d009      	beq.n	8000fc4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f8fd 	bl	80011be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2210      	movs	r2, #16
 8000fde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f900 	bl	80011e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00b      	beq.n	8001008 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d006      	beq.n	8001008 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2208      	movs	r2, #8
 8001000:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f8f9 	bl	80011fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d075      	beq.n	80010fe <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	d06c      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800103e:	2b00      	cmp	r3, #0
 8001040:	d008      	beq.n	8001054 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001076:	2b00      	cmp	r3, #0
 8001078:	d03d      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001080:	2b00      	cmp	r3, #0
 8001082:	d038      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800108a:	2b30      	cmp	r3, #48	; 0x30
 800108c:	d017      	beq.n	80010be <HAL_CAN_IRQHandler+0x302>
 800108e:	2b30      	cmp	r3, #48	; 0x30
 8001090:	d804      	bhi.n	800109c <HAL_CAN_IRQHandler+0x2e0>
 8001092:	2b10      	cmp	r3, #16
 8001094:	d009      	beq.n	80010aa <HAL_CAN_IRQHandler+0x2ee>
 8001096:	2b20      	cmp	r3, #32
 8001098:	d00c      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800109a:	e024      	b.n	80010e6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800109c:	2b50      	cmp	r3, #80	; 0x50
 800109e:	d018      	beq.n	80010d2 <HAL_CAN_IRQHandler+0x316>
 80010a0:	2b60      	cmp	r3, #96	; 0x60
 80010a2:	d01b      	beq.n	80010dc <HAL_CAN_IRQHandler+0x320>
 80010a4:	2b40      	cmp	r3, #64	; 0x40
 80010a6:	d00f      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x30c>
            break;
 80010a8:	e01d      	b.n	80010e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010b2:	e018      	b.n	80010e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010bc:	e013      	b.n	80010e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	f043 0320 	orr.w	r3, r3, #32
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010c6:	e00e      	b.n	80010e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010d0:	e009      	b.n	80010e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010da:	e004      	b.n	80010e6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	699a      	ldr	r2, [r3, #24]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2204      	movs	r2, #4
 80010fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f87c 	bl	800120e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff4c 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a6:	f7ff ff61 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff ffb1 	bl	8001318 <NVIC_EncodePriority>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff80 	bl	80012c4 <__NVIC_SetPriority>
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff54 	bl	8001288 <__NVIC_EnableIRQ>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e14e      	b.n	8001696 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8140 	beq.w	8001690 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x38>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b12      	cmp	r3, #18
 800141e:	d123      	bne.n	8001468 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	6939      	ldr	r1, [r7, #16]
 8001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d00b      	beq.n	80014bc <HAL_GPIO_Init+0xd4>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b0:	2b11      	cmp	r3, #17
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b12      	cmp	r3, #18
 80014ba:	d130      	bne.n	800151e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f2:	2201      	movs	r2, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	f003 0201 	and.w	r2, r3, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 809a 	beq.w	8001690 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155c:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <HAL_GPIO_Init+0x2cc>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_GPIO_Init+0x2cc>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <HAL_GPIO_Init+0x2cc>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001574:	4a50      	ldr	r2, [pc, #320]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800159e:	d013      	beq.n	80015c8 <HAL_GPIO_Init+0x1e0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a46      	ldr	r2, [pc, #280]	; (80016bc <HAL_GPIO_Init+0x2d4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d00d      	beq.n	80015c4 <HAL_GPIO_Init+0x1dc>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a45      	ldr	r2, [pc, #276]	; (80016c0 <HAL_GPIO_Init+0x2d8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0x1d8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <HAL_GPIO_Init+0x2dc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d101      	bne.n	80015bc <HAL_GPIO_Init+0x1d4>
 80015b8:	2303      	movs	r3, #3
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x1e2>
 80015bc:	2305      	movs	r3, #5
 80015be:	e004      	b.n	80015ca <HAL_GPIO_Init+0x1e2>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_Init+0x1e2>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_GPIO_Init+0x1e2>
 80015c8:	2300      	movs	r3, #0
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	f002 0203 	and.w	r2, r2, #3
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	4093      	lsls	r3, r2
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015da:	4937      	ldr	r1, [pc, #220]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800160c:	4a2e      	ldr	r2, [pc, #184]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001636:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_GPIO_Init+0x2e0>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f47f aea9 	bne.w	80013f8 <HAL_GPIO_Init+0x10>
  }
}
 80016a6:	bf00      	nop
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000
 80016bc:	48000400 	.word	0x48000400
 80016c0:	48000800 	.word	0x48000800
 80016c4:	48000c00 	.word	0x48000c00
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e038      	b.n	8001780 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001716:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f245 5255 	movw	r2, #21845	; 0x5555
 8001720:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6852      	ldr	r2, [r2, #4]
 800172a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6892      	ldr	r2, [r2, #8]
 8001734:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001736:	f7fe fd9f 	bl	8000278 <HAL_GetTick>
 800173a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800173c:	e008      	b.n	8001750 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800173e:	f7fe fd9b 	bl	8000278 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b30      	cmp	r3, #48	; 0x30
 800174a:	d901      	bls.n	8001750 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e017      	b.n	8001780 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f1      	bne.n	800173e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	429a      	cmp	r2, r3
 8001766:	d005      	beq.n	8001774 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68d2      	ldr	r2, [r2, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	e004      	b.n	800177e <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800178e:	af00      	add	r7, sp, #0
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	f000 bef4 	b.w	800258a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 816a 	beq.w	8001a86 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017b2:	4bb3      	ldr	r3, [pc, #716]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d00c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017be:	4bb0      	ldr	r3, [pc, #704]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d159      	bne.n	800187e <HAL_RCC_OscConfig+0xf6>
 80017ca:	4bad      	ldr	r3, [pc, #692]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d6:	d152      	bne.n	800187e <HAL_RCC_OscConfig+0xf6>
 80017d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d102      	bne.n	800180a <HAL_RCC_OscConfig+0x82>
 8001804:	4b9e      	ldr	r3, [pc, #632]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0xae>
 800180a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800181e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001822:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001826:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001832:	4b93      	ldr	r3, [pc, #588]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800183a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800183e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001842:	fa92 f2a2 	rbit	r2, r2
 8001846:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800184a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800184e:	fab2 f282 	clz	r2, r2
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	f042 0220 	orr.w	r2, r2, #32
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f002 021f 	and.w	r2, r2, #31
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 810c 	beq.w	8001a84 <HAL_RCC_OscConfig+0x2fc>
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 8106 	bne.w	8001a84 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	f000 be86 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x110>
 800188a:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7c      	ldr	r2, [pc, #496]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e030      	b.n	80018fa <HAL_RCC_OscConfig+0x172>
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x134>
 80018a2:	4b77      	ldr	r3, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a76      	ldr	r2, [pc, #472]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a73      	ldr	r2, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01e      	b.n	80018fa <HAL_RCC_OscConfig+0x172>
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x15a>
 80018c8:	4b6d      	ldr	r3, [pc, #436]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a6c      	ldr	r2, [pc, #432]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a69      	ldr	r2, [pc, #420]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e00b      	b.n	80018fa <HAL_RCC_OscConfig+0x172>
 80018e2:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a66      	ldr	r2, [pc, #408]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a63      	ldr	r2, [pc, #396]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018fa:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f023 020f 	bic.w	r2, r3, #15
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	495d      	ldr	r1, [pc, #372]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 800190a:	4313      	orrs	r3, r2
 800190c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d059      	beq.n	80019cc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7fe fcae 	bl	8000278 <HAL_GetTick>
 800191c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001922:	f7fe fca9 	bl	8000278 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d902      	bls.n	8001938 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	f000 be29 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
 8001938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800194c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <HAL_RCC_OscConfig+0x1e2>
 8001964:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	e015      	b.n	8001996 <HAL_RCC_OscConfig+0x20e>
 800196a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800197e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001982:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001986:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800199a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800199e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019a2:	fa92 f2a2 	rbit	r2, r2
 80019a6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019aa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019ae:	fab2 f282 	clz	r2, r2
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f042 0220 	orr.w	r2, r2, #32
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f002 021f 	and.w	r2, r2, #31
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0ab      	beq.n	8001922 <HAL_RCC_OscConfig+0x19a>
 80019ca:	e05c      	b.n	8001a86 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7fe fc54 	bl	8000278 <HAL_GetTick>
 80019d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d6:	f7fe fc4f 	bl	8000278 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d902      	bls.n	80019ec <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	f000 bdcf 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
 80019ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_OscConfig+0x296>
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x2c2>
 8001a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a3a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_RCC_OscConfig+0x2f8>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a4e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a52:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a5e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f002 021f 	and.w	r2, r2, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ab      	bne.n	80019d6 <HAL_RCC_OscConfig+0x24e>
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_OscConfig+0x2fe>
 8001a80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 816f 	beq.w	8001d74 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a96:	4bd0      	ldr	r3, [pc, #832]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aa2:	4bcd      	ldr	r3, [pc, #820]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d16c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x400>
 8001aae:	4bca      	ldr	r3, [pc, #808]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d166      	bne.n	8001b88 <HAL_RCC_OscConfig+0x400>
 8001aba:	2302      	movs	r3, #2
 8001abc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001acc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d102      	bne.n	8001aea <HAL_RCC_OscConfig+0x362>
 8001ae4:	4bbc      	ldr	r3, [pc, #752]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	e013      	b.n	8001b12 <HAL_RCC_OscConfig+0x38a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b0e:	4bb2      	ldr	r3, [pc, #712]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	2202      	movs	r2, #2
 8001b14:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b18:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b1c:	fa92 f2a2 	rbit	r2, r2
 8001b20:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b24:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f042 0220 	orr.w	r2, r2, #32
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f002 021f 	and.w	r2, r2, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f000 bd1b 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4ba0      	ldr	r3, [pc, #640]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	21f8      	movs	r1, #248	; 0xf8
 8001b64:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b6c:	fa91 f1a1 	rbit	r1, r1
 8001b70:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b74:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b78:	fab1 f181 	clz	r1, r1
 8001b7c:	b2c9      	uxtb	r1, r1
 8001b7e:	408b      	lsls	r3, r1
 8001b80:	4995      	ldr	r1, [pc, #596]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e0f5      	b.n	8001d74 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8085 	beq.w	8001c9e <HAL_RCC_OscConfig+0x516>
 8001b94:	2301      	movs	r3, #1
 8001b96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ba6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fb5a 	bl	8000278 <HAL_GetTick>
 8001bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bca:	f7fe fb55 	bl	8000278 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d902      	bls.n	8001be0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	f000 bcd5 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bf2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d102      	bne.n	8001c10 <HAL_RCC_OscConfig+0x488>
 8001c0a:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e013      	b.n	8001c38 <HAL_RCC_OscConfig+0x4b0>
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c22:	2302      	movs	r3, #2
 8001c24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c42:	fa92 f2a2 	rbit	r2, r2
 8001c46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f042 0220 	orr.w	r2, r2, #32
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f002 021f 	and.w	r2, r2, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0af      	beq.n	8001bca <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	21f8      	movs	r1, #248	; 0xf8
 8001c7a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c82:	fa91 f1a1 	rbit	r1, r1
 8001c86:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c8a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c8e:	fab1 f181 	clz	r1, r1
 8001c92:	b2c9      	uxtb	r1, r1
 8001c94:	408b      	lsls	r3, r1
 8001c96:	4950      	ldr	r1, [pc, #320]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e06a      	b.n	8001d74 <HAL_RCC_OscConfig+0x5ec>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001cb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7fe fad5 	bl	8000278 <HAL_GetTick>
 8001cce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7fe fad0 	bl	8000278 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d902      	bls.n	8001cea <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f000 bc50 	b.w	800258a <HAL_RCC_OscConfig+0xe02>
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d102      	bne.n	8001d1a <HAL_RCC_OscConfig+0x592>
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	e013      	b.n	8001d42 <HAL_RCC_OscConfig+0x5ba>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <HAL_RCC_OscConfig+0x650>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	2202      	movs	r2, #2
 8001d44:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d48:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d4c:	fa92 f2a2 	rbit	r2, r2
 8001d50:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d54:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d58:	fab2 f282 	clz	r2, r2
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f042 0220 	orr.w	r2, r2, #32
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	f002 021f 	and.w	r2, r2, #31
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1af      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80da 	beq.w	8001f38 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d069      	beq.n	8001e62 <HAL_RCC_OscConfig+0x6da>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x654>)
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	461a      	mov	r2, r3
 8001db4:	2301      	movs	r3, #1
 8001db6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7fe fa5e 	bl	8000278 <HAL_GetTick>
 8001dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc0:	e00e      	b.n	8001de0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7fe fa59 	bl	8000278 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d906      	bls.n	8001de0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e3d9      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	10908120 	.word	0x10908120
 8001de0:	2302      	movs	r3, #2
 8001de2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001df2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e0e:	2202      	movs	r2, #2
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4ba5      	ldr	r3, [pc, #660]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e26:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	6019      	str	r1, [r3, #0]
 8001e2e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f1a3 	rbit	r1, r3
 8001e38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e3c:	6019      	str	r1, [r3, #0]
  return result;
 8001e3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0b0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x63a>
 8001e60:	e06a      	b.n	8001f38 <HAL_RCC_OscConfig+0x7b0>
 8001e62:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e78:	601a      	str	r2, [r3, #0]
  return result;
 8001e7a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e7e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x934>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7fe f9f0 	bl	8000278 <HAL_GetTick>
 8001e98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	e009      	b.n	8001eb2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7fe f9eb 	bl	8000278 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e36b      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8001eb2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ece:	2202      	movs	r2, #2
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fa93 f2a3 	rbit	r2, r3
 8001edc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ef8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efa:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f02:	2102      	movs	r1, #2
 8001f04:	6019      	str	r1, [r3, #0]
 8001f06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f1a3 	rbit	r1, r3
 8001f10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f14:	6019      	str	r1, [r3, #0]
  return result;
 8001f16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1b2      	bne.n	8001e9e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8158 	beq.w	80021f8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d112      	bne.n	8001f80 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_OscConfig+0x938>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d11a      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8c:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_OscConfig+0x938>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a4b      	ldr	r2, [pc, #300]	; (80020c0 <HAL_RCC_OscConfig+0x938>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f98:	f7fe f96e 	bl	8000278 <HAL_GetTick>
 8001f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e009      	b.n	8001fb6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe f969 	bl	8000278 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e2e9      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <HAL_RCC_OscConfig+0x938>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ef      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x852>
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a39      	ldr	r2, [pc, #228]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e02f      	b.n	800203a <HAL_RCC_OscConfig+0x8b2>
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x876>
 8001fe4:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a33      	ldr	r2, [pc, #204]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e01d      	b.n	800203a <HAL_RCC_OscConfig+0x8b2>
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x89a>
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0x8b2>
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6213      	str	r3, [r2, #32]
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06b      	beq.n	800211c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7fe f918 	bl	8000278 <HAL_GetTick>
 8002048:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7fe f913 	bl	8000278 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e291      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8002066:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002082:	2202      	movs	r2, #2
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fa93 f2a3 	rbit	r2, r3
 8002090:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002094:	601a      	str	r2, [r3, #0]
  return result;
 8002096:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800209a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d109      	bne.n	80020c4 <HAL_RCC_OscConfig+0x93c>
 80020b0:	4b01      	ldr	r3, [pc, #4]	; (80020b8 <HAL_RCC_OscConfig+0x930>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	e014      	b.n	80020e0 <HAL_RCC_OscConfig+0x958>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	10908120 	.word	0x10908120
 80020c0:	40007000 	.word	0x40007000
 80020c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020c8:	2202      	movs	r2, #2
 80020ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4bbb      	ldr	r3, [pc, #748]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020e4:	2102      	movs	r1, #2
 80020e6:	6011      	str	r1, [r2, #0]
 80020e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	fa92 f1a2 	rbit	r1, r2
 80020f2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020f6:	6011      	str	r1, [r2, #0]
  return result;
 80020f8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d099      	beq.n	800204e <HAL_RCC_OscConfig+0x8c6>
 800211a:	e063      	b.n	80021e4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7fe f8ac 	bl	8000278 <HAL_GetTick>
 8002120:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe f8a7 	bl	8000278 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e225      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 800213e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002142:	2202      	movs	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800215a:	2202      	movs	r2, #2
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800216c:	601a      	str	r2, [r3, #0]
  return result;
 800216e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002172:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d102      	bne.n	800218e <HAL_RCC_OscConfig+0xa06>
 8002188:	4b90      	ldr	r3, [pc, #576]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	e00d      	b.n	80021aa <HAL_RCC_OscConfig+0xa22>
 800218e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	4b89      	ldr	r3, [pc, #548]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021ae:	2102      	movs	r1, #2
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	fa92 f1a2 	rbit	r1, r2
 80021bc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021c0:	6011      	str	r1, [r2, #0]
  return result;
 80021c2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f002 021f 	and.w	r2, r2, #31
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1a0      	bne.n	8002126 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b77      	ldr	r3, [pc, #476]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4a76      	ldr	r2, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 81c2 	beq.w	8002588 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	4b71      	ldr	r3, [pc, #452]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	f000 819c 	beq.w	800254a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b02      	cmp	r3, #2
 800221a:	f040 8114 	bne.w	8002446 <HAL_RCC_OscConfig+0xcbe>
 800221e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002222:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800223c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	461a      	mov	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe f810 	bl	8000278 <HAL_GetTick>
 8002258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	e009      	b.n	8002272 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe f80b 	bl	8000278 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e18b      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8002272:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800228a:	601a      	str	r2, [r3, #0]
  return result;
 800228c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002290:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <HAL_RCC_OscConfig+0xb24>
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	e01b      	b.n	80022e4 <HAL_RCC_OscConfig+0xb5c>
 80022ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ec:	6011      	str	r1, [r2, #0]
 80022ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	fa92 f1a2 	rbit	r1, r2
 80022f8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022fc:	6011      	str	r1, [r2, #0]
  return result;
 80022fe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	f042 0220 	orr.w	r2, r2, #32
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f002 021f 	and.w	r2, r2, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f202 	lsl.w	r2, r1, r2
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d19e      	bne.n	800225e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	430b      	orrs	r3, r1
 8002336:	4925      	ldr	r1, [pc, #148]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
 800233c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002354:	601a      	str	r2, [r3, #0]
  return result;
 8002356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800235a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002366:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	461a      	mov	r2, r3
 800236e:	2301      	movs	r3, #1
 8002370:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fd ff81 	bl	8000278 <HAL_GetTick>
 8002376:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237a:	e009      	b.n	8002390 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7fd ff7c 	bl	8000278 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0fc      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 8002390:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023a8:	601a      	str	r2, [r3, #0]
  return result;
 80023aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0xc48>
 80023c4:	4b01      	ldr	r3, [pc, #4]	; (80023cc <HAL_RCC_OscConfig+0xc44>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	e01e      	b.n	8002408 <HAL_RCC_OscConfig+0xc80>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_OscConfig+0xe0c>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800240c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002410:	6011      	str	r1, [r2, #0]
 8002412:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	fa92 f1a2 	rbit	r1, r2
 800241c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002420:	6011      	str	r1, [r2, #0]
  return result;
 8002422:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	fab2 f282 	clz	r2, r2
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f042 0220 	orr.w	r2, r2, #32
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f002 021f 	and.w	r2, r2, #31
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f202 	lsl.w	r2, r1, r2
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d09b      	beq.n	800237c <HAL_RCC_OscConfig+0xbf4>
 8002444:	e0a0      	b.n	8002588 <HAL_RCC_OscConfig+0xe00>
 8002446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800244a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800244e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245e:	601a      	str	r2, [r3, #0]
  return result;
 8002460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002464:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002470:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	461a      	mov	r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fd fefc 	bl	8000278 <HAL_GetTick>
 8002480:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e009      	b.n	800249a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002486:	f7fd fef7 	bl	8000278 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e077      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
 800249a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b2:	601a      	str	r2, [r3, #0]
  return result;
 80024b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <HAL_RCC_OscConfig+0xd4c>
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCC_OscConfig+0xe0c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	e01b      	b.n	800250c <HAL_RCC_OscConfig+0xd84>
 80024d4:	f107 0320 	add.w	r3, r7, #32
 80024d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f107 0320 	add.w	r3, r7, #32
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	f107 0318 	add.w	r3, r7, #24
 80024f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f107 0318 	add.w	r3, r7, #24
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_OscConfig+0xe0c>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f107 0210 	add.w	r2, r7, #16
 8002510:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002514:	6011      	str	r1, [r2, #0]
 8002516:	f107 0210 	add.w	r2, r7, #16
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	fa92 f1a2 	rbit	r1, r2
 8002520:	f107 020c 	add.w	r2, r7, #12
 8002524:	6011      	str	r1, [r2, #0]
  return result;
 8002526:	f107 020c 	add.w	r2, r7, #12
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f042 0220 	orr.w	r2, r2, #32
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f002 021f 	and.w	r2, r2, #31
 800253c:	2101      	movs	r1, #1
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d19e      	bne.n	8002486 <HAL_RCC_OscConfig+0xcfe>
 8002548:	e01e      	b.n	8002588 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e018      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0xe0c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002560:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	429a      	cmp	r2, r3
 8002570:	d108      	bne.n	8002584 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002572:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002576:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b09e      	sub	sp, #120	; 0x78
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e162      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b90      	ldr	r3, [pc, #576]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d910      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b8d      	ldr	r3, [pc, #564]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	498b      	ldr	r1, [pc, #556]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b89      	ldr	r3, [pc, #548]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e14a      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b82      	ldr	r3, [pc, #520]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	497f      	ldr	r1, [pc, #508]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80dc 	beq.w	80027c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d13c      	bne.n	800268e <HAL_RCC_ClockConfig+0xf6>
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d102      	bne.n	800263e <HAL_RCC_ClockConfig+0xa6>
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	e00f      	b.n	800265e <HAL_RCC_ClockConfig+0xc6>
 800263e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002642:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	667b      	str	r3, [r7, #100]	; 0x64
 800264c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002650:	663b      	str	r3, [r7, #96]	; 0x60
 8002652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002662:	65ba      	str	r2, [r7, #88]	; 0x58
 8002664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002666:	fa92 f2a2 	rbit	r2, r2
 800266a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800266c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f042 0220 	orr.w	r2, r2, #32
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f002 021f 	and.w	r2, r2, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d17b      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0f3      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d13c      	bne.n	8002710 <HAL_RCC_ClockConfig+0x178>
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x128>
 80026ba:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e00f      	b.n	80026e0 <HAL_RCC_ClockConfig+0x148>
 80026c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
 80026ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d2:	643b      	str	r3, [r7, #64]	; 0x40
 80026d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026dc:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80026e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e8:	fa92 f2a2 	rbit	r2, r2
 80026ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13a      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0b2      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
 8002710:	2302      	movs	r3, #2
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1a0>
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e00d      	b.n	8002754 <HAL_RCC_ClockConfig+0x1bc>
 8002738:	2302      	movs	r3, #2
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	2302      	movs	r3, #2
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2202      	movs	r2, #2
 8002756:	61ba      	str	r2, [r7, #24]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	617a      	str	r2, [r7, #20]
  return result;
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f042 0220 	orr.w	r2, r2, #32
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e079      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f023 0203 	bic.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	491a      	ldr	r1, [pc, #104]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002794:	f7fd fd70 	bl	8000278 <HAL_GetTick>
 8002798:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fd fd6c 	bl	8000278 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e061      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_RCC_ClockConfig+0x260>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 020c 	and.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1eb      	bne.n	800279c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d214      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4906      	ldr	r1, [pc, #24]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <HAL_RCC_ClockConfig+0x25c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e040      	b.n	8002876 <HAL_RCC_ClockConfig+0x2de>
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	491a      	ldr	r1, [pc, #104]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4912      	ldr	r1, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800283a:	f000 f829 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800283e:	4601      	mov	r1, r0
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_RCC_ClockConfig+0x2e8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002848:	22f0      	movs	r2, #240	; 0xf0
 800284a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	fa92 f2a2 	rbit	r2, r2
 8002852:	60fa      	str	r2, [r7, #12]
  return result;
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	fab2 f282 	clz	r2, r2
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	40d3      	lsrs	r3, r2
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x2ec>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	fa21 f303 	lsr.w	r3, r1, r3
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_RCC_ClockConfig+0x2f0>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_RCC_ClockConfig+0x2f4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f001 ffc4 	bl	80047fc <HAL_InitTick>
  
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3778      	adds	r7, #120	; 0x78
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	08004a90 	.word	0x08004a90
 8002888:	2000000c 	.word	0x2000000c
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b08b      	sub	sp, #44	; 0x2c
 8002894:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e03c      	b.n	800293a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028c2:	623b      	str	r3, [r7, #32]
      break;
 80028c4:	e03c      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	607a      	str	r2, [r7, #4]
  return result;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	40d3      	lsrs	r3, r2
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	220f      	movs	r2, #15
 80028f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	60fa      	str	r2, [r7, #12]
  return result;
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	40d3      	lsrs	r3, r2
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <HAL_RCC_GetSysClockFreq+0xcc>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
 8002928:	e004      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <HAL_RCC_GetSysClockFreq+0xd0>)
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	623b      	str	r3, [r7, #32]
      break;
 8002938:	e002      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc4>)
 800293c:	623b      	str	r3, [r7, #32]
      break;
 800293e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002940:	6a3b      	ldr	r3, [r7, #32]
}
 8002942:	4618      	mov	r0, r3
 8002944:	372c      	adds	r7, #44	; 0x2c
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	007a1200 	.word	0x007a1200
 8002958:	08004a70 	.word	0x08004a70
 800295c:	08004a80 	.word	0x08004a80
 8002960:	003d0900 	.word	0x003d0900

08002964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	2000000c 	.word	0x2000000c

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002982:	f7ff ffef 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002986:	4601      	mov	r1, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002990:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002994:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	fa92 f2a2 	rbit	r2, r2
 800299c:	603a      	str	r2, [r7, #0]
  return result;
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	40d3      	lsrs	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08004aa0 	.word	0x08004aa0

080029c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	220f      	movs	r2, #15
 80029ce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <HAL_RCC_GetClockConfig+0x60>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0207 	and.w	r2, r3, #7
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	601a      	str	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40022000 	.word	0x40022000

08002a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b092      	sub	sp, #72	; 0x48
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80d7 	beq.w	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a48:	4b4e      	ldr	r3, [pc, #312]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10e      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4a4a      	ldr	r2, [pc, #296]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	61d3      	str	r3, [r2, #28]
 8002a60:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a41      	ldr	r2, [pc, #260]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7fd fbf5 	bl	8000278 <HAL_GetTick>
 8002a8e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fd fbf1 	bl	8000278 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	; 0x64
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e14b      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8084 	beq.w	8002bca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d07c      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad0:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	461a      	mov	r2, r3
 8002afa:	2301      	movs	r3, #1
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b22:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b26:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d04b      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7fd fba1 	bl	8000278 <HAL_GetTick>
 8002b36:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fd fb9d 	bl	8000278 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0f5      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002b50:	2302      	movs	r3, #2
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	623b      	str	r3, [r7, #32]
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	61fb      	str	r3, [r7, #28]
  return result;
 8002b68:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b7e:	4b01      	ldr	r3, [pc, #4]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	e00d      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	10908100 	.word	0x10908100
 8002b90:	2302      	movs	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	4b69      	ldr	r3, [pc, #420]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	613a      	str	r2, [r7, #16]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	fa92 f2a2 	rbit	r2, r2
 8002baa:	60fa      	str	r2, [r7, #12]
  return result;
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	fab2 f282 	clz	r2, r2
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f002 021f 	and.w	r2, r2, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0b7      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bca:	4b5e      	ldr	r3, [pc, #376]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	495b      	ldr	r1, [pc, #364]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b57      	ldr	r3, [pc, #348]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bfc:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f023 0203 	bic.w	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	494e      	ldr	r1, [pc, #312]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f023 0210 	bic.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4947      	ldr	r1, [pc, #284]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c38:	4b42      	ldr	r3, [pc, #264]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	493f      	ldr	r1, [pc, #252]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f023 0220 	bic.w	r2, r3, #32
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	4938      	ldr	r1, [pc, #224]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c74:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	4930      	ldr	r1, [pc, #192]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4929      	ldr	r1, [pc, #164]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	4921      	ldr	r1, [pc, #132]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	491a      	ldr	r1, [pc, #104]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002cec:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	4912      	ldr	r1, [pc, #72]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	490b      	ldr	r1, [pc, #44]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3748      	adds	r7, #72	; 0x48
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e01d      	b.n	8002d96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f815 	bl	8002d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f000 f986 	bl	8003098 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_TIM_Base_Start_IT+0x50>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d00b      	beq.n	8002df6 <HAL_TIM_Base_Start_IT+0x42>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d007      	beq.n	8002df6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	00010007 	.word	0x00010007

08002e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0202 	mvn.w	r2, #2
 8002e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f905 	bl	800305a <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f8f7 	bl	8003046 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f908 	bl	800306e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d122      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0204 	mvn.w	r2, #4
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8db 	bl	800305a <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8cd 	bl	8003046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f8de 	bl	800306e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d122      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d11b      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0208 	mvn.w	r2, #8
 8002edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8b1 	bl	800305a <HAL_TIM_IC_CaptureCallback>
 8002ef8:	e005      	b.n	8002f06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8a3 	bl	8003046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f8b4 	bl	800306e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d11b      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0210 	mvn.w	r2, #16
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2208      	movs	r2, #8
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f887 	bl	800305a <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f879 	bl	8003046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f88a 	bl	800306e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d10e      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d107      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0201 	mvn.w	r2, #1
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f001 fb62 	bl	8004650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b80      	cmp	r3, #128	; 0x80
 8002f98:	d10e      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8e8 	bl	8003188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc6:	d10e      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b80      	cmp	r3, #128	; 0x80
 8002fd4:	d107      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f8db 	bl	800319c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b40      	cmp	r3, #64	; 0x40
 8002ff2:	d10e      	bne.n	8003012 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
 8003000:	d107      	bne.n	8003012 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800300a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f838 	bl	8003082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b20      	cmp	r3, #32
 800301e:	d10e      	bne.n	800303e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b20      	cmp	r3, #32
 800302c:	d107      	bne.n	800303e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f06f 0220 	mvn.w	r2, #32
 8003036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f89b 	bl	8003174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a2e      	ldr	r2, [pc, #184]	; (8003164 <TIM_Base_SetConfig+0xcc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_Base_SetConfig+0x20>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d108      	bne.n	80030ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a25      	ldr	r2, [pc, #148]	; (8003164 <TIM_Base_SetConfig+0xcc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00f      	beq.n	80030f2 <TIM_Base_SetConfig+0x5a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d00b      	beq.n	80030f2 <TIM_Base_SetConfig+0x5a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a22      	ldr	r2, [pc, #136]	; (8003168 <TIM_Base_SetConfig+0xd0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <TIM_Base_SetConfig+0x5a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a21      	ldr	r2, [pc, #132]	; (800316c <TIM_Base_SetConfig+0xd4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_Base_SetConfig+0x5a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a20      	ldr	r2, [pc, #128]	; (8003170 <TIM_Base_SetConfig+0xd8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d108      	bne.n	8003104 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <TIM_Base_SetConfig+0xcc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00b      	beq.n	8003148 <TIM_Base_SetConfig+0xb0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <TIM_Base_SetConfig+0xd0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d007      	beq.n	8003148 <TIM_Base_SetConfig+0xb0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <TIM_Base_SetConfig+0xd4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d003      	beq.n	8003148 <TIM_Base_SetConfig+0xb0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <TIM_Base_SetConfig+0xd8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d103      	bne.n	8003150 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	615a      	str	r2, [r3, #20]
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800

08003174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80031be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c2:	2b84      	cmp	r3, #132	; 0x84
 80031c4:	d005      	beq.n	80031d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80031c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	3303      	adds	r3, #3
 80031d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80031e4:	f000 fa6e 	bl	80036c4 <vTaskStartScheduler>
  
  return osOK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	bd80      	pop	{r7, pc}

080031ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80031ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f0:	b089      	sub	sp, #36	; 0x24
 80031f2:	af04      	add	r7, sp, #16
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685c      	ldr	r4, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681d      	ldr	r5, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691e      	ldr	r6, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ffd0 	bl	80031b0 <makeFreeRtosPriority>
 8003210:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800321a:	9202      	str	r2, [sp, #8]
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	9100      	str	r1, [sp, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4632      	mov	r2, r6
 8003224:	4629      	mov	r1, r5
 8003226:	4620      	mov	r0, r4
 8003228:	f000 f8ce 	bl	80033c8 <xTaskCreateStatic>
 800322c:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003238 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <osDelay+0x16>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	e000      	b.n	8003250 <osDelay+0x18>
 800324e:	2301      	movs	r3, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fa03 	bl	800365c <vTaskDelay>
  
  return osOK;
 8003256:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f103 0208 	add.w	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003278:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f103 0208 	add.w	r2, r3, #8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f103 0208 	add.w	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003318:	d103      	bne.n	8003322 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e00c      	b.n	800333c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3308      	adds	r3, #8
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e002      	b.n	8003330 <vListInsert+0x2e>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d2f6      	bcs.n	800332a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	601a      	str	r2, [r3, #0]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6892      	ldr	r2, [r2, #8]
 800338a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6852      	ldr	r2, [r2, #4]
 8003394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	d103      	bne.n	80033a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1e5a      	subs	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08e      	sub	sp, #56	; 0x38
 80033cc:	af04      	add	r7, sp, #16
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	623b      	str	r3, [r7, #32]
 80033ee:	e7fe      	b.n	80033ee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <xTaskCreateStatic+0x42>
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	e7fe      	b.n	8003408 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800340a:	235c      	movs	r3, #92	; 0x5c
 800340c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b5c      	cmp	r3, #92	; 0x5c
 8003412:	d009      	beq.n	8003428 <xTaskCreateStatic+0x60>
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e7fe      	b.n	8003426 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01a      	beq.n	8003464 <xTaskCreateStatic+0x9c>
 800342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d017      	beq.n	8003464 <xTaskCreateStatic+0x9c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800343e:	2300      	movs	r3, #0
 8003440:	9303      	str	r3, [sp, #12]
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	9302      	str	r3, [sp, #8]
 8003446:	f107 0314 	add.w	r3, r7, #20
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f80b 	bl	8003472 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800345c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800345e:	f000 f88f 	bl	8003580 <prvAddNewTaskToReadyList>
 8003462:	e001      	b.n	8003468 <xTaskCreateStatic+0xa0>
		}
		else
		{
			xReturn = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003468:	697b      	ldr	r3, [r7, #20]
	}
 800346a:	4618      	mov	r0, r3
 800346c:	3728      	adds	r7, #40	; 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b088      	sub	sp, #32
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	461a      	mov	r2, r3
 800348a:	21a5      	movs	r1, #165	; 0xa5
 800348c:	f001 fa8a 	bl	80049a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800349a:	3b01      	subs	r3, #1
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f023 0307 	bic.w	r3, r3, #7
 80034a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <prvInitialiseNewTask+0x56>
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e7fe      	b.n	80034c6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	e012      	b.n	80034f4 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	7819      	ldrb	r1, [r3, #0]
 80034d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	3334      	adds	r3, #52	; 0x34
 80034de:	460a      	mov	r2, r1
 80034e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3301      	adds	r3, #1
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b0f      	cmp	r3, #15
 80034f8:	d9e9      	bls.n	80034ce <prvInitialiseNewTask+0x5c>
 80034fa:	e000      	b.n	80034fe <prvInitialiseNewTask+0x8c>
		{
			break;
 80034fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	2b06      	cmp	r3, #6
 800350a:	d901      	bls.n	8003510 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800350c:	2306      	movs	r3, #6
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800351a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	2200      	movs	r2, #0
 8003520:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	3304      	adds	r3, #4
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff feba 	bl	80032a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	3318      	adds	r3, #24
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff feb5 	bl	80032a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	f1c3 0207 	rsb	r2, r3, #7
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800354a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	2200      	movs	r2, #0
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	68f9      	ldr	r1, [r7, #12]
 800355e:	69b8      	ldr	r0, [r7, #24]
 8003560:	f000 fc0e 	bl	8003d80 <pxPortInitialiseStack>
 8003564:	4602      	mov	r2, r0
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003576:	bf00      	nop
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003588:	f000 fd20 	bl	8003fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800358c:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <prvAddNewTaskToReadyList+0xc0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <prvAddNewTaskToReadyList+0xc0>)
 8003594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800359e:	4a29      	ldr	r2, [pc, #164]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <prvAddNewTaskToReadyList+0xc0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d110      	bne.n	80035ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035ac:	f000 fae6 	bl	8003b7c <prvInitialiseTaskLists>
 80035b0:	e00d      	b.n	80035ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035b2:	4b25      	ldr	r3, [pc, #148]	; (8003648 <prvAddNewTaskToReadyList+0xc8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d802      	bhi.n	80035ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035c8:	4a1e      	ldr	r2, [pc, #120]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ce:	4b1f      	ldr	r3, [pc, #124]	; (800364c <prvAddNewTaskToReadyList+0xcc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	4a1d      	ldr	r2, [pc, #116]	; (800364c <prvAddNewTaskToReadyList+0xcc>)
 80035d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035d8:	4b1c      	ldr	r3, [pc, #112]	; (800364c <prvAddNewTaskToReadyList+0xcc>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2201      	movs	r2, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	4a18      	ldr	r2, [pc, #96]	; (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4a15      	ldr	r2, [pc, #84]	; (8003654 <prvAddNewTaskToReadyList+0xd4>)
 8003600:	441a      	add	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7ff fe56 	bl	80032ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800360e:	f000 fd0b 	bl	8004028 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <prvAddNewTaskToReadyList+0xc8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00e      	beq.n	8003638 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <prvAddNewTaskToReadyList+0xc4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	429a      	cmp	r2, r3
 8003626:	d207      	bcs.n	8003638 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <prvAddNewTaskToReadyList+0xd8>)
 800362a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	2000012c 	.word	0x2000012c
 8003644:	2000002c 	.word	0x2000002c
 8003648:	20000138 	.word	0x20000138
 800364c:	20000148 	.word	0x20000148
 8003650:	20000134 	.word	0x20000134
 8003654:	20000030 	.word	0x20000030
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <vTaskDelay+0x60>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <vTaskDelay+0x2e>
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	e7fe      	b.n	8003688 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800368a:	f000 f879 	bl	8003780 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800368e:	2100      	movs	r1, #0
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fb0f 	bl	8003cb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003696:	f000 f881 	bl	800379c <xTaskResumeAll>
 800369a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d107      	bne.n	80036b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <vTaskDelay+0x64>)
 80036a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000154 	.word	0x20000154
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036d2:	463a      	mov	r2, r7
 80036d4:	1d39      	adds	r1, r7, #4
 80036d6:	f107 0308 	add.w	r3, r7, #8
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fd5e 	bl	800419c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	9202      	str	r2, [sp, #8]
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	460a      	mov	r2, r1
 80036f2:	491d      	ldr	r1, [pc, #116]	; (8003768 <vTaskStartScheduler+0xa4>)
 80036f4:	481d      	ldr	r0, [pc, #116]	; (800376c <vTaskStartScheduler+0xa8>)
 80036f6:	f7ff fe67 	bl	80033c8 <xTaskCreateStatic>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <vTaskStartScheduler+0xac>)
 80036fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <vTaskStartScheduler+0xac>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	e001      	b.n	8003712 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d115      	bne.n	8003744 <vTaskStartScheduler+0x80>
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <vTaskStartScheduler+0xb0>)
 800372c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003730:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <vTaskStartScheduler+0xb4>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <vTaskStartScheduler+0xb8>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800373e:	f000 fba7 	bl	8003e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003742:	e00d      	b.n	8003760 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800374a:	d109      	bne.n	8003760 <vTaskStartScheduler+0x9c>
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e7fe      	b.n	800375e <vTaskStartScheduler+0x9a>
}
 8003760:	bf00      	nop
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	080049cc 	.word	0x080049cc
 800376c:	08003b4d 	.word	0x08003b4d
 8003770:	20000150 	.word	0x20000150
 8003774:	2000014c 	.word	0x2000014c
 8003778:	20000138 	.word	0x20000138
 800377c:	20000130 	.word	0x20000130

08003780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <vTaskSuspendAll+0x18>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	4a03      	ldr	r2, [pc, #12]	; (8003798 <vTaskSuspendAll+0x18>)
 800378c:	6013      	str	r3, [r2, #0]
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	20000154 	.word	0x20000154

0800379c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037aa:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <xTaskResumeAll+0x114>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <xTaskResumeAll+0x2a>
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	e7fe      	b.n	80037c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037c6:	f000 fc01 	bl	8003fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037ca:	4b39      	ldr	r3, [pc, #228]	; (80038b0 <xTaskResumeAll+0x114>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	4a37      	ldr	r2, [pc, #220]	; (80038b0 <xTaskResumeAll+0x114>)
 80037d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037d4:	4b36      	ldr	r3, [pc, #216]	; (80038b0 <xTaskResumeAll+0x114>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d161      	bne.n	80038a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037dc:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <xTaskResumeAll+0x118>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05d      	beq.n	80038a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037e4:	e02e      	b.n	8003844 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80037e6:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <xTaskResumeAll+0x11c>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3318      	adds	r3, #24
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fdbe 	bl	8003374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fdb9 	bl	8003374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	2201      	movs	r2, #1
 8003808:	409a      	lsls	r2, r3
 800380a:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <xTaskResumeAll+0x120>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4313      	orrs	r3, r2
 8003810:	4a2a      	ldr	r2, [pc, #168]	; (80038bc <xTaskResumeAll+0x120>)
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <xTaskResumeAll+0x124>)
 8003822:	441a      	add	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3304      	adds	r3, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7ff fd45 	bl	80032ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <xTaskResumeAll+0x128>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <xTaskResumeAll+0x12c>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <xTaskResumeAll+0x11c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1cc      	bne.n	80037e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003852:	f000 fa09 	bl	8003c68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <xTaskResumeAll+0x130>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d010      	beq.n	8003884 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003862:	f000 f837 	bl	80038d4 <xTaskIncrementTick>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800386c:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <xTaskResumeAll+0x12c>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3b01      	subs	r3, #1
 8003876:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f1      	bne.n	8003862 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <xTaskResumeAll+0x130>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <xTaskResumeAll+0x12c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800388c:	2301      	movs	r3, #1
 800388e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <xTaskResumeAll+0x134>)
 8003892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038a0:	f000 fbc2 	bl	8004028 <vPortExitCritical>

	return xAlreadyYielded;
 80038a4:	68bb      	ldr	r3, [r7, #8]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000154 	.word	0x20000154
 80038b4:	2000012c 	.word	0x2000012c
 80038b8:	200000ec 	.word	0x200000ec
 80038bc:	20000134 	.word	0x20000134
 80038c0:	20000030 	.word	0x20000030
 80038c4:	2000002c 	.word	0x2000002c
 80038c8:	20000140 	.word	0x20000140
 80038cc:	2000013c 	.word	0x2000013c
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038de:	4b50      	ldr	r3, [pc, #320]	; (8003a20 <xTaskIncrementTick+0x14c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f040 808c 	bne.w	8003a00 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038e8:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <xTaskIncrementTick+0x150>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038f0:	4a4c      	ldr	r2, [pc, #304]	; (8003a24 <xTaskIncrementTick+0x150>)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d11f      	bne.n	800393c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80038fc:	4b4a      	ldr	r3, [pc, #296]	; (8003a28 <xTaskIncrementTick+0x154>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <xTaskIncrementTick+0x46>
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	e7fe      	b.n	8003918 <xTaskIncrementTick+0x44>
 800391a:	4b43      	ldr	r3, [pc, #268]	; (8003a28 <xTaskIncrementTick+0x154>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	4b42      	ldr	r3, [pc, #264]	; (8003a2c <xTaskIncrementTick+0x158>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a40      	ldr	r2, [pc, #256]	; (8003a28 <xTaskIncrementTick+0x154>)
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4a40      	ldr	r2, [pc, #256]	; (8003a2c <xTaskIncrementTick+0x158>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <xTaskIncrementTick+0x15c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	4a3e      	ldr	r2, [pc, #248]	; (8003a30 <xTaskIncrementTick+0x15c>)
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	f000 f996 	bl	8003c68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800393c:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <xTaskIncrementTick+0x160>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	429a      	cmp	r2, r3
 8003944:	d34d      	bcc.n	80039e2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003946:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <xTaskIncrementTick+0x154>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <xTaskIncrementTick+0x80>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <xTaskIncrementTick+0x82>
 8003954:	2300      	movs	r3, #0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800395a:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <xTaskIncrementTick+0x160>)
 800395c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003960:	601a      	str	r2, [r3, #0]
					break;
 8003962:	e03e      	b.n	80039e2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <xTaskIncrementTick+0x154>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	d203      	bcs.n	8003984 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800397c:	4a2d      	ldr	r2, [pc, #180]	; (8003a34 <xTaskIncrementTick+0x160>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6013      	str	r3, [r2, #0]
						break;
 8003982:	e02e      	b.n	80039e2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fcf3 	bl	8003374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	3318      	adds	r3, #24
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fcea 	bl	8003374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	2201      	movs	r2, #1
 80039a6:	409a      	lsls	r2, r3
 80039a8:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <xTaskIncrementTick+0x164>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <xTaskIncrementTick+0x164>)
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <xTaskIncrementTick+0x168>)
 80039c0:	441a      	add	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f7ff fc76 	bl	80032ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <xTaskIncrementTick+0x16c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	429a      	cmp	r2, r3
 80039da:	d3b4      	bcc.n	8003946 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e0:	e7b1      	b.n	8003946 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <xTaskIncrementTick+0x16c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4914      	ldr	r1, [pc, #80]	; (8003a3c <xTaskIncrementTick+0x168>)
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d907      	bls.n	8003a0a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e004      	b.n	8003a0a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a00:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <xTaskIncrementTick+0x170>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	4a0f      	ldr	r2, [pc, #60]	; (8003a44 <xTaskIncrementTick+0x170>)
 8003a08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <xTaskIncrementTick+0x174>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003a12:	2301      	movs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a16:	697b      	ldr	r3, [r7, #20]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000154 	.word	0x20000154
 8003a24:	20000130 	.word	0x20000130
 8003a28:	200000e4 	.word	0x200000e4
 8003a2c:	200000e8 	.word	0x200000e8
 8003a30:	20000144 	.word	0x20000144
 8003a34:	2000014c 	.word	0x2000014c
 8003a38:	20000134 	.word	0x20000134
 8003a3c:	20000030 	.word	0x20000030
 8003a40:	2000002c 	.word	0x2000002c
 8003a44:	2000013c 	.word	0x2000013c
 8003a48:	20000140 	.word	0x20000140

08003a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a52:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <vTaskSwitchContext+0xec>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a5a:	4b38      	ldr	r3, [pc, #224]	; (8003b3c <vTaskSwitchContext+0xf0>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a60:	e065      	b.n	8003b2e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8003a62:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <vTaskSwitchContext+0xf0>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003a68:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <vTaskSwitchContext+0xf4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d111      	bne.n	8003aa4 <vTaskSwitchContext+0x58>
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3304      	adds	r3, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d10b      	bne.n	8003aa4 <vTaskSwitchContext+0x58>
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d105      	bne.n	8003aa4 <vTaskSwitchContext+0x58>
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d008      	beq.n	8003ab6 <vTaskSwitchContext+0x6a>
 8003aa4:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <vTaskSwitchContext+0xf4>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <vTaskSwitchContext+0xf4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3334      	adds	r3, #52	; 0x34
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f000 fb67 	bl	8004184 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ab6:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <vTaskSwitchContext+0xf8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ac4:	7afb      	ldrb	r3, [r7, #11]
 8003ac6:	f1c3 031f 	rsb	r3, r3, #31
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	491e      	ldr	r1, [pc, #120]	; (8003b48 <vTaskSwitchContext+0xfc>)
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <vTaskSwitchContext+0xa8>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	e7fe      	b.n	8003af2 <vTaskSwitchContext+0xa6>
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <vTaskSwitchContext+0xfc>)
 8003b00:	4413      	add	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3308      	adds	r3, #8
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d104      	bne.n	8003b24 <vTaskSwitchContext+0xd8>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <vTaskSwitchContext+0xf4>)
 8003b2c:	6013      	str	r3, [r2, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000154 	.word	0x20000154
 8003b3c:	20000140 	.word	0x20000140
 8003b40:	2000002c 	.word	0x2000002c
 8003b44:	20000134 	.word	0x20000134
 8003b48:	20000030 	.word	0x20000030

08003b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b54:	f000 f852 	bl	8003bfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <prvIdleTask+0x28>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d9f9      	bls.n	8003b54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <prvIdleTask+0x2c>)
 8003b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b70:	e7f0      	b.n	8003b54 <prvIdleTask+0x8>
 8003b72:	bf00      	nop
 8003b74:	20000030 	.word	0x20000030
 8003b78:	e000ed04 	.word	0xe000ed04

08003b7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	e00c      	b.n	8003ba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <prvInitialiseTaskLists+0x60>)
 8003b94:	4413      	add	r3, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fb62 	bl	8003260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b06      	cmp	r3, #6
 8003ba6:	d9ef      	bls.n	8003b88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ba8:	480d      	ldr	r0, [pc, #52]	; (8003be0 <prvInitialiseTaskLists+0x64>)
 8003baa:	f7ff fb59 	bl	8003260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bae:	480d      	ldr	r0, [pc, #52]	; (8003be4 <prvInitialiseTaskLists+0x68>)
 8003bb0:	f7ff fb56 	bl	8003260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bb4:	480c      	ldr	r0, [pc, #48]	; (8003be8 <prvInitialiseTaskLists+0x6c>)
 8003bb6:	f7ff fb53 	bl	8003260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bba:	480c      	ldr	r0, [pc, #48]	; (8003bec <prvInitialiseTaskLists+0x70>)
 8003bbc:	f7ff fb50 	bl	8003260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bc0:	480b      	ldr	r0, [pc, #44]	; (8003bf0 <prvInitialiseTaskLists+0x74>)
 8003bc2:	f7ff fb4d 	bl	8003260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <prvInitialiseTaskLists+0x78>)
 8003bc8:	4a05      	ldr	r2, [pc, #20]	; (8003be0 <prvInitialiseTaskLists+0x64>)
 8003bca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <prvInitialiseTaskLists+0x7c>)
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <prvInitialiseTaskLists+0x68>)
 8003bd0:	601a      	str	r2, [r3, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000030 	.word	0x20000030
 8003be0:	200000bc 	.word	0x200000bc
 8003be4:	200000d0 	.word	0x200000d0
 8003be8:	200000ec 	.word	0x200000ec
 8003bec:	20000100 	.word	0x20000100
 8003bf0:	20000118 	.word	0x20000118
 8003bf4:	200000e4 	.word	0x200000e4
 8003bf8:	200000e8 	.word	0x200000e8

08003bfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c02:	e019      	b.n	8003c38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c04:	f000 f9e2 	bl	8003fcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <prvCheckTasksWaitingTermination+0x4c>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fbad 	bl	8003374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <prvCheckTasksWaitingTermination+0x50>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <prvCheckTasksWaitingTermination+0x50>)
 8003c22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <prvCheckTasksWaitingTermination+0x54>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <prvCheckTasksWaitingTermination+0x54>)
 8003c2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c2e:	f000 f9fb 	bl	8004028 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f80e 	bl	8003c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <prvCheckTasksWaitingTermination+0x54>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e1      	bne.n	8003c04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000100 	.word	0x20000100
 8003c4c:	2000012c 	.word	0x2000012c
 8003c50:	20000114 	.word	0x20000114

08003c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <prvResetNextTaskUnblockTime+0x44>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <prvResetNextTaskUnblockTime+0x14>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <prvResetNextTaskUnblockTime+0x16>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <prvResetNextTaskUnblockTime+0x48>)
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c8a:	e008      	b.n	8003c9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c8c:	4b07      	ldr	r3, [pc, #28]	; (8003cac <prvResetNextTaskUnblockTime+0x44>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <prvResetNextTaskUnblockTime+0x48>)
 8003c9c:	6013      	str	r3, [r2, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	200000e4 	.word	0x200000e4
 8003cb0:	2000014c 	.word	0x2000014c

08003cb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003cbe:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cc4:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fb52 	bl	8003374 <uxListRemove>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	2201      	movs	r2, #1
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	4a20      	ldr	r2, [pc, #128]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf4:	d10a      	bne.n	8003d0c <prvAddCurrentTaskToDelayedList+0x58>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	481a      	ldr	r0, [pc, #104]	; (8003d70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d06:	f7ff fad8 	bl	80032ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d0a:	e026      	b.n	8003d5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d209      	bcs.n	8003d38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f7ff fae6 	bl	8003302 <vListInsert>
}
 8003d36:	e010      	b.n	8003d5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7ff fadc 	bl	8003302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d202      	bcs.n	8003d5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d54:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6013      	str	r3, [r2, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000130 	.word	0x20000130
 8003d68:	2000002c 	.word	0x2000002c
 8003d6c:	20000134 	.word	0x20000134
 8003d70:	20000118 	.word	0x20000118
 8003d74:	200000e8 	.word	0x200000e8
 8003d78:	200000e4 	.word	0x200000e4
 8003d7c:	2000014c 	.word	0x2000014c

08003d80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3b04      	subs	r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f023 0201 	bic.w	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003db0:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <pxPortInitialiseStack+0x64>)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b14      	subs	r3, #20
 8003dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3b04      	subs	r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f06f 0202 	mvn.w	r2, #2
 8003dce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3b20      	subs	r3, #32
 8003dd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	08003de9 	.word	0x08003de9

08003de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <prvTaskExitError+0x50>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dfa:	d009      	beq.n	8003e10 <prvTaskExitError+0x28>
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e7fe      	b.n	8003e0e <prvTaskExitError+0x26>
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e22:	bf00      	nop
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0fc      	beq.n	8003e24 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000008 	.word	0x20000008
 8003e3c:	00000000 	.word	0x00000000

08003e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <pxCurrentTCBConst2>)
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	6808      	ldr	r0, [r1, #0]
 8003e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4a:	f380 8809 	msr	PSP, r0
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f380 8811 	msr	BASEPRI, r0
 8003e5a:	4770      	bx	lr
 8003e5c:	f3af 8000 	nop.w

08003e60 <pxCurrentTCBConst2>:
 8003e60:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop

08003e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e68:	4808      	ldr	r0, [pc, #32]	; (8003e8c <prvPortStartFirstTask+0x24>)
 8003e6a:	6800      	ldr	r0, [r0, #0]
 8003e6c:	6800      	ldr	r0, [r0, #0]
 8003e6e:	f380 8808 	msr	MSP, r0
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f380 8814 	msr	CONTROL, r0
 8003e7a:	b662      	cpsie	i
 8003e7c:	b661      	cpsie	f
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	df00      	svc	0
 8003e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e8a:	bf00      	nop
 8003e8c:	e000ed08 	.word	0xe000ed08

08003e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e96:	4b44      	ldr	r3, [pc, #272]	; (8003fa8 <xPortStartScheduler+0x118>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a44      	ldr	r2, [pc, #272]	; (8003fac <xPortStartScheduler+0x11c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d109      	bne.n	8003eb4 <xPortStartScheduler+0x24>
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	e7fe      	b.n	8003eb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eb4:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <xPortStartScheduler+0x118>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3d      	ldr	r2, [pc, #244]	; (8003fb0 <xPortStartScheduler+0x120>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d109      	bne.n	8003ed2 <xPortStartScheduler+0x42>
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e7fe      	b.n	8003ed0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ed2:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <xPortStartScheduler+0x124>)
 8003ed4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	22ff      	movs	r2, #255	; 0xff
 8003ee2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <xPortStartScheduler+0x128>)
 8003ef8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <xPortStartScheduler+0x12c>)
 8003efc:	2207      	movs	r2, #7
 8003efe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f00:	e009      	b.n	8003f16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003f02:	4b2e      	ldr	r3, [pc, #184]	; (8003fbc <xPortStartScheduler+0x12c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <xPortStartScheduler+0x12c>)
 8003f0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d0ef      	beq.n	8003f02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f22:	4b26      	ldr	r3, [pc, #152]	; (8003fbc <xPortStartScheduler+0x12c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f1c3 0307 	rsb	r3, r3, #7
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d009      	beq.n	8003f42 <xPortStartScheduler+0xb2>
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	e7fe      	b.n	8003f40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <xPortStartScheduler+0x12c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <xPortStartScheduler+0x12c>)
 8003f4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <xPortStartScheduler+0x12c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <xPortStartScheduler+0x12c>)
 8003f56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <xPortStartScheduler+0x130>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <xPortStartScheduler+0x130>)
 8003f66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f6c:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <xPortStartScheduler+0x130>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <xPortStartScheduler+0x130>)
 8003f72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f78:	f000 f8d6 	bl	8004128 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <xPortStartScheduler+0x134>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f82:	f000 f8f5 	bl	8004170 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <xPortStartScheduler+0x138>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a0f      	ldr	r2, [pc, #60]	; (8003fc8 <xPortStartScheduler+0x138>)
 8003f8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f92:	f7ff ff69 	bl	8003e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f96:	f7ff fd59 	bl	8003a4c <vTaskSwitchContext>
	prvTaskExitError();
 8003f9a:	f7ff ff25 	bl	8003de8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	e000ed00 	.word	0xe000ed00
 8003fac:	410fc271 	.word	0x410fc271
 8003fb0:	410fc270 	.word	0x410fc270
 8003fb4:	e000e400 	.word	0xe000e400
 8003fb8:	20000158 	.word	0x20000158
 8003fbc:	2000015c 	.word	0x2000015c
 8003fc0:	e000ed20 	.word	0xe000ed20
 8003fc4:	20000008 	.word	0x20000008
 8003fc8:	e000ef34 	.word	0xe000ef34

08003fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <vPortEnterCritical+0x54>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <vPortEnterCritical+0x54>)
 8003fec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <vPortEnterCritical+0x54>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d10e      	bne.n	8004014 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <vPortEnterCritical+0x58>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <vPortEnterCritical+0x48>
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	e7fe      	b.n	8004012 <vPortEnterCritical+0x46>
	}
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	20000008 	.word	0x20000008
 8004024:	e000ed04 	.word	0xe000ed04

08004028 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <vPortExitCritical+0x4c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <vPortExitCritical+0x22>
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	e7fe      	b.n	8004048 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <vPortExitCritical+0x4c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3b01      	subs	r3, #1
 8004050:	4a08      	ldr	r2, [pc, #32]	; (8004074 <vPortExitCritical+0x4c>)
 8004052:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004054:	4b07      	ldr	r3, [pc, #28]	; (8004074 <vPortExitCritical+0x4c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <vPortExitCritical+0x3e>
 800405c:	2300      	movs	r3, #0
 800405e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000008 	.word	0x20000008
	...

08004080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004080:	f3ef 8009 	mrs	r0, PSP
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <pxCurrentTCBConst>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	f01e 0f10 	tst.w	lr, #16
 8004090:	bf08      	it	eq
 8004092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	6010      	str	r0, [r2, #0]
 800409c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040a4:	f380 8811 	msr	BASEPRI, r0
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f7ff fccc 	bl	8003a4c <vTaskSwitchContext>
 80040b4:	f04f 0000 	mov.w	r0, #0
 80040b8:	f380 8811 	msr	BASEPRI, r0
 80040bc:	bc09      	pop	{r0, r3}
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	6808      	ldr	r0, [r1, #0]
 80040c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c6:	f01e 0f10 	tst.w	lr, #16
 80040ca:	bf08      	it	eq
 80040cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040d0:	f380 8809 	msr	PSP, r0
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst>:
 80040e0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004100:	f7ff fbe8 	bl	80038d4 <xTaskIncrementTick>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <SysTick_Handler+0x3c>)
 800410c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <vPortSetupTimerInterrupt+0x34>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <vPortSetupTimerInterrupt+0x38>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <vPortSetupTimerInterrupt+0x3c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <vPortSetupTimerInterrupt+0x40>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	4a09      	ldr	r2, [pc, #36]	; (800416c <vPortSetupTimerInterrupt+0x44>)
 8004146:	3b01      	subs	r3, #1
 8004148:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800414a:	4b04      	ldr	r3, [pc, #16]	; (800415c <vPortSetupTimerInterrupt+0x34>)
 800414c:	2207      	movs	r2, #7
 800414e:	601a      	str	r2, [r3, #0]
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	e000e010 	.word	0xe000e010
 8004160:	e000e018 	.word	0xe000e018
 8004164:	2000000c 	.word	0x2000000c
 8004168:	10624dd3 	.word	0x10624dd3
 800416c:	e000e014 	.word	0xe000e014

08004170 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004170:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004180 <vPortEnableVFP+0x10>
 8004174:	6801      	ldr	r1, [r0, #0]
 8004176:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800417a:	6001      	str	r1, [r0, #0]
 800417c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800417e:	bf00      	nop
 8004180:	e000ed88 	.word	0xe000ed88

08004184 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80041ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4a06      	ldr	r2, [pc, #24]	; (80041cc <vApplicationGetIdleTaskMemory+0x30>)
 80041b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2280      	movs	r2, #128	; 0x80
 80041b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000160 	.word	0x20000160
 80041cc:	200001bc 	.word	0x200001bc

080041d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041d0:	b5b0      	push	{r4, r5, r7, lr}
 80041d2:	b09c      	sub	sp, #112	; 0x70
 80041d4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041d6:	f7fc f825 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041da:	f000 f865 	bl	80042a8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041de:	f000 f971 	bl	80044c4 <MX_GPIO_Init>
  MX_CAN_Init();
 80041e2:	f000 f91b 	bl	800441c <MX_CAN_Init>
  MX_ADC1_Init();
 80041e6:	f000 f8bd 	bl	8004364 <MX_ADC1_Init>
  MX_IWDG_Init();
 80041ea:	f000 f94d 	bl	8004488 <MX_IWDG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1Hz */
  osThreadStaticDef(Task1Hz, RunTask1Hz, osPriorityLow, 0, 128, Task1HzBuffer, &Task1HzControlBlock);
 80041ee:	4b26      	ldr	r3, [pc, #152]	; (8004288 <main+0xb8>)
 80041f0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80041f4:	461d      	mov	r5, r3
 80041f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1HzHandle = osThreadCreate(osThread(Task1Hz), NULL);
 8004202:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe fff0 	bl	80031ee <osThreadCreate>
 800420e:	4602      	mov	r2, r0
 8004210:	4b1e      	ldr	r3, [pc, #120]	; (800428c <main+0xbc>)
 8004212:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task1kHz */
  osThreadStaticDef(Task1kHz, RunTask1kHz, osPriorityAboveNormal, 0, 128, Task1kHzBuffer, &Task1kHzControlBlock);
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <main+0xc0>)
 8004216:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800421a:	461d      	mov	r5, r3
 800421c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800421e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004220:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004224:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1kHzHandle = osThreadCreate(osThread(Task1kHz), NULL);
 8004228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe ffdd 	bl	80031ee <osThreadCreate>
 8004234:	4602      	mov	r2, r0
 8004236:	4b17      	ldr	r3, [pc, #92]	; (8004294 <main+0xc4>)
 8004238:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskCanRx */
  osThreadStaticDef(TaskCanRx, RunTaskCanRx, osPriorityRealtime, 0, 128, TaskCanRxBuffer, &TaskCanRxControlBlock);
 800423a:	4b17      	ldr	r3, [pc, #92]	; (8004298 <main+0xc8>)
 800423c:	f107 041c 	add.w	r4, r7, #28
 8004240:	461d      	mov	r5, r3
 8004242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004246:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800424a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCanRxHandle = osThreadCreate(osThread(TaskCanRx), NULL);
 800424e:	f107 031c 	add.w	r3, r7, #28
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe ffca 	bl	80031ee <osThreadCreate>
 800425a:	4602      	mov	r2, r0
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <main+0xcc>)
 800425e:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskCanTx */
  osThreadStaticDef(TaskCanTx, RunTaskCanTx, osPriorityRealtime, 0, 128, TaskCanTxBuffer, &TaskCanTxControlBlock);
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <main+0xd0>)
 8004262:	463c      	mov	r4, r7
 8004264:	461d      	mov	r5, r3
 8004266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800426a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800426e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCanTxHandle = osThreadCreate(osThread(TaskCanTx), NULL);
 8004272:	463b      	mov	r3, r7
 8004274:	2100      	movs	r1, #0
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe ffb9 	bl	80031ee <osThreadCreate>
 800427c:	4602      	mov	r2, r0
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <main+0xd4>)
 8004280:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004282:	f7fe ffad 	bl	80031e0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004286:	e7fe      	b.n	8004286 <main+0xb6>
 8004288:	080049dc 	.word	0x080049dc
 800428c:	20000dc4 	.word	0x20000dc4
 8004290:	08004a04 	.word	0x08004a04
 8004294:	20000d64 	.word	0x20000d64
 8004298:	08004a2c 	.word	0x08004a2c
 800429c:	2000042c 	.word	0x2000042c
 80042a0:	08004a54 	.word	0x08004a54
 80042a4:	20000960 	.word	0x20000960

080042a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b09c      	sub	sp, #112	; 0x70
 80042ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042b2:	2228      	movs	r2, #40	; 0x28
 80042b4:	2100      	movs	r1, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fb74 	bl	80049a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042cc:	463b      	mov	r3, r7
 80042ce:	2234      	movs	r2, #52	; 0x34
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fb66 	bl	80049a4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80042d8:	2309      	movs	r3, #9
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80042e2:	2300      	movs	r3, #0
 80042e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042e6:	2301      	movs	r3, #1
 80042e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80042ea:	2301      	movs	r3, #1
 80042ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042ee:	2302      	movs	r3, #2
 80042f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80042f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80042fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd fa40 	bl	8001788 <HAL_RCC_OscConfig>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800430e:	f000 f9ae 	bl	800466e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004312:	230f      	movs	r3, #15
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004316:	2302      	movs	r3, #2
 8004318:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800431a:	2300      	movs	r3, #0
 800431c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800431e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004322:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004324:	2300      	movs	r3, #0
 8004326:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004328:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800432c:	2102      	movs	r1, #2
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe f932 	bl	8002598 <HAL_RCC_ClockConfig>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800433a:	f000 f998 	bl	800466e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 800433e:	2380      	movs	r3, #128	; 0x80
 8004340:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8004342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004346:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004348:	463b      	mov	r3, r7
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fb6a 	bl	8002a24 <HAL_RCCEx_PeriphCLKConfig>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004356:	f000 f98a 	bl	800466e <Error_Handler>
  }
}
 800435a:	bf00      	nop
 800435c:	3770      	adds	r7, #112	; 0x70
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800436a:	463b      	mov	r3, r7
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
 8004378:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <MX_ADC1_Init+0xb4>)
 800437c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004380:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004382:	4b25      	ldr	r3, [pc, #148]	; (8004418 <MX_ADC1_Init+0xb4>)
 8004384:	2200      	movs	r2, #0
 8004386:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <MX_ADC1_Init+0xb4>)
 800438a:	2200      	movs	r2, #0
 800438c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <MX_ADC1_Init+0xb4>)
 8004390:	2200      	movs	r2, #0
 8004392:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004394:	4b20      	ldr	r3, [pc, #128]	; (8004418 <MX_ADC1_Init+0xb4>)
 8004396:	2200      	movs	r2, #0
 8004398:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <MX_ADC1_Init+0xb4>)
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043a2:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <MX_ADC1_Init+0xb4>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <MX_ADC1_Init+0xb4>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <MX_ADC1_Init+0xb4>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80043b4:	4b18      	ldr	r3, [pc, #96]	; (8004418 <MX_ADC1_Init+0xb4>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80043ba:	4b17      	ldr	r3, [pc, #92]	; (8004418 <MX_ADC1_Init+0xb4>)
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <MX_ADC1_Init+0xb4>)
 80043c4:	2204      	movs	r2, #4
 80043c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <MX_ADC1_Init+0xb4>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <MX_ADC1_Init+0xb4>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80043d4:	4810      	ldr	r0, [pc, #64]	; (8004418 <MX_ADC1_Init+0xb4>)
 80043d6:	f7fb ff5b 	bl	8000290 <HAL_ADC_Init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80043e0:	f000 f945 	bl	800466e <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80043e4:	2304      	movs	r3, #4
 80043e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80043e8:	2301      	movs	r3, #1
 80043ea:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043fc:	463b      	mov	r3, r7
 80043fe:	4619      	mov	r1, r3
 8004400:	4805      	ldr	r0, [pc, #20]	; (8004418 <MX_ADC1_Init+0xb4>)
 8004402:	f7fc f8cb 	bl	800059c <HAL_ADC_ConfigChannel>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800440c:	f000 f92f 	bl	800466e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004410:	bf00      	nop
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	200006b4 	.word	0x200006b4

0800441c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <MX_CAN_Init+0x64>)
 8004422:	4a18      	ldr	r2, [pc, #96]	; (8004484 <MX_CAN_Init+0x68>)
 8004424:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8004426:	4b16      	ldr	r3, [pc, #88]	; (8004480 <MX_CAN_Init+0x64>)
 8004428:	2209      	movs	r2, #9
 800442a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <MX_CAN_Init+0x64>)
 800442e:	2200      	movs	r2, #0
 8004430:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <MX_CAN_Init+0x64>)
 8004434:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8004438:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <MX_CAN_Init+0x64>)
 800443c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8004440:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <MX_CAN_Init+0x64>)
 8004444:	2200      	movs	r2, #0
 8004446:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004448:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <MX_CAN_Init+0x64>)
 800444a:	2200      	movs	r2, #0
 800444c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <MX_CAN_Init+0x64>)
 8004450:	2201      	movs	r2, #1
 8004452:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <MX_CAN_Init+0x64>)
 8004456:	2200      	movs	r2, #0
 8004458:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <MX_CAN_Init+0x64>)
 800445c:	2201      	movs	r2, #1
 800445e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = ENABLE;
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <MX_CAN_Init+0x64>)
 8004462:	2201      	movs	r2, #1
 8004464:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <MX_CAN_Init+0x64>)
 8004468:	2201      	movs	r2, #1
 800446a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800446c:	4804      	ldr	r0, [pc, #16]	; (8004480 <MX_CAN_Init+0x64>)
 800446e:	f7fc fbaa 	bl	8000bc6 <HAL_CAN_Init>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8004478:	f000 f8f9 	bl	800466e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000430 	.word	0x20000430
 8004484:	40006400 	.word	0x40006400

08004488 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <MX_IWDG_Init+0x34>)
 800448e:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <MX_IWDG_Init+0x38>)
 8004490:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <MX_IWDG_Init+0x34>)
 8004494:	2200      	movs	r2, #0
 8004496:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = IWDG_WINDOW_DISABLE_VALUE;
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <MX_IWDG_Init+0x34>)
 800449a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800449e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = LSI_FREQUENCY / IWDG_PRESCALER / IWDG_RESET_FREQUENCY;
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <MX_IWDG_Init+0x34>)
 80044a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044a6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80044a8:	4804      	ldr	r0, [pc, #16]	; (80044bc <MX_IWDG_Init+0x34>)
 80044aa:	f7fd f927 	bl	80016fc <HAL_IWDG_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80044b4:	f000 f8db 	bl	800466e <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	2000041c 	.word	0x2000041c
 80044c0:	40003000 	.word	0x40003000

080044c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ca:	f107 0314 	add.w	r3, r7, #20
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	605a      	str	r2, [r3, #4]
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044da:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <MX_GPIO_Init+0x140>)
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4a49      	ldr	r2, [pc, #292]	; (8004604 <MX_GPIO_Init+0x140>)
 80044e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e4:	6153      	str	r3, [r2, #20]
 80044e6:	4b47      	ldr	r3, [pc, #284]	; (8004604 <MX_GPIO_Init+0x140>)
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044f2:	4b44      	ldr	r3, [pc, #272]	; (8004604 <MX_GPIO_Init+0x140>)
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	4a43      	ldr	r2, [pc, #268]	; (8004604 <MX_GPIO_Init+0x140>)
 80044f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044fc:	6153      	str	r3, [r2, #20]
 80044fe:	4b41      	ldr	r3, [pc, #260]	; (8004604 <MX_GPIO_Init+0x140>)
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <MX_GPIO_Init+0x140>)
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4a3d      	ldr	r2, [pc, #244]	; (8004604 <MX_GPIO_Init+0x140>)
 8004510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004514:	6153      	str	r3, [r2, #20]
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <MX_GPIO_Init+0x140>)
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004522:	4b38      	ldr	r3, [pc, #224]	; (8004604 <MX_GPIO_Init+0x140>)
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4a37      	ldr	r2, [pc, #220]	; (8004604 <MX_GPIO_Init+0x140>)
 8004528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800452c:	6153      	str	r3, [r2, #20]
 800452e:	4b35      	ldr	r3, [pc, #212]	; (8004604 <MX_GPIO_Init+0x140>)
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_R_Pin|STATUS_G_Pin|STATUS_B_Pin, GPIO_PIN_SET);
 800453a:	2201      	movs	r2, #1
 800453c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004544:	f7fd f8c2 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004548:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800454c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800454e:	2303      	movs	r3, #3
 8004550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004556:	f107 0314 	add.w	r3, r7, #20
 800455a:	4619      	mov	r1, r3
 800455c:	482a      	ldr	r0, [pc, #168]	; (8004608 <MX_GPIO_Init+0x144>)
 800455e:	f7fc ff43 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4 
                           PA5 PA6 PA7 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8004562:	f649 03f7 	movw	r3, #39159	; 0x98f7
 8004566:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004568:	2303      	movs	r3, #3
 800456a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	4619      	mov	r1, r3
 8004576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800457a:	f7fc ff35 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800457e:	f640 4337 	movw	r3, #3127	; 0xc37
 8004582:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004584:	2303      	movs	r3, #3
 8004586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800458c:	f107 0314 	add.w	r3, r7, #20
 8004590:	4619      	mov	r1, r3
 8004592:	481e      	ldr	r0, [pc, #120]	; (800460c <MX_GPIO_Init+0x148>)
 8004594:	f7fc ff28 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004598:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800459c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459e:	2302      	movs	r3, #2
 80045a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045a6:	2303      	movs	r3, #3
 80045a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045aa:	2305      	movs	r3, #5
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ae:	f107 0314 	add.w	r3, r7, #20
 80045b2:	4619      	mov	r1, r3
 80045b4:	4815      	ldr	r0, [pc, #84]	; (800460c <MX_GPIO_Init+0x148>)
 80045b6:	f7fc ff17 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_R_Pin STATUS_G_Pin STATUS_B_Pin */
  GPIO_InitStruct.Pin = STATUS_R_Pin|STATUS_G_Pin|STATUS_B_Pin;
 80045ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80045be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c0:	2301      	movs	r3, #1
 80045c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c8:	2300      	movs	r3, #0
 80045ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	4619      	mov	r1, r3
 80045d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045d6:	f7fc ff07 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045da:	23c0      	movs	r3, #192	; 0xc0
 80045dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045de:	2312      	movs	r3, #18
 80045e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045e2:	2301      	movs	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045e6:	2303      	movs	r3, #3
 80045e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045ea:	2304      	movs	r3, #4
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	4619      	mov	r1, r3
 80045f4:	4805      	ldr	r0, [pc, #20]	; (800460c <MX_GPIO_Init+0x148>)
 80045f6:	f7fc fef7 	bl	80013e8 <HAL_GPIO_Init>

}
 80045fa:	bf00      	nop
 80045fc:	3728      	adds	r7, #40	; 0x28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	48000800 	.word	0x48000800
 800460c:	48000400 	.word	0x48000400

08004610 <RunTask1Hz>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_RunTask1Hz */
void RunTask1Hz(void const * argument)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004618:	2001      	movs	r0, #1
 800461a:	f7fe fe0d 	bl	8003238 <osDelay>
 800461e:	e7fb      	b.n	8004618 <RunTask1Hz+0x8>

08004620 <RunTask1kHz>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTask1kHz */
void RunTask1kHz(void const * argument)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTask1kHz */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004628:	2001      	movs	r0, #1
 800462a:	f7fe fe05 	bl	8003238 <osDelay>
 800462e:	e7fb      	b.n	8004628 <RunTask1kHz+0x8>

08004630 <RunTaskCanRx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskCanRx */
void RunTaskCanRx(void const * argument)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskCanRx */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004638:	2001      	movs	r0, #1
 800463a:	f7fe fdfd 	bl	8003238 <osDelay>
 800463e:	e7fb      	b.n	8004638 <RunTaskCanRx+0x8>

08004640 <RunTaskCanTx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RunTaskCanTx */
void RunTaskCanTx(void const * argument)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunTaskCanTx */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004648:	2001      	movs	r0, #1
 800464a:	f7fe fdf5 	bl	8003238 <osDelay>
 800464e:	e7fb      	b.n	8004648 <RunTaskCanTx+0x8>

08004650 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d101      	bne.n	8004666 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004662:	f7fb fdf5 	bl	8000250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800466e:	b480      	push	{r7}
 8004670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004682:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <HAL_MspInit+0x4c>)
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	4a10      	ldr	r2, [pc, #64]	; (80046c8 <HAL_MspInit+0x4c>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	6193      	str	r3, [r2, #24]
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <HAL_MspInit+0x4c>)
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_MspInit+0x4c>)
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <HAL_MspInit+0x4c>)
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a4:	61d3      	str	r3, [r2, #28]
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_MspInit+0x4c>)
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80046b2:	2200      	movs	r2, #0
 80046b4:	210f      	movs	r1, #15
 80046b6:	f06f 0001 	mvn.w	r0, #1
 80046ba:	f7fc fe6b 	bl	8001394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000

080046cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ec:	d124      	bne.n	8004738 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <HAL_ADC_MspInit+0x74>)
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	4a13      	ldr	r2, [pc, #76]	; (8004740 <HAL_ADC_MspInit+0x74>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f8:	6153      	str	r3, [r2, #20]
 80046fa:	4b11      	ldr	r3, [pc, #68]	; (8004740 <HAL_ADC_MspInit+0x74>)
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <HAL_ADC_MspInit+0x74>)
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <HAL_ADC_MspInit+0x74>)
 800470c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004710:	6153      	str	r3, [r2, #20]
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_ADC_MspInit+0x74>)
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = __24V_ISENSE_Pin;
 800471e:	2308      	movs	r3, #8
 8004720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004722:	2303      	movs	r3, #3
 8004724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(__24V_ISENSE_GPIO_Port, &GPIO_InitStruct);
 800472a:	f107 0314 	add.w	r3, r7, #20
 800472e:	4619      	mov	r1, r3
 8004730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004734:	f7fc fe58 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004738:	bf00      	nop
 800473a:	3728      	adds	r7, #40	; 0x28
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40021000 	.word	0x40021000

08004744 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a23      	ldr	r2, [pc, #140]	; (80047f0 <HAL_CAN_MspInit+0xac>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d140      	bne.n	80047e8 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004766:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <HAL_CAN_MspInit+0xb0>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	4a22      	ldr	r2, [pc, #136]	; (80047f4 <HAL_CAN_MspInit+0xb0>)
 800476c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004770:	61d3      	str	r3, [r2, #28]
 8004772:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <HAL_CAN_MspInit+0xb0>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_CAN_MspInit+0xb0>)
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <HAL_CAN_MspInit+0xb0>)
 8004784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004788:	6153      	str	r3, [r2, #20]
 800478a:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_CAN_MspInit+0xb0>)
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004796:	f44f 7340 	mov.w	r3, #768	; 0x300
 800479a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479c:	2302      	movs	r3, #2
 800479e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047a4:	2303      	movs	r3, #3
 80047a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80047a8:	2309      	movs	r3, #9
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ac:	f107 0314 	add.w	r3, r7, #20
 80047b0:	4619      	mov	r1, r3
 80047b2:	4811      	ldr	r0, [pc, #68]	; (80047f8 <HAL_CAN_MspInit+0xb4>)
 80047b4:	f7fc fe18 	bl	80013e8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 5, 0);
 80047b8:	2200      	movs	r2, #0
 80047ba:	2105      	movs	r1, #5
 80047bc:	2013      	movs	r0, #19
 80047be:	f7fc fde9 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 80047c2:	2013      	movs	r0, #19
 80047c4:	f7fc fe02 	bl	80013cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80047c8:	2200      	movs	r2, #0
 80047ca:	2105      	movs	r1, #5
 80047cc:	2014      	movs	r0, #20
 80047ce:	f7fc fde1 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80047d2:	2014      	movs	r0, #20
 80047d4:	f7fc fdfa 	bl	80013cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 5, 0);
 80047d8:	2200      	movs	r2, #0
 80047da:	2105      	movs	r1, #5
 80047dc:	2015      	movs	r0, #21
 80047de:	f7fc fdd9 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80047e2:	2015      	movs	r0, #21
 80047e4:	f7fc fdf2 	bl	80013cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80047e8:	bf00      	nop
 80047ea:	3728      	adds	r7, #40	; 0x28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40006400 	.word	0x40006400
 80047f4:	40021000 	.word	0x40021000
 80047f8:	48000400 	.word	0x48000400

080047fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08c      	sub	sp, #48	; 0x30
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800480c:	2200      	movs	r2, #0
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	201c      	movs	r0, #28
 8004812:	f7fc fdbf 	bl	8001394 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8004816:	201c      	movs	r0, #28
 8004818:	f7fc fdd8 	bl	80013cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_InitTick+0xa4>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <HAL_InitTick+0xa4>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	61d3      	str	r3, [r2, #28]
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_InitTick+0xa4>)
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004834:	f107 0210 	add.w	r2, r7, #16
 8004838:	f107 0314 	add.w	r3, r7, #20
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe f8be 	bl	80029c0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004844:	f7fe f89a 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8004848:	4603      	mov	r3, r0
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <HAL_InitTick+0xa8>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	0c9b      	lsrs	r3, r3, #18
 8004858:	3b01      	subs	r3, #1
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_InitTick+0xac>)
 800485e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004862:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8004864:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <HAL_InitTick+0xac>)
 8004866:	f240 32e7 	movw	r2, #999	; 0x3e7
 800486a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800486c:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <HAL_InitTick+0xac>)
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <HAL_InitTick+0xac>)
 8004874:	2200      	movs	r2, #0
 8004876:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_InitTick+0xac>)
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800487e:	480a      	ldr	r0, [pc, #40]	; (80048a8 <HAL_InitTick+0xac>)
 8004880:	f7fe fa62 	bl	8002d48 <HAL_TIM_Base_Init>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800488a:	4807      	ldr	r0, [pc, #28]	; (80048a8 <HAL_InitTick+0xac>)
 800488c:	f7fe fa92 	bl	8002db4 <HAL_TIM_Base_Start_IT>
 8004890:	4603      	mov	r3, r0
 8004892:	e000      	b.n	8004896 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
}
 8004896:	4618      	mov	r0, r3
 8004898:	3730      	adds	r7, #48	; 0x30
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	431bde83 	.word	0x431bde83
 80048a8:	20000dc8 	.word	0x20000dc8

080048ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048b0:	bf00      	nop
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ba:	b480      	push	{r7}
 80048bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048be:	e7fe      	b.n	80048be <HardFault_Handler+0x4>

080048c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048c4:	e7fe      	b.n	80048c4 <MemManage_Handler+0x4>

080048c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048c6:	b480      	push	{r7}
 80048c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048ca:	e7fe      	b.n	80048ca <BusFault_Handler+0x4>

080048cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048d0:	e7fe      	b.n	80048d0 <UsageFault_Handler+0x4>

080048d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048d2:	b480      	push	{r7}
 80048d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX and USB high priority interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80048e4:	4802      	ldr	r0, [pc, #8]	; (80048f0 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80048e6:	f7fc fa69 	bl	8000dbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000430 	.word	0x20000430

080048f4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80048f8:	4802      	ldr	r0, [pc, #8]	; (8004904 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80048fa:	f7fc fa5f 	bl	8000dbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000430 	.word	0x20000430

08004908 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800490c:	4802      	ldr	r0, [pc, #8]	; (8004918 <CAN_RX1_IRQHandler+0x10>)
 800490e:	f7fc fa55 	bl	8000dbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8004912:	bf00      	nop
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000430 	.word	0x20000430

0800491c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004920:	4802      	ldr	r0, [pc, #8]	; (800492c <TIM2_IRQHandler+0x10>)
 8004922:	f7fe fa71 	bl	8002e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000dc8 	.word	0x20000dc8

08004930 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <SystemInit+0x28>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	4a07      	ldr	r2, [pc, #28]	; (8004958 <SystemInit+0x28>)
 800493c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <SystemInit+0x28>)
 8004946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800494a:	609a      	str	r2, [r3, #8]
#endif
}
 800494c:	bf00      	nop
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4e0d      	ldr	r6, [pc, #52]	; (8004994 <__libc_init_array+0x38>)
 8004960:	4c0d      	ldr	r4, [pc, #52]	; (8004998 <__libc_init_array+0x3c>)
 8004962:	1ba4      	subs	r4, r4, r6
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	2500      	movs	r5, #0
 8004968:	42a5      	cmp	r5, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	4e0b      	ldr	r6, [pc, #44]	; (800499c <__libc_init_array+0x40>)
 800496e:	4c0c      	ldr	r4, [pc, #48]	; (80049a0 <__libc_init_array+0x44>)
 8004970:	f000 f820 	bl	80049b4 <_init>
 8004974:	1ba4      	subs	r4, r4, r6
 8004976:	10a4      	asrs	r4, r4, #2
 8004978:	2500      	movs	r5, #0
 800497a:	42a5      	cmp	r5, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004984:	4798      	blx	r3
 8004986:	3501      	adds	r5, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800498e:	4798      	blx	r3
 8004990:	3501      	adds	r5, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08004aa8 	.word	0x08004aa8
 8004998:	08004aa8 	.word	0x08004aa8
 800499c:	08004aa8 	.word	0x08004aa8
 80049a0:	08004aac 	.word	0x08004aac

080049a4 <memset>:
 80049a4:	4402      	add	r2, r0
 80049a6:	4603      	mov	r3, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	f803 1b01 	strb.w	r1, [r3], #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <_init>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	bf00      	nop
 80049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ba:	bc08      	pop	{r3}
 80049bc:	469e      	mov	lr, r3
 80049be:	4770      	bx	lr

080049c0 <_fini>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr
