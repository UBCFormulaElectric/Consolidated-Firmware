SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_VERSION 1)
cmake_minimum_required(VERSION 3.10)

# Target-platform specific settings
if("${PLATFORM}" STREQUAL "x86")
    # We assume this cmake is running on a x86 platform, so the 
    # default compiler settings should be fine
    PROJECT(FORMULA_ELECTRIC_FIRMWARE C CXX)
elseif("${PLATFORM}" STREQUAL "arm")
    SET(CMAKE_C_COMPILER_WORKS 1)
    SET(TOOLCHAIN_PREFIX arm-none-eabi-)
    SET(CMAKE_ASM_COMPILER  ${TOOLCHAIN_PREFIX}gcc)
    SET(CMAKE_OBJCOPY ${TOOLCHAIN_PREFIX}objcopy)
    SET(CMAKE_OBJDUMP ${TOOLCHAIN_PREFIX}objdump)
    SET(SIZE ${TOOLCHAIN_PREFIX}size)

    SET(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}gcc)

    PROJECT(FORMULA_ELECTRIC_FIRMWARE C ASM)
else()
    message(FATAL_ERROR
        "ERROR: Please set the PLATFORM variable to 'x86' or 'arm'.")
endif()
message("Platform: ${PLATFORM}")

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

# Shared code global to all boards
add_subdirectory(${PROJECT_SOURCE_DIR}/shared __shared__)

# Globally Accessible Flags
SET(FPU_FLAGS
    -mcpu=cortex-m4 
    -mfloat-abi=hard 
    -mfpu=fpv4-sp-d16
    )

# Shared static libraries
add_subdirectory("${PROJECT_SOURCE_DIR}/../lib" 
                 "${CMAKE_CURRENT_BINARY_DIR}/__lib__")

# Globally Accesible executables/scripts
if(NOT STM32CUBEMX_BIN_PATH)
    # Default STM32CubeMX path
    if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
        set(STM32CUBEMX_BIN_PATH "C:/Program Files (x86)/STMicroelectronics/STM32Cube/STM32CubeMX/STM32CubeMX.exe")
    else()
        set(STM32CUBEMX_BIN_PATH /usr/local/STM32CubeMX/STM32CubeMX)
    endif()
endif()
SET(GENERATE_CUBE_CODE_SCRIPT_PY ${CMAKE_SOURCE_DIR}/../scripts/utilities/generate_cube_code.py)
SET(FIX_FORMATTING_SCRIPT_PY ${CMAKE_SOURCE_DIR}/../clang-format/fix_formatting.py)

# Globally Accessible files
SET(DBC_FILE ${CMAKE_SOURCE_DIR}/shared/CAN/CanMsgs.dbc)

# Generates code from the given IOC_FILE in the directory where this 
# function is called from
function(cube_mx_code_generation IOC_FILE)
    # Automatically re-generate STM32CubeMX code from the .ioc file
    # Also re-run clang-format because the STM32CubeMX-generated code 
    # is not compliant to our clang-format rules.
    # We create a MD5 hash here of the .ioc file for other targets to depend 
    # on so that these files only get re-generated when the IOC file changes.
    add_custom_command(
        OUTPUT ${IOC_FILE}.md5
        COMMAND pipenv run python 
            ${CMAKE_SOURCE_DIR}/../../scripts/utilities/generate_cube_code.py
            DCM
            ${IOC_FILE}
            ${CMAKE_CURRENT_SOURCE_DIR}
            ${STM32CUBEMX_BIN_PATH}
        COMMAND pipenv run python 
            ${CMAKE_CURRENT_SOURCE_DIR}/../../clang-format/fix_formatting.py
            WORKING_DIRECTORY 
            ${CMAKE_CURRENT_SOURCE_DIR}
        )
endfunction()

# Generate C code to store the Git hash in read-only memory
# Code will be generated in the directory that this function was called from
function(git_hash_code_generation GIT_HASH_HEADER)
    add_custom_command( 
        COMMAND
            echo "#define GIT_HASH $(git rev-parse head)" > ${GIT_HASH_HEADER}
        OUTPUT "${GIT_HASH_HEADER}"
        )
endfunction()

# Creates the unit tests. This should only be called if compiling for x86
# TODO: full comment here when this is implemented
function(create_state_machine_tests)
    # TODO
endfunction()

# Create the arm binary executable that can be flashed to a board
#   BOARD_NAME - The name of the board. This will be used to name the executable
#   ARM_BINARY_SRCS - Src files that we own/create for the created arm binary
#   ARM_BINARY_INCLUDE_DIRS - Include directories that we own/create for the
#                             created arm binary
#   STM32CUBEMX_DRIVER_SRCS - Src files for the driver/middleware code generated
#                             by CubeMX
#   STM32CUBEMX_DRIVER_INCLUDE_DIRS - Include directories for the driver/
#                                     middleware code generated by CubeMX
function(create_arm_binary 
            BOARD_NAME
            ARM_BINARY_SRCS
            ARM_BINARY_INCLUDE_DIRS
            STM32CUBEMX_DRIVER_SRCS 
            STM32CUBEMX_DRIVER_INCLUDE_DIRS
            LINKER_SCRIPT
            )
    add_executable(${BOARD_NAME}.elf 
        ${ARM_BINARY_SRCS} 
        ${STM32CUBEMX_DRIVER_SRCS} 
        ${SHARED_SRCS} 
        ${BOARD_NAME}.ioc.md5 
        ${GIT_HASH_AUTOGENERATED_SRC} 
        ${AUTOGENERATED_CAN_SRCS}
        )
    target_include_directories(${BOARD_NAME}.elf 
        PRIVATE
            ${LIB_INCLUDE_DIRS}
            ${ARM_BINARY_INCLUDE_DIRS}
            ${SHARED_INCLUDE_DIRS}
            ${AUTOGENERATED_CAN_INCLUDE_DIRS}
        )
    # Suppress header file warnings for STM32CubeMX drivers by marking them as 
    # system includes
    target_include_directories(${BOARD_NAME}.elf SYSTEM
        PRIVATE
            ${STM32CUBEMX_DRIVER_INCLUDE_DIRS}
        )
    # Suppress source file warnings for STM32CubeMX drivers
    set_source_files_properties(${STM32CUBEMX_DRIVER_SRCS} 
        PROPERTIES COMPILE_FLAGS "-w") 
    target_link_libraries(${BOARD_NAME}.elf SEGGER_RTT)
    target_compile_definitions(${BOARD_NAME}.elf
        PRIVATE
            -D__weak=__attribute__\(\(weak\)\) 
            -D__packed=__attribute__\(\(__packed__\)\) 
            -DUSE_HAL_DRIVER 
            -DSTM32F302x8
            -DARM_MATH_CM4 
            -DARM_MATH_MATRIX_CHECK 
            -DARM_MATH_ROUNDING
        )
    target_compile_options(${BOARD_NAME}.elf
        PUBLIC
            ${FPU_FLAGS}
            -mthumb 
            -mthumb-interwork 
            -ffunction-sections 
            -fdata-sections
            -g 
            -fno-common 
            -fmessage-length=0 
            -Wall 
            -Werror 
            -Wextra -pedantic 
            -specs=nosys.specs 
            -specs=nano.specs
        )

    target_link_libraries(${BOARD_NAME}.elf
        "-Wl,-Map=${PROJECT_BINARY_DIR}/${BOARD_NAME}.map"
        "-Wl,-gc-sections,--print-memory-usage"
        "-Wl,-T ${LINKER_SCRIPT}"
        ${FPU_FLAGS}
        )

    set(HEX_FILE ${PROJECT_BINARY_DIR}/${BOARD_NAME}.hex)
    set(BIN_FILE ${PROJECT_BINARY_DIR}/${BOARD_NAME}.bin)
    set(ASM_FILE ${PROJECT_BINARY_DIR}/${BOARD_NAME}.asm)
    
    add_custom_command(TARGET ${BOARD_NAME}.elf POST_BUILD
        COMMAND ${CMAKE_OBJCOPY} 
                -Oihex $<TARGET_FILE:${BOARD_NAME}.elf> ${HEX_FILE}
        COMMAND ${CMAKE_OBJCOPY} 
                -Obinary $<TARGET_FILE:${BOARD_NAME}.elf> ${BIN_FILE}
        COMMAND ${CMAKE_OBJDUMP} 
                -DS $<TARGET_FILE:${BOARD_NAME}.elf> > ${ASM_FILE}
        COMMENT "
                Building ${HEX_FILE}
                Building ${BIN_FILE}
                Building ${ASM_FILE}")
endfunction()

# Generate C code for sending/receiving CAN messages
#   BOARD_NAME - The name of the board we're generating CAN code for
#   BOARD_SPECIFIC_AUTOGENERATED_SRC_DIR - The folder to place board-specific 
#                                          generated source files in
#   BOARD_SPECIFIC_AUTOGENERATED_INCLUDE_DIR - The folder to place 
#                                              board-specific generated header 
#                                              files in
#   SHARED_AUTOGENERATED_SRC_DIR - The folder to place shared generated source 
#                                  files in
#   SHARED_AUTOGENERATED_INCLUDE_DIR - The folder to place shared generated 
#                                      source files in
#   APP_CANTX_SRC_FILE - The path for for App layer generated CAN TX code file
#   APP_CANRX_SRC_FILE - The path for for App layer generated CAN RX code file
#   CANMSGS_SRC - The path for the generated code for the DBC
function(can_code_generation
            BOARD_NAME
            BOARD_SPECIFIC_AUTOGENERATED_INCLUDE_DIR
            BOARD_SPECIFIC_AUTOGENERATED_SRC_DIR
            SHARED_AUTOGENERATED_INCLUDE_DIR
            SHARED_AUTOGENERATED_SRC_DIR
            APP_CANTX_SRC_FILE
            APP_CANRX_SRC_FILE
            CANMSGS_SRC
            )

    # Generate CAN code using DBC
    SET(CANMSGS_AUTOGENERATED_SRCS 
        ${APP_CANTX_SRC}
        ${APP_CANRX_SRC}
        ${CANMSGS_SRC}
        )
    add_custom_command(
        OUTPUT ${CANMSGS_AUTOGENERATED_SRCS}
        COMMAND pipenv run python 
                ${CMAKE_SOURCE_DIR}/shared/CAN/generate_c_code_from_dbc.py
                ${BOARD_NAME}
                ${BOARD_SPECIFIC_AUTOGENERATED_SRC_DIR}
                ${BOARD_SPECIFIC_AUTOGENERATED_INCLUDE_DIR}
                ${SHARED_AUTOGENERATED_SRC_DIR}
                ${SHARED_AUTOGENERATED_INCLUDE_DIR}
                ${DBC_FILE}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        DEPENDS ${DBC_FILE}
        )
endfunction()

# Creates the arm binary or tests for a board, depending on what CPU architecture
# this is being compiled for.
#   BOARD_NAME - The name of the board, will be used to name the binary or tests
#   IOC_FILE - The IOC file for the board
#   ARM_BINARY_SRCS - Source files to include in the Arm binary
#   ARM_BINARY_INCLUDE_DIRS - Include directories for the Arm binary
#   STM32CUBEMX_DRIVER_SRCS - Drivers/middleware source files generated by CubeMX
#   STM32CUBEMX_DRIVER_INCLUDE_DIRS - Include directories for driver/middleware
#                                     files generated by CubeMX
function(create_arm_binary_or_tests_for_board 
            BOARD_NAME
            IOC_FILE 
            ARM_BINARY_SRCS
            ARM_BINARY_INCLUDE_DIRS
            STM32CUBEMX_DRIVER_SRCS 
            STM32CUBEMX_DRIVER_INCLUDE_DIRS
            LINKER_SCRIPT
            )
    # Construct the paths for the generated CAN code
    SET(APP_CAN_RX_SRC_FILE_NAME "App_CanRx.c")
    SET(APP_CAN_TX_SRC_FILE_NAME "App_CanTx.c")
    SET(SHARED_CANMSGS_SRC_FILE_NAME "CanMsgs.c")

    SET(BOARD_SPECIFIC_AUTOGENERATED_INCLUDE_DIR
        "${CMAKE_CURRENT_SOURCE_DIR}/Inc/auto_generated")
    SET(BOARD_SPECIFIC_AUTOGENERATED_SRC_DIR
        "${CMAKE_CURRENT_SOURCE_DIR}/Src/auto_generated")
    SET(SHARED_AUTOGENERATED_INCLUDE_DIR
        "${CMAKE_CURRENT_SOURCE_DIR}/shared/CAN/auto_generated")
    SET(SHARED_AUTOGENERATED_SRC_DIR
        "${CMAKE_CURRENT_SOURCE_DIR}/shared/CAN/auto_generated")

    SET(APP_CAN_RX_SRC_FILE 
        "${BOARD_SPECIFIC_AUTOGENERATED_SRC_DIR}/${APP_CAN_RX_SRC_FILE_NAME}")
    SET(APP_CAN_TX_SRC_FILE 
        "${BOARD_SPECIFIC_AUTOGENERATED_SRC_DIR}/${APP_CAN_TX_SRC_FILE_NAME}")
    SET(APP_CAN_MSGS_SRC_FILE
        "${SHARED_AUTOGENERATED_SRC_DIR}/${SHARED_CANMSGS_SRC_FILE_NAME}")

    SET(AUTOGENERATED_CAN_SRCS
        "${APP_CAN_RX_SRC_FILE}"
        "${APP_CAN_TX_SRC_FILE}"
        "${APP_CAN_MSGS_SRC_FILE}"
        )
    SET(AUTOGENERATED_CAN_INCLUDE_DIRS
        "${BOARD_SPECIFIC_AUTOGENERATED_INCLUDE_DIR}"
        "${SHARED_AUTOGENERATED_INCLUDE_DIR}"
        )

    list(APPEND "${ARM_BINARY_SRCS}" 
        "${AUTOGENERATED_CAN_SRCS}")
    list(APPEND "${ARM_BINARY_INCLUDE_DIRS}" 
        "${AUTOGENERATED_CAN_INCLUDE_DIRS}")

    SET(GIT_HASH_HEADER "${CMAKE_CURRENT_SOURCE_DIR}/Inc/git_hash.h")
    git_hash_code_generation(${GIT_HASH_HEADER})

    can_code_generation(
        "${BOARD_NAME}"
        "${BOARD_SPECIFIC_AUTOGENERATED_INCLUDE_DIR}"
        "${BOARD_SPECIFIC_AUTOGENERATED_SRC_DIR}"
        "${SHARED_AUTOGENERATED_INCLUDE_DIR}"
        "${SHARED_AUTOGENERATED_SRC_DIR}"
        "${APP_CAN_RX_SRC_FILE}"
        "${APP_CAN_TX_SRC_FILE}"
        "${APP_CAN_MSGS_SRC_FILE}"
        )

    if ("${PLATFORM}" STREQUAL "x86")
        create_state_machine_tests()
    elseif("${PLATFORM}" STREQUAL "arm")
        cube_mx_code_generation("${IOC_FILE}")
        create_arm_binary(
            "${BOARD_NAME}"
            "${ARM_BINARY_SRCS}"
            "${ARM_BINARY_INCLUDE_DIRS}"
            "${STM32CUBEMX_DRIVER_SRCS}"
            "${STM32CUBEMX_DRIVER_INCLUDE_DIRS}"
            "${LINKER_SCRIPT}"
            )
    endif()

endfunction()

add_subdirectory(DCM)
add_subdirectory(PDM)
add_subdirectory(FSM)
add_subdirectory(BMS)
