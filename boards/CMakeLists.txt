SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_VERSION 1)
cmake_minimum_required(VERSION 3.10)

if("${PLATFORM}" STREQUAL "x86")
    # We assume this cmake is running on a x86 platform, so the 
    # default compiler settings should be fine
    PROJECT(FORMULA_ELECTRIC_FIRMWARE CXX)
elseif("${PLATFORM}" STREQUAL "arm")
    # TODO: switch out compilers here
    # specify cross compilers and tools
    SET(CMAKE_C_COMPILER_WORKS 1)
    SET(CMAKE_C_COMPILER arm-none-eabi-gcc)
    set(CMAKE_ASM_COMPILER  arm-none-eabi-gcc)
    set(CMAKE_OBJCOPY arm-none-eabi-objcopy)
    set(CMAKE_OBJDUMP arm-none-eabi-objdump)
    set(SIZE arm-none-eabi-size)
    PROJECT(FORMULA_ELECTRIC_FIRMWARE C ASM)
else()
    message(FATAL_ERROR
        "ERROR: Please set the PLATFORM variable to 'x86' or 'arm'.")
endif()
message("Platform: ${PLATFORM}")

# TODO: comment here
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

# Shared code global to all boards
add_subdirectory(${PROJECT_SOURCE_DIR}/shared __shared__)

# Shared static libraries
add_subdirectory("${PROJECT_SOURCE_DIR}/../lib" 
                 "${CMAKE_CURRENT_BINARY_DIR}/__lib__")

# Globally Accesible executables/scripts
if(NOT STM32CUBEMX_BIN_PATH)
    # Default STM32CubeMX path
    if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
        set(STM32CUBEMX_BIN_PATH "C:/Program Files (x86)/STMicroelectronics/STM32Cube/STM32CubeMX/STM32CubeMX.exe")
    else()
        set(STM32CUBEMX_BIN_PATH /usr/local/STM32CubeMX/STM32CubeMX)
    endif()
endif()
SET(GENERATE_CUBE_CODE_SCRIPT_PY ${CMAKE_SOURCE_DIR}/../scripts/utilities/generate_cube_code.py)
SET(FIX_FORMATTING_SCRIPT_PY ${CMAKE_SOURCE_DIR}/../clang-format/fix_formatting.py)

# Globally Accesible files
SET(DBC_FILE ${CMAKE_SOURCE_DIR}/shared/CAN/CanMsgs.dbc)

# TODO -  full jdoc comment
function(cube_mx_code_generation IOC_FILE)
    # Automatically re-generate STM32CubeMX code from the .ioc file
    # Also re-run clang-format because the STM32CubeMX-generated code 
    # is not compliant to our clang-format rules.
    # We create a MD5 hash here of the .ioc file for other targets to depend 
    # on so that these files only get re-generated when the IOC file changes.
    add_custom_command(
        OUTPUT ${IOC_FILE}.md5
        COMMAND pipenv run python 
            ${CMAKE_SOURCE_DIR}/../../scripts/utilities/generate_cube_code.py
            DCM
            ${IOC_FILE}
            ${CMAKE_SOURCE_DIR}
            ${STM32CUBEMX_BIN_PATH}
        COMMAND pipenv run python 
            ${CMAKE_SOURCE_DIR}/../../clang-format/fix_formatting.py
            WORKING_DIRECTORY 
            ${CMAKE_SOURCE_DIR}
        )
endfunction()

# Generate C code to store the Git hash in read-only memory
# TODO -  full jdoc comment
function(git_hash_code_generation GIT_HASH_HEADER)
    add_custom_command( 
        COMMAND
            echo "#define GIT_HASH $(git rev-parse head)" > ${GIT_HASH_HEADER}
        OUTPUT "${GIT_HASH_HEADER}"
        )
endfunction()

# TODO -  full jdoc comment
function(create_state_machine_tests)
    # TODO
endfunction()

# TODO -  full jdoc comment
function(create_arm_binary 
            BOARD_NAME
            ARM_BINARY_SRCS
            ARM_BINARY_INCLUDE_DIRS
            STM32CUBEMX_DRIVER_SRCS 
            STM32CUBEMX_DRIVER_INCLUDE_DIRS
            )
    # Suppress source file warnings for STM32CubeMX drivers using -w compiler 
    # flag
    set_source_files_properties(${STM32CUBEMX_DRIVER_SRCS} 
        PROPERTIES COMPILE_FLAGS "-w") 
    add_executable(${BOARD_NAME}.elf 
        ${SOURCES} 
        ${STM32CUBEMX_DRIVER_SRCS} 
        ${SHARED_SRCS} 
        ${CANMSGS_AUTOGENERATED_SRCS} 
        ${IOC}.md5 
        ${GIT_HASH_AUTOGENERATED_SRC} 
        ${LINKER_SCRIPT}
        )
    message("Lib include dirs: ${LIB_INCLUDE_DIRS}")
    message("Arm binary includes: ${ARM_BINARY_INCLUDE_DIRS}")
    target_include_directories(${BOARD_NAME}.elf
        "${LIB_INCLUDE_DIRS}"
        "${ARM_BINARY_INCLUDE_DIRS}"
        )
    # Suppress header file warnings for STM32CubeMX drivers by marking them as 
    # SYSTEM includes
    target_include_directories(${BOARD_NAME}.elf SYSTEM
        ${STM32CUBEMX_DRIVER_INCLUDE_DIRS}
        )
    target_link_libraries(${BOARD_NAME}.elf SEGGER_RTT)

    # TODO: where is this map file even coming from??
    target_link_libraries(${BOARD_NAME}.elf
        "-Wl,-Map=${PROJECT_BINARY_DIR}/${BOARD_NAME}.map"
        )
    
    set(HEX_FILE ${PROJECT_BINARY_DIR}/${BOARD_NAME}.hex)
    set(BIN_FILE ${PROJECT_BINARY_DIR}/${BOARD_NAME}.bin)
    set(ASM_FILE ${PROJECT_BINARY_DIR}/${BOARD_NAME}.asm)
    
    add_custom_command(TARGET ${BOARD_NAME}.elf POST_BUILD
        COMMAND ${CMAKE_OBJCOPY} 
                -Oihex $<TARGET_FILE:${BOARD_NAME}.elf> ${HEX_FILE}
        COMMAND ${CMAKE_OBJCOPY} 
                -Obinary $<TARGET_FILE:${BOARD_NAME}.elf> ${BIN_FILE}
        COMMAND ${CMAKE_OBJDUMP} 
                -DS $<TARGET_FILE:${BOARD_NAME}.elf> > ${ASM_FILE}
        COMMENT "
                Building ${HEX_FILE}
                Building ${BIN_FILE}
                Building ${ASM_FILE}")
endfunction()

# Generate C code for sending/receiving CAN messages
# TODO: full jdoc here
function(can_code_generation)
    # Generate CAN code using DBC
    SET(CANMSGS_AUTOGENERATED_SRCS 
        ${CMAKE_SOURCE_DIR}/auto_generated/Src/App_CanTx.c
        ${CMAKE_SOURCE_DIR}/auto_generated/Src/App_CanRx.c
        ${CMAKE_SOURCE_DIR}/shared/CAN/auto_generated/CanMsgs.c)
    add_custom_command(
        OUTPUT ${CANMSGS_AUTOGENERATED_SRCS}
        COMMAND pipenv run python 
                ${CMAKE_SOURCE_DIR}/shared/CAN/generate_c_code_from_dbc.py
                DCM
                ${CMAKE_SOURCE_DIR}/auto_generated/Src/
                ${CMAKE_SOURCE_DIR}/auto_generated/Inc/
                ${CMAKE_SOURCE_DIR}/shared/CAN/auto_generated/
                ${CMAKE_SOURCE_DIR}/shared/CAN/auto_generated/
                ${DBC}
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        DEPENDS ${DBC})


endfunction()

# TODO -  full jdoc comment
function(board_specific_code_generation 
            BOARD_NAME
            IOC_FILE 
            GIT_HASH_HEADER
            ARM_BINARY_SRCS
            ARM_BINARY_INCLUDE_DIRS
            STM32CUBEMX_DRIVER_SRCS 
            STM32CUBEMX_DRIVER_INCLUDE_DIRS
            )

    git_hash_code_generation(${GIT_HASH_HEADER})

    if ("${PLATFORM}" STREQUAL "x86")
        create_state_machine_tests()
    elseif("${PLATFORM}" STREQUAL "arm")
        cube_mx_code_generation("${IOC_FILE}")
        create_arm_binary(
            "${BOARD_NAME}"
            "${ARM_BINARY_SRCS}"
            "${ARM_BINARY_INCLUDE_DIRS}"
            "${STM32CUBEMX_DRIVER_SRCS}"
            "${STM32CUBEMX_DRIVER_INCLUDE_DIRS}"
            )
    endif()

endfunction()

add_subdirectory(DCM)
