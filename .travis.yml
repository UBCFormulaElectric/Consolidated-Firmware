#l Note: Setting `sudo` to `required` will add 20-50s to CI image boot time
os:
  linux

sudo: false
dist: trusty
language: python

python:
  - "3.6"

before_install:
  - git submodule update --init --recursive
  - pip install pipenv

install:
  - pipenv install
  - |
    if [ "$RUN_BUILD" = "true" ] || [ "$RUN_TESTS" = "true" ]; then 
      # Download the latest ARM GCC Embedded Toolchain.
      # Unfortunately, since this is a literal URL, it does not pull the latest 
      # API available, and the URL must be changed manually. 
      # TO CHANGE THE URL:
      # Go to https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads
      # and download the latest GCC ARM-target compiler and then search up 
      # the downloads page of your browser.
      # There is usually a web address that's hosting the GCC binary/tar. 
      wget https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2 -O /tmp/gcc-arm-none-eabi.tar.bz2
      # Unzip the ARM GCC Embedded Toolchain 
      tar -xvjf /tmp/gcc-arm-none-eabi.tar.bz2
      # Enable cmake to find the arm-none-eabi-gcc command
      export PATH=$PATH:$PWD/gcc-arm-none-eabi-7-2018-q2-update/bin/
    fi

addons:
  apt_packages:
    - lib32bz2-1.0
    - lib32ncurses5
    - lib32z1

before_script:

script:
    # If any command exits with a non-zero value (i.e. it throws an error)
    # then this will cause travis to exit. Commands encapsulated between 
    # conditionals, for example, do not report their return codes. Instead,
    # only the conditional, a command itself, gets polled, so if cmake or 
    # python throws an error, the information is lost. set -ev ensures that
    # this does not happen
    - set -ev

    - |
      if [ "$RUN_BUILD" = "true" ]; then 
        # NOTE: We run `cmake` in pipenv so that we can succesfully use the
        # python script that generates CMake `.c` and `.h` dependencies in it
        pipenv run cmake src/CMakeLists.txt
        make -C src/
      fi
    - |
      if [ "$RUN_TESTS" = "true" ]; then 
        cmake -DTEST_BUILD=true src/CMakeLists.txt
        make -C src/
        ctest -C DEBUG --build-run-dir Src
      fi
    - |
      if [ "$RUN_FORMATTING_CHECKS" = "true" ]; then
            # Run clang-format recursively
            echo "Y" | python clang-format/fix_formatting.py;
            # Check if there is any difference
            CHANGED_FILES=(`git diff --name-only`)
            if [ "$CHANGED_FILES" ]; then
                echo ""
                echo "#########################"
                echo "FAILED - Git diff was non-zero!"
                echo "Run clang_format/fix_formatting.py to format your code properly:"
                echo ""
                echo $CHANGED_FILES
                echo "#########################"
                echo ""
                return 1;
            else
                echo "PASSED - Code is correctly formatted!"
            fi
      fi
    - |
      if [ "$GENERATE_CODE_FROM_SYM" = "true" ]; then 
            # Try to convert the .sym to C code
            pipenv run python src/shared/CanMsgs/generate_c_code_from_sym.py;
            # Check if there is any difference
            CHANGED_FILES=(`git diff --name-only`)
            if [ "$CHANGED_FILES" ]; then
                echo ""
                echo "#########################"
                echo "FAILED - Git diff was non-zero!"
                echo "Make sure to update your version of cantools using pipenv,"
                echo "and re-run generate_c_code_from_sym.py to generate C code from the .sym file:"
                echo ""
                echo $CHANGED_FILES
                echo "#########################"
                echo ""
                return 1;
            else
                echo "PASSED - C code generated from .sym looks good!"
            fi
      fi

matrix:
    include:
        - name: "Build and Run Tests"
          env: RUN_BUILD="true" RUN_TESTS="true"
        - name: "Check Formatting"
          env: RUN_FORMATTING_CHECKS="true"
        - name: "Check C Code Generation From .sym"
          env: GENERATE_CODE_FROM_SYM="true"
