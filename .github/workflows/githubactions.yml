name: UBC Formula Electric CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  format:
    name: Check Formatting
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Install pipenv
        run: pip3 install pipenv==2022.1.8

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          cache: pipenv
          cache-dependency-path: Pipfile.lock
        
      - name: Install dependencies
        run: pipenv install --deploy
      
      - name: Format code
        run: python clang-format/fix_formatting.py

      - name: Check for differences
        run: git --no-pager diff --color --exit-code

  codegen:
    name: Check CubeMX Code Gen
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        board:
          - FSM
          - PDM
          - BMS
          - DCM
          - DIM
          - GSM
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      
      - name: Install pipenv
        run: pip3 install pipenv==2022.1.8

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          cache: pipenv
          cache-dependency-path: Pipfile.lock

      - name: Install dependencies
        run: pipenv install --deploy

      - name: Setup XVFB
        run: |
          sudo cp ./scripts/environment_setup/xvfb.service /etc/systemd/system/xvfb.service
          sudo systemctl start xvfb

      # This should eventually be cached, but cannot be due to file permission issues
      # https://github.com/actions/toolkit/issues/946
      - name: Install STM32CubeMX
        run: pipenv run python scripts/environment_setup/install_cube.py ~/.local/STM32CubeMX ./tools/en.STM32CubeMX_v5-3-0.zip

      - name: Generate code
        env:
          DISPLAY: :99.0
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python scripts/utilities/generate_cube_code.py \
            --board ${{ matrix.board }} \
            --log4j_properties_output ~/.stm32cubemx/log4j.properties \
            --ioc boards/${{ matrix.board }}/${{ matrix.board }}.ioc \
            --codegen_output_dir boards/${{ matrix.board }} \
            --cube_bin ~/.local/STM32CubeMX/STM32CubeMX
          python clang-format/fix_formatting.py
      
      - name: Check for differences
        run: git --no-pager diff --color --exit-code

  tests:
    name: Build and Run x86 Tests
    runs-on: ubuntu-18.04
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      BUILD_DIR: boards/x86_build_release
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: recursive
      
      - name: Install pipenv
        run: pip3 install pipenv==2022.1.8

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          cache: pipenv
          cache-dependency-path: Pipfile.lock

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y ccache valgrind
          pipenv install --deploy

      - name: Setup CCache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-test-${{ github.run_id }}
          restore-keys: |
            ccache-test-

      - name: Build
        run: |
          sudo /usr/sbin/update-ccache-symlinks
          export PATH="/usr/lib/ccache:$PATH"
          cmake -S boards -B $BUILD_DIR -DPLATFORM=x86 -DCMAKE_BUILD_TYPE=Release
          make --directory=$BUILD_DIR -j2

      - name: Run tests
        run: |
          cd $BUILD_DIR
          ctest -T memcheck --verbose
          cd -

      - name: Check CCache statistics
        run: ccache -s

  build:
    name: Build ARM Executables
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        board:
          - FSM
          - PDM
          - BMS
          - DCM
          - DIM
          - GSM
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      BUILD_DIR: boards/arm_build
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: recursive
      
      - name: Install pipenv
        run: pip3 install pipenv==2022.1.8

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          cache: pipenv
          cache-dependency-path: Pipfile.lock

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y ccache valgrind
          pipenv install --deploy

      - name: Setup XVFB
        run: |
          sudo cp ./scripts/environment_setup/xvfb.service /etc/systemd/system/xvfb.service
          sudo systemctl start xvfb

      # This should eventually be cached, but cannot be due to file permission issues
      # https://github.com/actions/toolkit/issues/946
      - name: Install STM32CubeMX
        run: pipenv run sudo python scripts/environment_setup/install_cube.py /usr/local/STM32CubeMX ./tools/en.STM32CubeMX_v5-3-0.zip

      - name: Setup CCache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.board }}-build-${{ github.run_id }}
          restore-keys: |
            ccache-${{ matrix.board }}-build-

      - name: Install ARM GCC
        env:
          # Unfortunately, the download link is a literal URL which means it does not
          # pull the latest version automatically.
          #
          # To change the download link:
          # 1. Go to https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads
          # 2. Right-click and save the link to download the Linux 64-bit version
          URL: https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2019q4/RC2.1/gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.bz2?revision=6e63531f-8cb1-40b9-bbfc-8a57cdfc01b4&la=en&hash=F761343D43A0587E8AC0925B723C04DBFB848339
        run: |
          TMPFILE=$(mktemp --tmpdir gcc-arm-none-eabi.XXXXXXXX.tar.bz2)
          wget -q "$URL" -O "$TMPFILE"
          mkdir -p $HOME/.local
          tar -xjf "$TMPFILE" -C $HOME/.local --strip 1
          rm $TMPFILE

      - name: Build
        env:
          DISPLAY: :99.0
          PYTHONPATH: ${{ github.workspace }}
        run: |
          sudo /usr/sbin/update-ccache-symlinks
          export PATH="/usr/lib/ccache:$HOME/.local/bin:$PATH"
          cmake -S boards -B $BUILD_DIR -DPLATFORM=arm
          make --directory=$BUILD_DIR -j2 ${{ matrix.board }}.elf
      
      - name: Save built artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.board }}.elf
          path: ${{ env.BUILD_DIR }}/${{ matrix.board }}/${{ matrix.board }}.elf

      - name: Upload statistics to series CI
        if: github.event_name == 'pull_request'
        env:
          MAX_RAM_SIZE: 40960
          MAX_FLASH_SIZE: 262144
          # For pull-request builds, we use ${{ github.event.pull_request.head.sha }}
          # to get the branch commit SHA
          GITHUB_ACTIONS_SHA: ${{ github.event.pull_request.head.sha }}
        run: ./scripts/ci/series_ci.sh ${{ matrix.board }} $BUILD_DIR/${{ matrix.board }}/${{ matrix.board }}.elf $GITHUB_ACTIONS_SHA $MAX_RAM_SIZE $MAX_FLASH_SIZE
      
      - name: Upload statistics to series CI
        if: github.event_name == 'push'
        env:
          MAX_RAM_SIZE: 40960
          MAX_FLASH_SIZE: 262144
          GITHUB_ACTIONS_SHA: ${{ github.sha }}
        run: ./scripts/ci/series_ci.sh ${{ matrix.board }} $BUILD_DIR/${{ matrix.board }}/${{ matrix.board }}.elf $GITHUB_ACTIONS_SHA $MAX_RAM_SIZE $MAX_FLASH_SIZE

      - name: Check CCache statistics
        run: ccache -s
