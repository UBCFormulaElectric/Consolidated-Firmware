services:
  influx:
    image: influxdb:2-alpine
    ports:
      # InfluxDB port is always 8086 internally
      - "${INFLUXDB_PORT}:8086"
    env_file: influx.env
    healthcheck:
      # Ping server every 30s in case something breaks.
      test: [ "CMD", "curl", "-f", "http://localhost:8086/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
      # Ping at higher frequency at startup since dependant containers don't start until this one passes health check.
      start_period: 10s
      start_interval: 1s
  live_data:
    build:
      context: ../../../
      dockerfile: software/tracksight/live_data/Dockerfile
    # Expose port from container
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    # Pass common envs into container
    environment:
      BACKEND_PORT: ${BACKEND_PORT}
      INFLUXDB_PORT: ${INFLUXDB_PORT}
    env_file: live_data.env
    # TODO test serial port
    # privileged: true
    volumes:
      - /dev:/dev
      - ../live_data:/live_data
    healthcheck:
      # Ping server every 30s in case something breaks.
      test: [ "CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/api/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
      # Ping at higher frequency at startup since dependant containers don't start until this one passes health check.
      start_period: 10s
      start_interval: 1s
    depends_on:
      influx:
        condition: service_healthy
  frontend:
    build: 
      context: ../../../
      dockerfile: software/tracksight/frontend/Dockerfile
    environment:
      FRONTEND_PORT: ${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    # depends_on:
    #   backend:
    #     condition: service_healthy
  # grafana:
  #   image: grafana/grafana-enterprise
  #   container_name: grafana
  #   restart: unless-stopped
  #   ports:
  #     - '3000:3000'