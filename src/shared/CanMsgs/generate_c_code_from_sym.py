"""
This file contains all the functionality required to generate C code from 
our .sym file
"""

import logging
import os
from re import sub
from cantools.database.can.c_source import generate
from cantools.database import load_file

# We assume that the SYM file is in the same directory
# as this script
SYM_DIR = os.path.dirname(os.path.abspath(__file__))

def purge_timestamps_from_generated_code(code: str) -> str:
    """
    Purges timestamps from the generated C code so that we can diff it in CI to 
    check that the generated C code is up-to-date with the .sym file
    """
    # Ex. replace: 
    # "This file was generated by cantools version 32.4.0 Wed Jan  9 21:29:43 2019."
    # with:
    # "This file was generated by cantools"
    return sub(
        r'(This\sfile\swas\sgenerated\sby\scantools)\sversion\s\d*\.\d*\.\d*\s.*',
        r'\1', code)

def change_frame_id_capitalization(code: str) -> str:
    """
    Sets the symbol name in the FRAME_ID constant to lowercase for all CAN 
    messages. This is done to allow us to reference both the constants and
    the associated function in C macros.
    """
    # Ex. replace: 
    # "CANMSGS_SYMBOL1_FRAME_ID"
    # with:
    # "CANMSGS_symbol1_FRAME_ID"
    return sub(
        r'CANMSGS_(.*)_FRAME_ID', 
        lambda match: r'CANMSGS_{}_FRAME_ID'.format(match.group(1).lower()),
        code)

def generate_code_from_sym_file(database_name):
    """
    Generates C source code for the given .sym file 
    """
    dbase = load_file(database_name + ".sym", database_format="sym")

    filename_h = database_name + '.h'
    filename_c = database_name + '.c'

    header, source, _, _ = generate(
            dbase, 
            database_name, 
            filename_h, 
            filename_c, 
            "", 
            floating_point_numbers=True,
            bit_fields=True
    )

    header = purge_timestamps_from_generated_code(header)
    source = purge_timestamps_from_generated_code(source)

    header = change_frame_id_capitalization(header)
    source = change_frame_id_capitalization(source)

    with open("Inc/" + filename_h, 'w') as fout:
        fout.write(header)

    with open("Src/" + filename_c, 'w') as fout:
        fout.write(source)

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    sym_filename = "CanMsgs"
    os.chdir(SYM_DIR)
    generate_code_from_sym_file(sym_filename)

