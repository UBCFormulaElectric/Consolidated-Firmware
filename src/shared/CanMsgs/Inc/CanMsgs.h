/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools
 */

#ifndef CANMSGS_H
#define CANMSGS_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

#define CANMSGS_fsm_errors_FRAME_ID (0x40u)
#define CANMSGS_fsm_can_tx_fifo_overflow_FRAME_ID (0x42u)
#define CANMSGS_fsm_startup_FRAME_ID (0x43u)
#define CANMSGS_fsm_air_shutdown_FRAME_ID (0x50u)
#define CANMSGS_pdm_air_shutdown_FRAME_ID (0x66u)
#define CANMSGS_pdm_motor_shutdown_FRAME_ID (0x67u)
#define CANMSGS_bms_startup_FRAME_ID (0x03u)
#define CANMSGS_pdm_errors_FRAME_ID (0x60u)
#define CANMSGS_pdm_can_tx_fifo_overflow_FRAME_ID (0x62u)
#define CANMSGS_pdm_heartbeat_FRAME_ID (0x61u)
#define CANMSGS_fsm_heartbeat_FRAME_ID (0x41u)
#define CANMSGS_pdm_startup_FRAME_ID (0x63u)
#define CANMSGS_bms_heartbeat_FRAME_ID (0x01u)
#define CANMSGS_dcm_heartbeat_FRAME_ID (0x21u)
#define CANMSGS_bms_can_tx_fifo_overflow_FRAME_ID (0x02u)
#define CANMSGS_dcm_can_tx_fifo_overflow_FRAME_ID (0x22u)
#define CANMSGS_dcm_startup_FRAME_ID (0x23u)

/**
 * Signals in message FSM_ERRORS.
 *
 * This message contains a bit for each error that the FSM might throw
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_errors_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t papps_out_of_range;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sapps_out_of_range;
};

/**
 * Signals in message FSM_CAN_TX_FIFO_OVERFLOW.
 *
 * Indicates that we tried to transmit messages faster then we can send them, so our internal FIFO queue overflowed
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_can_tx_fifo_overflow_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t overflow_count;
};

/**
 * Signals in message FSM_STARTUP.
 *
 * Sent out by the FSM when it starts up
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_startup_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message FSM_AIR_SHUTDOWN.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_air_shutdown_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PDM_AIR_SHUTDOWN.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_air_shutdown_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PDM_MOTOR_SHUTDOWN.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_motor_shutdown_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message BMS_STARTUP.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_bms_startup_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PDM_ERRORS.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_errors_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t missing_heartbeat;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t boost_pgood_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_balance_overvoltage_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charger_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t efuse_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _12_v_fault_under_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t _12_v_fault_over_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vbat_fault;
};

/**
 * Signals in message PDM_CAN_TX_FIFO_OVERFLOW.
 *
 * Indicates that we tried to transmit messages faster then we can send them, so our internal FIFO queue overflowed
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_can_tx_fifo_overflow_t {
    /**
     * Range: ..1 (..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t overflow_count;
};

/**
 * Signals in message PDM_HEARTBEAT.
 *
 * TODO: descriptive comment
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_heartbeat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message FSM_HEARTBEAT.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_fsm_heartbeat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PDM_STARTUP.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_pdm_startup_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message BMS_HEARTBEAT.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_bms_heartbeat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message DCM_HEARTBEAT.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_dcm_heartbeat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message BMS_CAN_TX_FIFO_OVERFLOW.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_bms_can_tx_fifo_overflow_t {
    /**
     * Range: ..1 (..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t overflow_count;
};

/**
 * Signals in message DCM_CAN_TX_FIFO_OVERFLOW.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_dcm_can_tx_fifo_overflow_t {
    /**
     * Range: ..1 (..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t overflow_count;
};

/**
 * Signals in message DCM_STARTUP.
 *
 * All signal values are as on the CAN bus.
 */
struct CanMsgs_dcm_startup_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Pack message FSM_ERRORS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_errors_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_errors_t *src_p,
    size_t size);

/**
 * Unpack message FSM_ERRORS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_errors_unpack(
    struct CanMsgs_fsm_errors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_fsm_errors_papps_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_fsm_errors_papps_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_fsm_errors_papps_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_fsm_errors_sapps_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_fsm_errors_sapps_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_fsm_errors_sapps_out_of_range_is_in_range(uint8_t value);

/**
 * Pack message FSM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_can_tx_fifo_overflow_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_can_tx_fifo_overflow_t *src_p,
    size_t size);

/**
 * Unpack message FSM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_can_tx_fifo_overflow_unpack(
    struct CanMsgs_fsm_can_tx_fifo_overflow_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanMsgs_fsm_can_tx_fifo_overflow_overflow_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_fsm_can_tx_fifo_overflow_overflow_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_fsm_can_tx_fifo_overflow_overflow_count_is_in_range(uint32_t value);

/**
 * Pack message FSM_STARTUP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_startup_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_startup_t *src_p,
    size_t size);

/**
 * Unpack message FSM_STARTUP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_startup_unpack(
    struct CanMsgs_fsm_startup_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message FSM_AIR_SHUTDOWN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_air_shutdown_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_air_shutdown_t *src_p,
    size_t size);

/**
 * Unpack message FSM_AIR_SHUTDOWN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_air_shutdown_unpack(
    struct CanMsgs_fsm_air_shutdown_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message PDM_AIR_SHUTDOWN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_air_shutdown_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_air_shutdown_t *src_p,
    size_t size);

/**
 * Unpack message PDM_AIR_SHUTDOWN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_air_shutdown_unpack(
    struct CanMsgs_pdm_air_shutdown_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message PDM_MOTOR_SHUTDOWN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_motor_shutdown_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_motor_shutdown_t *src_p,
    size_t size);

/**
 * Unpack message PDM_MOTOR_SHUTDOWN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_motor_shutdown_unpack(
    struct CanMsgs_pdm_motor_shutdown_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message BMS_STARTUP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_bms_startup_pack(
    uint8_t *dst_p,
    const struct CanMsgs_bms_startup_t *src_p,
    size_t size);

/**
 * Unpack message BMS_STARTUP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_bms_startup_unpack(
    struct CanMsgs_bms_startup_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message PDM_ERRORS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_errors_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_errors_t *src_p,
    size_t size);

/**
 * Unpack message PDM_ERRORS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_errors_unpack(
    struct CanMsgs_pdm_errors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_missing_heartbeat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_missing_heartbeat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_missing_heartbeat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_boost_pgood_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_boost_pgood_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_boost_pgood_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_cell_balance_overvoltage_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_cell_balance_overvoltage_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_cell_balance_overvoltage_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_charger_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_charger_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_charger_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_efuse_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_efuse_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_efuse_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors__12_v_fault_under_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors__12_v_fault_under_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors__12_v_fault_under_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors__12_v_fault_over_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors__12_v_fault_over_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors__12_v_fault_over_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CanMsgs_pdm_errors_vbat_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_errors_vbat_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_errors_vbat_fault_is_in_range(uint8_t value);

/**
 * Pack message PDM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_can_tx_fifo_overflow_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_can_tx_fifo_overflow_t *src_p,
    size_t size);

/**
 * Unpack message PDM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_can_tx_fifo_overflow_unpack(
    struct CanMsgs_pdm_can_tx_fifo_overflow_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanMsgs_pdm_can_tx_fifo_overflow_overflow_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_pdm_can_tx_fifo_overflow_overflow_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_pdm_can_tx_fifo_overflow_overflow_count_is_in_range(uint32_t value);

/**
 * Pack message PDM_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_heartbeat_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message PDM_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_heartbeat_unpack(
    struct CanMsgs_pdm_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message FSM_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_fsm_heartbeat_pack(
    uint8_t *dst_p,
    const struct CanMsgs_fsm_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message FSM_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_fsm_heartbeat_unpack(
    struct CanMsgs_fsm_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message PDM_STARTUP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_pdm_startup_pack(
    uint8_t *dst_p,
    const struct CanMsgs_pdm_startup_t *src_p,
    size_t size);

/**
 * Unpack message PDM_STARTUP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_pdm_startup_unpack(
    struct CanMsgs_pdm_startup_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message BMS_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_bms_heartbeat_pack(
    uint8_t *dst_p,
    const struct CanMsgs_bms_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_bms_heartbeat_unpack(
    struct CanMsgs_bms_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message DCM_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_dcm_heartbeat_pack(
    uint8_t *dst_p,
    const struct CanMsgs_dcm_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message DCM_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_dcm_heartbeat_unpack(
    struct CanMsgs_dcm_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message BMS_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_bms_can_tx_fifo_overflow_pack(
    uint8_t *dst_p,
    const struct CanMsgs_bms_can_tx_fifo_overflow_t *src_p,
    size_t size);

/**
 * Unpack message BMS_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_bms_can_tx_fifo_overflow_unpack(
    struct CanMsgs_bms_can_tx_fifo_overflow_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanMsgs_bms_can_tx_fifo_overflow_overflow_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_bms_can_tx_fifo_overflow_overflow_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_bms_can_tx_fifo_overflow_overflow_count_is_in_range(uint32_t value);

/**
 * Pack message DCM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_dcm_can_tx_fifo_overflow_pack(
    uint8_t *dst_p,
    const struct CanMsgs_dcm_can_tx_fifo_overflow_t *src_p,
    size_t size);

/**
 * Unpack message DCM_CAN_TX_FIFO_OVERFLOW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_dcm_can_tx_fifo_overflow_unpack(
    struct CanMsgs_dcm_can_tx_fifo_overflow_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CanMsgs_dcm_can_tx_fifo_overflow_overflow_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CanMsgs_dcm_can_tx_fifo_overflow_overflow_count_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CanMsgs_dcm_can_tx_fifo_overflow_overflow_count_is_in_range(uint32_t value);

/**
 * Pack message DCM_STARTUP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CanMsgs_dcm_startup_pack(
    uint8_t *dst_p,
    const struct CanMsgs_dcm_startup_t *src_p,
    size_t size);

/**
 * Unpack message DCM_STARTUP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CanMsgs_dcm_startup_unpack(
    struct CanMsgs_dcm_startup_t *dst_p,
    const uint8_t *src_p,
    size_t size);

#endif
