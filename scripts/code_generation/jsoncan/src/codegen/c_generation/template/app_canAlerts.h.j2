/**
 * @note This file is auto-generated. Do not modify!
 */
// clang-format off

#pragma once

/* ------------------------------- Includes ------------------------------- */

#include <stdbool.h>
#include "app_canUtils.h"

/* -------------------------------- Enums --------------------------------- */

typedef enum
{
    {% for board in boards -%}
    {{board}}_ALERT_BOARD = {{loop.index0}},
    {% endfor %}
} CanAlertBoard;

typedef struct
{
    char* description;
    char* name;
    uint16_t id;

} Fault_Warning_Info;

/* ------------------------- Function Prototypes -------------------------- */

{% for warning in tx_warnings %}
/**
 * Set or clear an warning for {{node}} board.
 */
void app_canAlerts_{{warning}}_set(bool set_alert);
{% endfor %}


{% for fault in tx_faults %}
/**
 * Set or clear an fault for {{node}} board.
 */
void app_canAlerts_{{fault}}_set(bool set_alert);
{% endfor %}


{% for warning in tx_warnings %}
/**
 * Return whether or not a specific warning transmitted by {{node}} is set.
 */
bool app_canAlerts_{{warning}}_get(void);
{% endfor %}

{% for fault in tx_faults %}
/**
 * Return whether or not a specific fault transmitted by {{node}} is set.
 */
bool app_canAlerts_{{fault}}_get(void);
{% endfor %}

/**
 * Return whether or not a board has set a warning.
 */
bool app_canAlerts_BoardHasWarning(CanAlertBoard board);

/**
 * Return whether or not a board has set a fault.
 */
bool app_canAlerts_BoardHasFault(CanAlertBoard board);

/**
 * Return whether or not any board has set a warning.
 */
bool app_canAlerts_AnyBoardHasWarning(void);

/**
 * Return whether or not any board has set a fault.
 */
bool app_canAlerts_AnyBoardHasFault(void);

/**
 * Return whether or not a board has set a warning.
 */
uint8_t app_canAlerts_WarningInfo(Fault_Warning_Info *alert_array);

/**
 * Return whether or not a board has set a fault.
 */
uint8_t app_canAlerts_FaultInfo(Fault_Warning_Info *alert_array);

