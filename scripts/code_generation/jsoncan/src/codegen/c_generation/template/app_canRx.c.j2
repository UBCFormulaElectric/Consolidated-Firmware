/**
 * @note This file is auto-generated. Do not modify!
 */
// clang-format off


/* ------------------------------- Includes ------------------------------- */

#include <math.h>
#include <string.h>
#include "app_canRx.h"

/* ------------------------------- Structs -------------------------------- */

/**
 * Struct for holding all messages received by  (i.e. the RX table).
 */
typedef struct
{
    {%- for msg in messages %}
    {{ msg.c_type() }} {{ msg.name }}_signals;
    {%- endfor %}
} {{node}}_RxMsgs;


/* -------------------------- Private Variables --------------------------- */

static {{node}}_RxMsgs rx_table;

/* ------------------------- Function Definitions ------------------------- */

void app_canRx_init()
{
    memset(&rx_table, 0, sizeof({{node}}_RxMsgs));
    // Initialize all signals to Start-up value
    {%- for msg in messages %}
    {%- for signal in msg.signals %}
    app_canRx_{{ signal.name }}_update({{ signal.start_val_macro() }});
    {%- endfor %}
    {%- endfor %}
}

/* ------- UPDATE -------- */
{% for msg in messages %}
{%- for signal in msg.signals %}
void app_canRx_{{ signal.name }}_update({{ signal.datatype() }} value)
{
    {%- if signal.representation() == "float" %}
    if (value == NAN)
    {
        return;
    }
    {%- endif %}
    // Clamp value to min/max
    {%- if signal.max_val is defined %}
    if (value >= {{ signal.max_val_macro() }})
    {
        value = {{ signal.max_val_macro() }};
    }
    {%- endif %}
    {%- if signal.min_val is defined %}
    if (value <= {{ signal.min_val_macro() }})
    {
        value = {{ signal.min_val_macro() }};
    }
    {%- endif %}
    rx_table.{{ msg.name }}_signals.{{ signal.name }}_value = value; // Set value
}
{%- endfor %}
{%- endfor %}

/* ------- GET -------- */
{% for msg in messages %}
{%- for signal in msg.signals %}
{{ signal.datatype() }} app_canRx_{{ signal.name }}_get()
{
    return rx_table.{{ msg.name }}_signals.{{ signal.name }}_value;
}
{%- endfor %}
{%- endfor %}

void app_canRx_clear_board_rx_table(CanNode board)
{
    switch(board)
    {
        {%- for board in boards_messages.keys() %}
            {%- if board.upper() != node.upper() %}
        case {{ board.upper() }}_NODE:
            {%- for msg in boards_messages[board] %}
                {%- for signal in msg.signals %}
            app_canRx_{{ signal.name }}_update({{ signal.start_val_macro() }});
                {%- endfor %}
            {%- endfor %}
            break;
            {%- endif %}
        {%- endfor %}
    }
}