/**
 * @note This file is auto-generated. Do not modify!
 */
// clang-format off

#pragma once

/* ------------------------------- Includes ------------------------------- */

#include <stdint.h>
#include <stdbool.h>
#ifdef THREAD_SAFE_CAN_PACKING
void io_canTx_set_lockfunction(
    void (*lock)(void),
    void (*unlock)(void)
);
#endif

/* ------------------------------- Structs -------------------------------- */

/**
 * Standard CAN message type.
 */
typedef struct
{
    uint32_t std_id;
    uint32_t dlc;
    uint8_t data[
        {%- if fd -%}64
        {%- else %}8{%- endif -%}
    ];
} JsonCanMsg;

/* -------------------------------- Enums --------------------------------- */
// BUS ENUMS
typedef enum
{
    {%- for bus_name in node_bus_names %}
    {%- set bus = bus_config[bus_name] %}
    Bus_{{bus.name}} = {{loop.index0}},
    {%- endfor %}
} BusEnum;

// MODE ENUMS
{%- for bus_name in node_bus_names %}
{% set bus = bus_config[bus_name] %}
typedef enum
{
    {%- for mode in bus.modes %}
    {{bus.name.upper()}}_MODE_{{mode}} = 1 << {{loop.index0}},
    {%- endfor %}
} {{bus.name}}Mode;
{% endfor %}



/* ------------------------- Function Prototypes -------------------------- */

/**
 * Initialize the IO CAN TX module.
 */
void io_canTx_init(
    {%- for bus_name in node_bus_names %}
    {%- set bus = bus_config[bus_name] -%}
    void (*transmit_{{bus.name}}_msg_func)(const JsonCanMsg*) {%- if not loop.last -%}, {%- endif %}
    {%- endfor %}
);

/**
 * Enable or disable a mode (only messages allowed for the enabled modes transmitted on the bus).
 */
{%- for bus_name in node_bus_names %}
{%- set bus = bus_config[bus_name] %}
void io_canTx_enableMode_{{bus.name}}({{bus.name}}Mode mode, bool enable);
{%- endfor %}

/**
 * Enqueue periodic CAN msgs of period 1000ms.
 */
void io_canTx_enqueue1HzMsgs(void);

/**
 * Enqueue periodic CAN msgs of period 10ms.
 */
void io_canTx_enqueue100HzMsgs(void);

/**
 * Enqueue periodic CAN messages whose cycle time does is not suitable for other periodic sending functions.
 */
void io_canTx_enqueueOtherPeriodicMsgs(uint32_t time_ms);

// send aperiodic messages
{%- for msg in messages if msg.cycle_time == None %}
void io_canTx_{{msg.name}}_sendAperiodic();
{%- endfor %}