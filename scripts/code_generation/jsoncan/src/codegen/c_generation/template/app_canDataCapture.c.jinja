/**
 * @note This file is auto-generated. Do not modify!
 */
// clang-format off


/* ------------------------------- Includes ------------------------------- */

#include "app_canDataCapture.h"
#include "app_canUtils.h"

/* -------------------------------- Macros -------------------------------- */

#define INVL_TEMPERATURES1_LOG_CYCLE_TIME (1000)
#define INVL_TEMPERATURES2_LOG_CYCLE_TIME (1000)
#define INVL_TEMPERATURES3_LOG_CYCLE_TIME (1000)
#define INVL_ANALOG_INPUT_VOLTAGES_LOG_CYCLE_TIME (1000)
#define INVL_DIGITAL_INPUT_STATUS_LOG_CYCLE_TIME (1000)
#define INVL_INTERNAL_VOLTAGES_LOG_CYCLE_TIME (1000)
#define INVR_TEMPERATURES1_LOG_CYCLE_TIME (1000)
#define INVR_TEMPERATURES2_LOG_CYCLE_TIME (1000)
#define INVR_TEMPERATURES3_LOG_CYCLE_TIME (1000)
#define INVR_ANALOG_INPUT_VOLTAGES_LOG_CYCLE_TIME (1000)
#define INVR_INTERNAL_VOLTAGES_LOG_CYCLE_TIME (1000)
#define INVL_TEMPERATURES1_TELEM_CYCLE_TIME (1000)
#define INVL_TEMPERATURES2_TELEM_CYCLE_TIME (1000)
#define INVL_TEMPERATURES3_TELEM_CYCLE_TIME (1000)
#define INVL_ANALOG_INPUT_VOLTAGES_TELEM_CYCLE_TIME (1000)
#define INVL_DIGITAL_INPUT_STATUS_TELEM_CYCLE_TIME (1000)
#define INVL_INTERNAL_VOLTAGES_TELEM_CYCLE_TIME (1000)
#define INVR_TEMPERATURES1_TELEM_CYCLE_TIME (1000)
#define INVR_TEMPERATURES2_TELEM_CYCLE_TIME (1000)
#define INVR_TEMPERATURES3_TELEM_CYCLE_TIME (1000)
#define INVR_ANALOG_INPUT_VOLTAGES_TELEM_CYCLE_TIME (1000)
#define INVR_INTERNAL_VOLTAGES_TELEM_CYCLE_TIME (1000)

/* -------------------------- Private Variables --------------------------- */

static uint32_t INVL_Temperatures1_next_log_time_ms;
static uint32_t INVL_Temperatures2_next_log_time_ms;
static uint32_t INVL_Temperatures3_next_log_time_ms;
static uint32_t INVL_AnalogInputVoltages_next_log_time_ms;
static uint32_t INVL_DigitalInputStatus_next_log_time_ms;
static uint32_t INVL_InternalVoltages_next_log_time_ms;
static uint32_t INVR_Temperatures1_next_log_time_ms;
static uint32_t INVR_Temperatures2_next_log_time_ms;
static uint32_t INVR_Temperatures3_next_log_time_ms;
static uint32_t INVR_AnalogInputVoltages_next_log_time_ms;
static uint32_t INVR_InternalVoltages_next_log_time_ms;

static uint32_t INVL_Temperatures1_next_telem_time_ms;
static uint32_t INVL_Temperatures2_next_telem_time_ms;
static uint32_t INVL_Temperatures3_next_telem_time_ms;
static uint32_t INVL_AnalogInputVoltages_next_telem_time_ms;
static uint32_t INVL_DigitalInputStatus_next_telem_time_ms;
static uint32_t INVL_InternalVoltages_next_telem_time_ms;
static uint32_t INVR_Temperatures1_next_telem_time_ms;
static uint32_t INVR_Temperatures2_next_telem_time_ms;
static uint32_t INVR_Temperatures3_next_telem_time_ms;
static uint32_t INVR_AnalogInputVoltages_next_telem_time_ms;
static uint32_t INVR_InternalVoltages_next_telem_time_ms;

/* ------------------------- Function Definitions ------------------------- */


void app_canDataCapture_init()
{
    // Reset next log capture times.
    INVL_Temperatures1_next_log_time_ms = 0U;
    INVL_Temperatures2_next_log_time_ms = 0U;
    INVL_Temperatures3_next_log_time_ms = 0U;
    INVL_AnalogInputVoltages_next_log_time_ms = 0U;
    INVL_DigitalInputStatus_next_log_time_ms = 0U;
    INVL_InternalVoltages_next_log_time_ms = 0U;
    INVR_Temperatures1_next_log_time_ms = 0U;
    INVR_Temperatures2_next_log_time_ms = 0U;
    INVR_Temperatures3_next_log_time_ms = 0U;
    INVR_AnalogInputVoltages_next_log_time_ms = 0U;
    INVR_InternalVoltages_next_log_time_ms = 0U;
    
    // Reset next telem capture times.
    INVL_Temperatures1_next_telem_time_ms = 0U;
    INVL_Temperatures2_next_telem_time_ms = 0U;
    INVL_Temperatures3_next_telem_time_ms = 0U;
    INVL_AnalogInputVoltages_next_telem_time_ms = 0U;
    INVL_DigitalInputStatus_next_telem_time_ms = 0U;
    INVL_InternalVoltages_next_telem_time_ms = 0U;
    INVR_Temperatures1_next_telem_time_ms = 0U;
    INVR_Temperatures2_next_telem_time_ms = 0U;
    INVR_Temperatures3_next_telem_time_ms = 0U;
    INVR_AnalogInputVoltages_next_telem_time_ms = 0U;
    INVR_InternalVoltages_next_telem_time_ms = 0U;
}

bool app_dataCapture_needsLog(uint16_t msg_id, uint32_t time_ms)
{
    switch (msg_id)
    {
        case CAN_MSG_BMS_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_IMD_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_IMD_DATA_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_CHARGER_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_BRUSA_CONTROLS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_OK_STATUSES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_CONTACTORS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_CELL_TEMPERATURES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_VOLTAGE_AND_CHARGE_STATS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_CELL_STATS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_TRACTIVE_SYSTEM_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_OWC_SEGMENT0TO2_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_OWC_SEGMENT3TO4_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_BMS_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_VC_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_BMS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_RSM_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_FSM_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_CRIT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_H7_DEV_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BRUSA_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_SWITCHES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_DRIVE_MODE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_CRIT_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_CAN_MODE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_CHARGING_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_CELL_BALANCING_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_RESET_SOC_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_SET_COOLANT_PUMP_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_SET_BSPD_TEST_CURRENT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_STEERING_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_WHEELS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_APPS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_BRAKE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_FSM_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_TEMPERATURES1_ID:
        {
            if (time_ms > INVL_Temperatures1_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVL_Temperatures1_next_log_time_ms = time_ms + INVL_TEMPERATURES1_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_TEMPERATURES2_ID:
        {
            if (time_ms > INVL_Temperatures2_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVL_Temperatures2_next_log_time_ms = time_ms + INVL_TEMPERATURES2_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_TEMPERATURES3_ID:
        {
            if (time_ms > INVL_Temperatures3_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVL_Temperatures3_next_log_time_ms = time_ms + INVL_TEMPERATURES3_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_ANALOG_INPUT_VOLTAGES_ID:
        {
            if (time_ms > INVL_AnalogInputVoltages_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVL_AnalogInputVoltages_next_log_time_ms = time_ms + INVL_ANALOG_INPUT_VOLTAGES_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_DIGITAL_INPUT_STATUS_ID:
        {
            if (time_ms > INVL_DigitalInputStatus_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVL_DigitalInputStatus_next_log_time_ms = time_ms + INVL_DIGITAL_INPUT_STATUS_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_MOTOR_POSITION_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_CURRENT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_VOLTAGE_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_FLUX_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_INTERNAL_VOLTAGES_ID:
        {
            if (time_ms > INVL_InternalVoltages_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVL_InternalVoltages_next_log_time_ms = time_ms + INVL_INTERNAL_VOLTAGES_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_INTERNAL_STATES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_FAULT_CODES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_TORQUE_AND_TIMER_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_MODULATION_INDEX_AND_FLUX_WEAKENING_OUTPUT_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_FIRMWARE_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_DEBUG_READ_WRITE_PARAM_RESPONSE_ID:
        {
            // This message is not captured, return false.
            return false;
            break;
        }
        case CAN_MSG_INVR_TEMPERATURES1_ID:
        {
            if (time_ms > INVR_Temperatures1_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVR_Temperatures1_next_log_time_ms = time_ms + INVR_TEMPERATURES1_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_TEMPERATURES2_ID:
        {
            if (time_ms > INVR_Temperatures2_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVR_Temperatures2_next_log_time_ms = time_ms + INVR_TEMPERATURES2_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_TEMPERATURES3_ID:
        {
            if (time_ms > INVR_Temperatures3_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVR_Temperatures3_next_log_time_ms = time_ms + INVR_TEMPERATURES3_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_ANALOG_INPUT_VOLTAGES_ID:
        {
            if (time_ms > INVR_AnalogInputVoltages_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVR_AnalogInputVoltages_next_log_time_ms = time_ms + INVR_ANALOG_INPUT_VOLTAGES_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_DIGITAL_INPUT_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_MOTOR_POSITION_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_CURRENT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_VOLTAGE_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_FLUX_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_INTERNAL_VOLTAGES_ID:
        {
            if (time_ms > INVR_InternalVoltages_next_log_time_ms)
            {
                // Capture msg and increment variable.
                INVR_InternalVoltages_next_log_time_ms = time_ms + INVR_INTERNAL_VOLTAGES_LOG_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_INTERNAL_STATES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_FAULT_CODES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_TORQUE_AND_TIMER_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_MODULATION_INDEX_AND_FLUX_WEAKENING_OUTPUT_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_FIRMWARE_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_DEBUG_READ_WRITE_PARAM_RESPONSE_ID:
        {
            // This message is not captured, return false.
            return false;
            break;
        }
        case CAN_MSG_RSM_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_COOLANT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_BRAKE_LIGHT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_FANS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_LEFT_INVERTER_COMMAND_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_INVL_READ_WRITE_PARAM_COMMAND_ID:
        {
            // This message is not captured, return false.
            return false;
            break;
        }
        case CAN_MSG_VC_RIGHT_INVERTER_COMMAND_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_INVR_READ_WRITE_PARAM_COMMAND_ID:
        {
            // This message is not captured, return false.
            return false;
            break;
        }
        case CAN_MSG_VC_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ELLIPSE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ELLIPSE_TIME_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ELLIPSE_EULER_ANGLES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_POWER_ESTIMATE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_POWER_ESTIMATE_PID_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_PID_SLIP_RATIO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_SLIP_RATIOS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ACTIVE_DIFF_OUTPUTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_POWER_LIMIT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_VEHICLE_DYNAMICS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ELLIPSE_EKF_NAV_VELOCITY_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_VOLTAGES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_CURRENT_SENSING_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_EFUSE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_IMU_LINEAR_ACCELERATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_COOLANT_PUMP_FLOW_RATE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_VC_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_GLOBAL_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_PEDAL_PERCENTAGE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
    }
}

bool app_dataCapture_needsTelem(uint16_t msg_id, uint32_t time_ms)
{
    switch (msg_id)
    {
        case CAN_MSG_BMS_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_IMD_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_IMD_DATA_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_CHARGER_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_BRUSA_CONTROLS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_OK_STATUSES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_CONTACTORS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_CELL_TEMPERATURES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_VOLTAGE_AND_CHARGE_STATS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_CELL_STATS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_TRACTIVE_SYSTEM_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_OWC_SEGMENT0TO2_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_OWC_SEGMENT3TO4_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_BMS_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BMS_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_VC_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_BMS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_RSM_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_FSM_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_CRIT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BOOT_H7_DEV_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_BRUSA_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_SWITCHES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_DRIVE_MODE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_CRIT_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_CRIT_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_CAN_MODE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_CHARGING_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_CELL_BALANCING_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_RESET_SOC_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_SET_COOLANT_PUMP_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DEBUG_SET_BSPD_TEST_CURRENT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_DIMOS_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_STEERING_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_WHEELS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_APPS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_BRAKE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_FSM_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_FSM_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_TEMPERATURES1_ID:
        {
            if (time_ms > INVL_Temperatures1_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVL_Temperatures1_next_telem_time_ms = time_ms + INVL_TEMPERATURES1_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_TEMPERATURES2_ID:
        {
            if (time_ms > INVL_Temperatures2_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVL_Temperatures2_next_telem_time_ms = time_ms + INVL_TEMPERATURES2_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_TEMPERATURES3_ID:
        {
            if (time_ms > INVL_Temperatures3_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVL_Temperatures3_next_telem_time_ms = time_ms + INVL_TEMPERATURES3_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_ANALOG_INPUT_VOLTAGES_ID:
        {
            if (time_ms > INVL_AnalogInputVoltages_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVL_AnalogInputVoltages_next_telem_time_ms = time_ms + INVL_ANALOG_INPUT_VOLTAGES_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_DIGITAL_INPUT_STATUS_ID:
        {
            if (time_ms > INVL_DigitalInputStatus_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVL_DigitalInputStatus_next_telem_time_ms = time_ms + INVL_DIGITAL_INPUT_STATUS_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_MOTOR_POSITION_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_CURRENT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_VOLTAGE_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_FLUX_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_INTERNAL_VOLTAGES_ID:
        {
            if (time_ms > INVL_InternalVoltages_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVL_InternalVoltages_next_telem_time_ms = time_ms + INVL_INTERNAL_VOLTAGES_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVL_INTERNAL_STATES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_FAULT_CODES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_TORQUE_AND_TIMER_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_MODULATION_INDEX_AND_FLUX_WEAKENING_OUTPUT_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_FIRMWARE_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVL_DEBUG_READ_WRITE_PARAM_RESPONSE_ID:
        {
            // This message is not captured, return false.
            return false;
            break;
        }
        case CAN_MSG_INVR_TEMPERATURES1_ID:
        {
            if (time_ms > INVR_Temperatures1_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVR_Temperatures1_next_telem_time_ms = time_ms + INVR_TEMPERATURES1_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_TEMPERATURES2_ID:
        {
            if (time_ms > INVR_Temperatures2_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVR_Temperatures2_next_telem_time_ms = time_ms + INVR_TEMPERATURES2_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_TEMPERATURES3_ID:
        {
            if (time_ms > INVR_Temperatures3_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVR_Temperatures3_next_telem_time_ms = time_ms + INVR_TEMPERATURES3_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_ANALOG_INPUT_VOLTAGES_ID:
        {
            if (time_ms > INVR_AnalogInputVoltages_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVR_AnalogInputVoltages_next_telem_time_ms = time_ms + INVR_ANALOG_INPUT_VOLTAGES_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_DIGITAL_INPUT_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_MOTOR_POSITION_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_CURRENT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_VOLTAGE_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_FLUX_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_INTERNAL_VOLTAGES_ID:
        {
            if (time_ms > INVR_InternalVoltages_next_telem_time_ms)
            {
                // Capture msg and increment variable.
                INVR_InternalVoltages_next_telem_time_ms = time_ms + INVR_INTERNAL_VOLTAGES_TELEM_CYCLE_TIME;
                return true;
            }
            else
            {
                // Not ready to capture yet.
                return false;
            }
            break;
        }
        case CAN_MSG_INVR_INTERNAL_STATES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_FAULT_CODES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_TORQUE_AND_TIMER_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_MODULATION_INDEX_AND_FLUX_WEAKENING_OUTPUT_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_FIRMWARE_INFORMATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_INVR_DEBUG_READ_WRITE_PARAM_RESPONSE_ID:
        {
            // This message is not captured, return false.
            return false;
            break;
        }
        case CAN_MSG_RSM_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_COOLANT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_BRAKE_LIGHT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_FANS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_RSM_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_VITALS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_LEFT_INVERTER_COMMAND_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_INVL_READ_WRITE_PARAM_COMMAND_ID:
        {
            // This message is not captured, return false.
            return false;
            break;
        }
        case CAN_MSG_VC_RIGHT_INVERTER_COMMAND_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_INVR_READ_WRITE_PARAM_COMMAND_ID:
        {
            // This message is not captured, return false.
            return false;
            break;
        }
        case CAN_MSG_VC_ALERTS_CONTEXT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ELLIPSE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ELLIPSE_TIME_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ELLIPSE_EULER_ANGLES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_COMMIT_INFO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_POWER_ESTIMATE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_POWER_ESTIMATE_PID_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_PID_SLIP_RATIO_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_SLIP_RATIOS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ACTIVE_DIFF_OUTPUTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_POWER_LIMIT_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_VEHICLE_DYNAMICS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_ELLIPSE_EKF_NAV_VELOCITY_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_VOLTAGES_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_CURRENT_SENSING_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_EFUSE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_IMU_LINEAR_ACCELERATION_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_COOLANT_PUMP_FLOW_RATE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_VC_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_GLOBAL_SHDN_NODE_STATUS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_PEDAL_PERCENTAGE_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_WARNINGS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_FAULTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_WARNINGS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
        case CAN_MSG_VC_FAULTS_COUNTS_ID:
        {
            // This message is captured at its normal cycle time. So, just assume the messages are received at that rate and should be captured.
            return true;
            break;
        }
    }
}

