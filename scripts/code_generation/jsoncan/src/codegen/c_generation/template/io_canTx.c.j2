/**
 * @note This file is auto-generated. Do not modify!
 */
// clang-format off

/* ------------------------------- Includes ------------------------------- */

#include "io_canTx.h"
#include <string.h>
#include "app_canTx.h"
#include "app_canUtils.h"

#ifndef THREAD_SAFE_CAN_PACKING
void (*lock)(void);
void (*unlock)(void); 

void io_canTx_set_lockfunction(
    void (*lock_in)(void),
    void (*unlock_in)(void)
)
{
    lock = lock_in;
    unlock = unlock_in;
}
#endif

/* --------------------------- Static Variables --------------------------- */
{% for bus in node_bus_names %}
static uint32_t can_mode_{{bus}};
static void (*transmit_func_{{bus}})(const JsonCanMsg* tx_msg);
{% endfor %}

/* --------------------- Static Function Definitions ---------------------- */

{% for msg in messages %}
{%- if msg.cycle_time != None -%}
static void io_canTx_{{msg.name}}_sendPeriodic()
{%- else -%}
void io_canTx_{{msg.name}}_sendAperiodic()
{%- endif %}
{
    JsonCanMsg tx_msg;
    memset(&tx_msg, 0, sizeof(JsonCanMsg));
    tx_msg.std_id = {{msg.id_macro()}};
    tx_msg.dlc = {{msg.bytes_macro()}};
    #ifndef THREAD_SAFE_CAN_PACKING
    lock();
    #endif
    app_canUtils_{{msg.name}}_pack(app_canTx_{{msg.name}}_getData(), tx_msg.data);
    #ifndef THREAD_SAFE_CAN_PACKING
    unlock();
    #endif
    {%- for msg_bus_name in busses_for_msg(msg.name) %}
    if (
    {%- if msg.modes == None %}
        can_mode_{{msg_bus_name}} & ({{msg_bus_name.upper()}}_MODE_{{bus_config[msg_bus_name].default_mode}})
    {%- else %}
    {%- for mode in msg.modes %}
        can_mode_{{msg_bus_name}} & ({{msg_bus_name.upper()}}_MODE_{{mode}})
    {%- endfor %}
    {% endif %}
    )
    {
        transmit_func_{{msg_bus_name}}(&tx_msg);
    }
    {%- endfor %}
}
{% endfor %}


/* --------------------- Public Function Definitions ---------------------- */

void io_canTx_init( 
    {% for bus_name in node_bus_names -%}
    void (*transmit_{{bus_name}}_msg_func)(const JsonCanMsg*) {%- if not loop.last -%}, {%- endif %}
    {% endfor %}
)
{
    {%- for bus_name in node_bus_names %}
    transmit_func_{{bus_name}} = transmit_{{bus_name}}_msg_func;
    {%- endfor %}
}

{% for bus_name in node_bus_names %}
void io_canTx_enableMode_{{bus_name}}({{bus_name}}Mode mode, bool enable)
{
    if (enable)
    {
        can_mode_{{bus_name}} |= (uint32_t)mode; // Enable mode
        
    }
    else
    {
        can_mode_{{bus_name}} &= ~((uint32_t)mode); // Disable mode
    }
}
{% endfor %}



void io_canTx_enqueue1HzMsgs()
{
    {%- for msg in messages if msg.cycle_time == 1000 %}
    io_canTx_{{ msg.name }}_sendPeriodic();
    {%- endfor %}
}

void io_canTx_enqueue100HzMsgs()
{
    {%- for msg in messages if msg.cycle_time == 10 %}
    io_canTx_{{ msg.name }}_sendPeriodic();
    {%- endfor %}
}

void io_canTx_enqueueOtherPeriodicMsgs(uint32_t time_ms)
{
    {%- for msg in messages if msg.cycle_time != 1000 and msg.cycle_time != 10 and msg.cycle_time != None %}
    if (time_ms % {{msg.cycle_time_macro()}} == 0)
    {
        io_canTx_{{msg.name}}_sendPeriodic();
    }
    {%- endfor %}
}

