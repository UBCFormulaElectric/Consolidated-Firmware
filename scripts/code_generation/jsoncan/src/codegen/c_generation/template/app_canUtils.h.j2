/**
 * @note This file is auto-generated. Do not modify!
 */
// clang-format off

#pragma once

/* ------------------------------- Includes ------------------------------- */

#include <stdint.h>
#include <stdbool.h>

/* -------------------------------- Macros -------------------------------- */

// Msg IDs
// #define CAN_MSG_BMS_VITALS_ID (100)
{% for message in all_messages -%}
#define CAN_MSG_{{ message.scremming_snake_name() }}_ID ({{ message.id }})
{% endfor %}

// Msg lengths (in bytes)
{% for message in messages -%}
#define CAN_MSG_{{ message.scremming_snake_name() }}_BYTES ({{ message.bytes() }})
{% endfor %}

// Periodic msg cycle times (in MS)
{% for message in messages -%}
{% if message.cycle_time -%}
#define CAN_MSG_{{  message.scremming_snake_name() }}_TIME_MS ({{ message.cycle_time }}) 
{%- endif %}
{% endfor %}

// Signal starting values
{% for msg in messages -%}
{% for signal in msg.signals -%}
    #define CANSIG_{{ msg.scremming_snake_name() }}_{{ signal.scremming_snake_name() }}_START_VAL ({{ signal.start_val }}) {% if signal.unit and signal.unit != "" %}// {{ signal.unit }}
{% endif %}
{% endfor %}
{% endfor %}
// Scale/offset values for encoding/decoding signals
#define CANSIG_BMS_VITALS_BMS_HEARTBEAT_SCALE (1)
{% for msg in messages -%}
{% for signal in msg.signals -%}
#define CANSIG_{{ msg.scremming_snake_name() }}_{{ signal.scremming_snake_name() }}_SCALE ({{ signal.scale }})
#define CANSIG_{{ msg.scremming_snake_name() }}_{{ signal.scremming_snake_name() }}_OFFSET ({{ signal.offset }})
{% endfor %}
{% endfor %}


// Min/max allowed values for signals
// #define CANSIG_BMS_VITALS_BMS_HEARTBEAT_MIN (0)
{% for msg in messages -%}
{% for signal in msg.signals -%}
#define CANSIG_{{ msg.scremming_snake_name() }}_{{ signal.scremming_snake_name() }}_MIN ({{ signal.min_val }})
#define CANSIG_{{ msg.scremming_snake_name() }}_{{ signal.scremming_snake_name() }}_MAX ({{ signal.max_val }})
{% endfor %}
{% endfor %}


/* -------------------------------- Enums --------------------------------- */

{% for enum in enums %}

typedef enum
{ 
    {%  for key, value in enum.items.items() -%}
    {{ value }} = {{ key }},
    {% endfor %}
} {{ enum.name }};
{%- endfor %}


/* ------------------------------- Structs -------------------------------- */

{% for message in messages %}
typedef struct
{
    {% for signal in message.signals -%}
    {{ signal.datatype() }} {{ signal.name }}_value;
    {% endfor %}
} {{ message.name }}_Signals;
{% endfor %}



/* ------------------------- Function Prototypes -------------------------- */

/**
 * Pack signals into CAN payload for BMS_Vitals.
 */

{% for message in messages -%}
void app_canUtils_{{ message.name }}_pack(const {{ message.name }}_Signals* const in_msg, uint8_t* const out_data);
{% endfor %}



/**
 * Unpack signals from CAN payload for BRUSA_Vitals.
 */

{% for message in messages -%}
void app_canUtils_{{ message.name }}_unpack(const uint8_t* const in_data, {{ message.name }}_Signals* const out_msg);
{% endfor %}


