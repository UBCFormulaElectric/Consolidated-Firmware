/**
 * @note This file is auto-generated. Do not modify!
 */
// clang-format off

#pragma once

/* ------------------------------- Includes ------------------------------- */

#include <stdint.h>
#include <stdbool.h>

/* -------------------------------- Macros -------------------------------- */

// Msg IDs
// #define CAN_MSG_BMS_VITALS_ID (100)
#define CANMSG_BMS_VITALS_ID (100)
#define CANMSG_BMS_ALERTS_CONTEXT_ID (104)
#define CANMSG_BMS_IMD_STATUS_ID (105)
#define CANMSG_BMS_IMD_DATA_ID (106)
#define CANMSG_BMS_CHARGER_ID (107)
#define CANMSG_BMS_BRUSA_CONTROLS_ID (1560)
#define CANMSG_BMS_OK_STATUSES_ID (111)
#define CANMSG_BMS_CONTACTORS_ID (112)
#define CANMSG_BMS_CELL_TEMPERATURES_ID (120)
#define CANMSG_BMS_VOLTAGE_AND_CHARGE_STATS_ID (121)
#define CANMSG_BMS_CELL_STATS_ID (123)
#define CANMSG_BMS_TRACTIVE_SYSTEM_ID (130)
#define CANMSG_BMS_COMMIT_INFO_ID (140)
#define CANMSG_BMS_OWC_SEGMENT0TO2_STATUS_ID (141)
#define CANMSG_BMS_OWC_SEGMENT3TO4_STATUS_ID (142)
#define CANMSG_BMS_BMS_SHDN_NODE_STATUS_ID (143)
#define CANMSG_BMS_WARNINGS_ID (150)
#define CANMSG_BMS_FAULTS_ID (151)
#define CANMSG_BMS_WARNINGS_COUNTS_ID (152)
#define CANMSG_BMS_FAULTS_COUNTS_ID (153)
#define CANMSG_FSM_VITALS_ID (300)
#define CANMSG_FSM_ALERTS_CONTEXT_ID (301)
#define CANMSG_FSM_COMMIT_INFO_ID (302)
#define CANMSG_FSM_STEERING_ID (303)
#define CANMSG_FSM_WHEELS_ID (304)
#define CANMSG_FSM_APPS_ID (305)
#define CANMSG_FSM_BRAKE_ID (306)
#define CANMSG_FSM_FSM_SHDN_NODE_STATUS_ID (309)
#define CANMSG_FSM_WARNINGS_ID (396)
#define CANMSG_FSM_FAULTS_ID (397)
#define CANMSG_FSM_WARNINGS_COUNTS_ID (398)
#define CANMSG_FSM_FAULTS_COUNTS_ID (399)
#define CANMSG_VC_VITALS_ID (200)
#define CANMSG_VC_LEFT_INVERTER_COMMAND_ID (32)
#define CANMSG_VC_INVL_READ_WRITE_PARAM_COMMAND_ID (33)
#define CANMSG_VC_RIGHT_INVERTER_COMMAND_ID (82)
#define CANMSG_VC_INVR_READ_WRITE_PARAM_COMMAND_ID (83)
#define CANMSG_VC_ALERTS_CONTEXT_ID (202)
#define CANMSG_VC_ELLIPSE_STATUS_ID (223)
#define CANMSG_VC_ELLIPSE_TIME_ID (209)
#define CANMSG_VC_ELLIPSE_EULER_ANGLES_ID (222)
#define CANMSG_VC_COMMIT_INFO_ID (204)
#define CANMSG_VC_POWER_ESTIMATE_ID (211)
#define CANMSG_VC_POWER_ESTIMATE_PID_ID (212)
#define CANMSG_VC_PID_SLIP_RATIO_ID (213)
#define CANMSG_VC_SLIP_RATIOS_ID (214)
#define CANMSG_VC_ACTIVE_DIFF_OUTPUTS_ID (215)
#define CANMSG_VC_POWER_LIMIT_ID (216)
#define CANMSG_VC_VEHICLE_DYNAMICS_ID (226)
#define CANMSG_VC_ELLIPSE_EKF_NAV_VELOCITY_ID (218)
#define CANMSG_VC_VOLTAGES_ID (219)
#define CANMSG_VC_CURRENT_SENSING_ID (220)
#define CANMSG_VC_EFUSE_ID (221)
#define CANMSG_VC_IMU_LINEAR_ACCELERATION_ID (225)
#define CANMSG_VC_COOLANT_PUMP_FLOW_RATE_ID (224)
#define CANMSG_VC_VC_SHDN_NODE_STATUS_ID (228)
#define CANMSG_VC_GLOBAL_SHDN_NODE_STATUS_ID (229)
#define CANMSG_VC_PEDAL_PERCENTAGE_ID (230)
#define CANMSG_VC_WARNINGS_ID (205)
#define CANMSG_VC_FAULTS_ID (206)
#define CANMSG_VC_WARNINGS_COUNTS_ID (207)
#define CANMSG_VC_FAULTS_COUNTS_ID (208)


// Msg lengths (in bytes)
#define CANMSG_VC_VITALS_BYTES (3)
#define CANMSG_VC_LEFT_INVERTER_COMMAND_BYTES (8)
#define CANMSG_VC_INVL_READ_WRITE_PARAM_COMMAND_BYTES (6)
#define CANMSG_VC_RIGHT_INVERTER_COMMAND_BYTES (8)
#define CANMSG_VC_INVR_READ_WRITE_PARAM_COMMAND_BYTES (6)
#define CANMSG_VC_ALERTS_CONTEXT_BYTES (5)
#define CANMSG_VC_ELLIPSE_STATUS_BYTES (7)
#define CANMSG_VC_ELLIPSE_TIME_BYTES (4)
#define CANMSG_VC_ELLIPSE_EULER_ANGLES_BYTES (5)
#define CANMSG_VC_COMMIT_INFO_BYTES (5)
#define CANMSG_VC_POWER_ESTIMATE_BYTES (3)
#define CANMSG_VC_POWER_ESTIMATE_PID_BYTES (8)
#define CANMSG_VC_PID_SLIP_RATIO_BYTES (8)
#define CANMSG_VC_SLIP_RATIOS_BYTES (2)
#define CANMSG_VC_ACTIVE_DIFF_OUTPUTS_BYTES (3)
#define CANMSG_VC_POWER_LIMIT_BYTES (3)
#define CANMSG_VC_VEHICLE_DYNAMICS_BYTES (3)
#define CANMSG_VC_ELLIPSE_EKF_NAV_VELOCITY_BYTES (8)
#define CANMSG_VC_VOLTAGES_BYTES (5)
#define CANMSG_VC_CURRENT_SENSING_BYTES (3)
#define CANMSG_VC_EFUSE_BYTES (8)
#define CANMSG_VC_IMU_LINEAR_ACCELERATION_BYTES (3)
#define CANMSG_VC_COOLANT_PUMP_FLOW_RATE_BYTES (1)
#define CANMSG_VC_VC_SHDN_NODE_STATUS_BYTES (1)
#define CANMSG_VC_GLOBAL_SHDN_NODE_STATUS_BYTES (1)
#define CANMSG_VC_PEDAL_PERCENTAGE_BYTES (1)
#define CANMSG_BMS_TRACTIVE_SYSTEM_BYTES (7)
#define CANMSG_BMS_BMS_SHDN_NODE_STATUS_BYTES (1)
#define CANMSG_BMS_CELL_TEMPERATURES_BYTES (3)
#define CANMSG_BMS_VOLTAGE_AND_CHARGE_STATS_BYTES (7)
#define CANMSG_BMS_OK_STATUSES_BYTES (1)
#define CANMSG_BMS_VITALS_BYTES (1)


// Periodic msg cycle times (in MS)
#define CANMSG_VC_VITALS_CYCLE_TIME (100)
#define CANMSG_VC_LEFT_INVERTER_COMMAND_CYCLE_TIME (10)

#define CANMSG_VC_RIGHT_INVERTER_COMMAND_CYCLE_TIME (10)

#define CANMSG_VC_ALERTS_CONTEXT_CYCLE_TIME (10)
#define CANMSG_VC_ELLIPSE_STATUS_CYCLE_TIME (100)
#define CANMSG_VC_ELLIPSE_TIME_CYCLE_TIME (100)
#define CANMSG_VC_ELLIPSE_EULER_ANGLES_CYCLE_TIME (1000)
#define CANMSG_VC_COMMIT_INFO_CYCLE_TIME (100)
#define CANMSG_VC_POWER_ESTIMATE_CYCLE_TIME (1000)
#define CANMSG_VC_POWER_ESTIMATE_PID_CYCLE_TIME (1000)
#define CANMSG_VC_PID_SLIP_RATIO_CYCLE_TIME (1000)
#define CANMSG_VC_SLIP_RATIOS_CYCLE_TIME (1000)
#define CANMSG_VC_ACTIVE_DIFF_OUTPUTS_CYCLE_TIME (1000)
#define CANMSG_VC_POWER_LIMIT_CYCLE_TIME (10)
#define CANMSG_VC_VEHICLE_DYNAMICS_CYCLE_TIME (100)
#define CANMSG_VC_ELLIPSE_EKF_NAV_VELOCITY_CYCLE_TIME (100)
#define CANMSG_VC_VOLTAGES_CYCLE_TIME (100)
#define CANMSG_VC_CURRENT_SENSING_CYCLE_TIME (100)
#define CANMSG_VC_EFUSE_CYCLE_TIME (100)
#define CANMSG_VC_IMU_LINEAR_ACCELERATION_CYCLE_TIME (100)
#define CANMSG_VC_COOLANT_PUMP_FLOW_RATE_CYCLE_TIME (1000)
#define CANMSG_VC_VC_SHDN_NODE_STATUS_CYCLE_TIME (100)
#define CANMSG_VC_GLOBAL_SHDN_NODE_STATUS_CYCLE_TIME (100)
#define CANMSG_VC_PEDAL_PERCENTAGE_CYCLE_TIME (100)
#define CANMSG_BMS_TRACTIVE_SYSTEM_CYCLE_TIME (100)
#define CANMSG_BMS_BMS_SHDN_NODE_STATUS_CYCLE_TIME (100)
#define CANMSG_BMS_CELL_TEMPERATURES_CYCLE_TIME (1000)
#define CANMSG_BMS_VOLTAGE_AND_CHARGE_STATS_CYCLE_TIME (100)
#define CANMSG_BMS_OK_STATUSES_CYCLE_TIME (100)
#define CANMSG_BMS_VITALS_CYCLE_TIME (100)


// Signal starting values
// VC_Vitals
#define CANSIG_VC_HEARTBEAT_START_VAL (0)
#define CANSIG_VC_STATE_START_VAL (0)
#define CANSIG_VC_BUZZER_ON_START_VAL (0)
#define CANSIG_VC_NUMBER_OF_CAN_DATA_LOGS_START_VAL (0)
#define CANSIG_VC_CAN_LOGGING_REMAINING_ERRORS_START_VAL (0)

// VC_LeftInverterCommand
#define CANSIG_VC_LEFT_INVERTER_TORQUE_COMMAND_START_VAL (0)// Nm
#define CANSIG_VC_LEFT_INVERTER_SPEED_COMMAND_START_VAL (0)// rpm
#define CANSIG_VC_LEFT_INVERTER_DIRECTION_COMMAND_START_VAL (0)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_START_VAL (0)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_DISCHARGE_START_VAL (0)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_SPEED_MODE_START_VAL (0)
#define CANSIG_VC_LEFT_INVERTER_TORQUE_LIMIT_START_VAL (0)// Nm

// VC_INVL_ReadWriteParamCommand
#define CANSIG_VC_INVL_COMMAND_PARAMETER_ADDRESS_START_VAL (20)
#define CANSIG_VC_INVL_COMMAND_READ_WRITE_START_VAL (1)
#define CANSIG_VC_INVL_COMMAND_DATA_START_VAL (0)

// VC_RightInverterCommand
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_COMMAND_START_VAL (0)// Nm
#define CANSIG_VC_RIGHT_INVERTER_SPEED_COMMAND_START_VAL (0)// rpm
#define CANSIG_VC_RIGHT_INVERTER_DIRECTION_COMMAND_START_VAL (0)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_START_VAL (0)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_DISCHARGE_START_VAL (0)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_SPEED_MODE_START_VAL (0)
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_LIMIT_START_VAL (0)// Nm

// VC_INVR_ReadWriteParamCommand
#define CANSIG_VC_INVR_COMMAND_PARAMETER_ADDRESS_START_VAL (20)
#define CANSIG_VC_INVR_COMMAND_READ_WRITE_START_VAL (1)
#define CANSIG_VC_INVR_COMMAND_DATA_START_VAL (0)

// VC_AlertsContext
#define CANSIG_VC_WATCHDOG_TIMEOUT_START_VAL (0)
#define CANSIG_VC_WATCHDOG_TIMEOUT_TASK_NAME_START_VAL (0)
#define CANSIG_VC_TX_OVERFLOW_COUNT_START_VAL (0)
#define CANSIG_VC_RX_OVERFLOW_COUNT_START_VAL (0)

// VC_EllipseStatus
#define CANSIG_VC_ELLIPSE_GENERAL_STATUS_BITMASK_START_VAL (0)
#define CANSIG_VC_ELLIPSE_COM_STATUS_BITMASK_START_VAL (0)
#define CANSIG_VC_EKF_SOLUTION_MODE_START_VAL (0)

// VC_EllipseTime
#define CANSIG_VC_ELLIPSE_TIMESTAMP_START_VAL (0)// us

// VC_EllipseEulerAngles
#define CANSIG_VC_EULER_ANGLES_ROLL_START_VAL (-180)// deg
#define CANSIG_VC_EULER_ANGLES_PITCH_START_VAL (-180)// deg
#define CANSIG_VC_EULER_ANGLES_YAW_START_VAL (-180)// deg

// VC_CommitInfo
#define CANSIG_VC_HASH_START_VAL (0)
#define CANSIG_VC_CLEAN_START_VAL (0)

// VC_PowerEstimate
#define CANSIG_VC_POWER_ESTIMATE_VALUE_START_VAL (0)
#define CANSIG_VC_POWER_ESTIMATE_MEASURED_VALUE_START_VAL (0)

// VC_PowerEstimatePID
#define CANSIG_VC_PID_POWER_ESTIMATE_OUTPUT_START_VAL (-1)
#define CANSIG_VC_PID_POWER_ESTIMATE_ERROR_START_VAL (-80)
#define CANSIG_VC_PID_POWER_ESTIMATE_DERIVATIVE_START_VAL (-160)
#define CANSIG_VC_PID_POWER_ESTIMATE_INTEGRAL_START_VAL (-21474836)

// VC_PIDSlipRatio
#define CANSIG_VC_PID_SLIP_RATIO_OUTPUT_START_VAL (-1)
#define CANSIG_VC_PID_SLIP_RATIO_ERROR_START_VAL (-80)
#define CANSIG_VC_PID_SLIP_RATIO_DERIVATIVE_START_VAL (-160)
#define CANSIG_VC_PID_SLIP_RATIO_INTEGRAL_START_VAL (-21474836)

// VC_SlipRatios
#define CANSIG_VC_SLIP_RATIO_LEFT_START_VAL (-1)
#define CANSIG_VC_SLIP_RATIO_RIGHT_START_VAL (-1)

// VC_ActiveDiffOutputs
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_LEFT_START_VAL (0)
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_RIGHT_START_VAL (0)

// VC_PowerLimit
#define CANSIG_VC_POWER_LIMIT_VALUE_START_VAL (0)
#define CANSIG_VC_POWER_LIMIT_VALUE_AT_FULL_THROTTLE_START_VAL (0)

// VC_VehicleDynamics
#define CANSIG_VC_REGEN_ENABLED_START_VAL (0)
#define CANSIG_VC_TORQUE_VECTORING_ENABLED_START_VAL (0)
#define CANSIG_VC_VEHICLE_VELOCITY_START_VAL (-150)// km/h

// VC_EllipseEkfNavVelocity
#define CANSIG_VC_VELOCITY_NORTH_START_VAL (-35)// m/s
#define CANSIG_VC_VELOCITY_NORTH_ACCURACY_START_VAL (0)// m/s
#define CANSIG_VC_VELOCITY_EAST_START_VAL (-35)// m/s
#define CANSIG_VC_VELOCITY_EAST_ACCURACY_START_VAL (0)// m/s
#define CANSIG_VC_VELOCITY_DOWN_START_VAL (-35)// m/s
#define CANSIG_VC_VELOCITY_DOWN_ACCURACY_START_VAL (0)// m/s

// VC_Voltages
#define CANSIG_VC_BAT_VOLTAGE_START_VAL (0)// V
#define CANSIG_VC_BOOST_VOLTAGE_START_VAL (0)// V
#define CANSIG_VC_ACC_VOLTAGE_START_VAL (0)// V

// VC_CurrentSensing
#define CANSIG_VC_ACC_CURRENT_START_VAL (0)// A
#define CANSIG_VC_BAT_CURRENT_START_VAL (0)// A

// VC_Efuse
#define CANSIG_VC_SHDN_CURRENT_START_VAL (0)// A
#define CANSIG_VC_SHDN_STATUS_START_VAL (0)
#define CANSIG_VC_LV_CURRENT_START_VAL (0)// A
#define CANSIG_VC_LV_STATUS_START_VAL (0)
#define CANSIG_VC_PUMP_CURRENT_START_VAL (0)// A
#define CANSIG_VC_PUMP_STATUS_START_VAL (0)
#define CANSIG_VC_AUX_CURRENT_START_VAL (0)// A
#define CANSIG_VC_AUX_STATUS_START_VAL (0)
#define CANSIG_VC_INV_R_CURRENT_START_VAL (0)// A
#define CANSIG_VC_INV_R_STATUS_START_VAL (0)
#define CANSIG_VC_INV_L_CURRENT_START_VAL (0)// A
#define CANSIG_VC_INV_L_STATUS_START_VAL (0)

// VC_ImuLinearAcceleration
#define CANSIG_VC_IMU_ACCELERATION_X_START_VAL (0)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Y_START_VAL (0)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Z_START_VAL (0)// m/s

// VC_CoolantPumpFlowRate
#define CANSIG_VC_FLOW_RATE_START_VAL (0)// L/H

// VC_VCShdnNodeStatus
#define CANSIG_VC_LE_STOP_OK_STATUS_START_VAL (0)
#define CANSIG_VC_RE_STOP_OK_STATUS_START_VAL (0)
#define CANSIG_VC_TSMSOK_STATUS_START_VAL (0)
#define CANSIG_VC_SPLITTER_BOX_INTERLOCK_OK_STATUS_START_VAL (0)

// VC_GlobalShdnNodeStatus
#define CANSIG_VC_FIRST_FAULT_NODE_START_VAL (0)

// VC_PedalPercentage
#define CANSIG_VC_MAPPED_PEDAL_PERCENTAGE_START_VAL (-1)// %

// BMS_TractiveSystem
#define CANSIG_BMS_TRACTIVE_SYSTEM_VOLTAGE_START_VAL (0)// V
#define CANSIG_BMS_TRACTIVE_SYSTEM_CURRENT_START_VAL (-300)// A
#define CANSIG_BMS_TRACTIVE_SYSTEM_POWER_START_VAL (-100)// kW
#define CANSIG_BMS_AVAILABLE_POWER_START_VAL (0)// W
#define CANSIG_BMS_BSPD_CURRENT_THRESHOLD_EXCEEDED_START_VAL (0)

// BMS_BMSShdnNodeStatus
#define CANSIG_BMS_HVD_SHDN_OK_STATUS_START_VAL (0)
#define CANSIG_BMS_TS_ILCK_OK_STATUS_START_VAL (0)

// BMS_CellTemperatures
#define CANSIG_BMS_MIN_CELL_TEMPERATURE_START_VAL (0)// degC
#define CANSIG_BMS_MAX_CELL_TEMPERATURE_START_VAL (0)// degC

// BMS_VoltageAndChargeStats
#define CANSIG_BMS_PACK_VOLTAGE_START_VAL (0)// V
#define CANSIG_BMS_SOC_START_VAL (0)// %
#define CANSIG_BMS_SOC_CORRUPT_START_VAL (0)
#define CANSIG_BMS_MIN_CELL_VOLTAGE_START_VAL (0)// V
#define CANSIG_BMS_MAX_CELL_VOLTAGE_START_VAL (0)// V

// BMS_OkStatuses
#define CANSIG_BMS_BMS_OK_START_VAL (0)
#define CANSIG_BMS_IMD_OK_START_VAL (0)
#define CANSIG_BMS_BSPD_OK_START_VAL (0)
#define CANSIG_BMS_BMS_LATCHED_FAULT_START_VAL (0)
#define CANSIG_BMS_IMD_LATCHED_FAULT_START_VAL (0)
#define CANSIG_BMS_BSPD_LATCHED_FAULT_START_VAL (0)

// BMS_Vitals
#define CANSIG_BMS_HEARTBEAT_START_VAL (0)
#define CANSIG_BMS_STATE_START_VAL (0)


// Scale/offset values for encoding/decoding signals
// VC_Vitals
#define CANSIG_VC_HEARTBEAT_SCALE (1)
#define CANSIG_VC_HEARTBEAT_OFFSET (0)
#define CANSIG_VC_STATE_SCALE (1)
#define CANSIG_VC_STATE_OFFSET (0)
#define CANSIG_VC_BUZZER_ON_SCALE (1)
#define CANSIG_VC_BUZZER_ON_OFFSET (0)
#define CANSIG_VC_NUMBER_OF_CAN_DATA_LOGS_SCALE (1)
#define CANSIG_VC_NUMBER_OF_CAN_DATA_LOGS_OFFSET (0)
#define CANSIG_VC_CAN_LOGGING_REMAINING_ERRORS_SCALE (1)
#define CANSIG_VC_CAN_LOGGING_REMAINING_ERRORS_OFFSET (0)

// VC_LeftInverterCommand
#define CANSIG_VC_LEFT_INVERTER_TORQUE_COMMAND_SCALE (0.1)// Nm
#define CANSIG_VC_LEFT_INVERTER_TORQUE_COMMAND_OFFSET (0)// Nm
#define CANSIG_VC_LEFT_INVERTER_SPEED_COMMAND_SCALE (1)// rpm
#define CANSIG_VC_LEFT_INVERTER_SPEED_COMMAND_OFFSET (0)// rpm
#define CANSIG_VC_LEFT_INVERTER_DIRECTION_COMMAND_SCALE (1)
#define CANSIG_VC_LEFT_INVERTER_DIRECTION_COMMAND_OFFSET (0)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_SCALE (1)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_OFFSET (0)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_DISCHARGE_SCALE (1)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_DISCHARGE_OFFSET (0)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_SPEED_MODE_SCALE (1)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_SPEED_MODE_OFFSET (0)
#define CANSIG_VC_LEFT_INVERTER_TORQUE_LIMIT_SCALE (0.1)// Nm
#define CANSIG_VC_LEFT_INVERTER_TORQUE_LIMIT_OFFSET (0)// Nm

// VC_INVL_ReadWriteParamCommand
#define CANSIG_VC_INVL_COMMAND_PARAMETER_ADDRESS_SCALE (1)
#define CANSIG_VC_INVL_COMMAND_PARAMETER_ADDRESS_OFFSET (0)
#define CANSIG_VC_INVL_COMMAND_READ_WRITE_SCALE (1)
#define CANSIG_VC_INVL_COMMAND_READ_WRITE_OFFSET (0)
#define CANSIG_VC_INVL_COMMAND_DATA_SCALE (1)
#define CANSIG_VC_INVL_COMMAND_DATA_OFFSET (0)

// VC_RightInverterCommand
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_COMMAND_SCALE (0.1)// Nm
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_COMMAND_OFFSET (0)// Nm
#define CANSIG_VC_RIGHT_INVERTER_SPEED_COMMAND_SCALE (1)// rpm
#define CANSIG_VC_RIGHT_INVERTER_SPEED_COMMAND_OFFSET (0)// rpm
#define CANSIG_VC_RIGHT_INVERTER_DIRECTION_COMMAND_SCALE (1)
#define CANSIG_VC_RIGHT_INVERTER_DIRECTION_COMMAND_OFFSET (0)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_SCALE (1)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_OFFSET (0)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_DISCHARGE_SCALE (1)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_DISCHARGE_OFFSET (0)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_SPEED_MODE_SCALE (1)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_SPEED_MODE_OFFSET (0)
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_LIMIT_SCALE (0.1)// Nm
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_LIMIT_OFFSET (0)// Nm

// VC_INVR_ReadWriteParamCommand
#define CANSIG_VC_INVR_COMMAND_PARAMETER_ADDRESS_SCALE (1)
#define CANSIG_VC_INVR_COMMAND_PARAMETER_ADDRESS_OFFSET (0)
#define CANSIG_VC_INVR_COMMAND_READ_WRITE_SCALE (1)
#define CANSIG_VC_INVR_COMMAND_READ_WRITE_OFFSET (0)
#define CANSIG_VC_INVR_COMMAND_DATA_SCALE (1)
#define CANSIG_VC_INVR_COMMAND_DATA_OFFSET (0)

// VC_AlertsContext
#define CANSIG_VC_WATCHDOG_TIMEOUT_SCALE (1)
#define CANSIG_VC_WATCHDOG_TIMEOUT_OFFSET (0)
#define CANSIG_VC_WATCHDOG_TIMEOUT_TASK_NAME_SCALE (1)
#define CANSIG_VC_WATCHDOG_TIMEOUT_TASK_NAME_OFFSET (0)
#define CANSIG_VC_TX_OVERFLOW_COUNT_SCALE (1)
#define CANSIG_VC_TX_OVERFLOW_COUNT_OFFSET (0)
#define CANSIG_VC_RX_OVERFLOW_COUNT_SCALE (1)
#define CANSIG_VC_RX_OVERFLOW_COUNT_OFFSET (0)

// VC_EllipseStatus
#define CANSIG_VC_ELLIPSE_GENERAL_STATUS_BITMASK_SCALE (1)
#define CANSIG_VC_ELLIPSE_GENERAL_STATUS_BITMASK_OFFSET (0)
#define CANSIG_VC_ELLIPSE_COM_STATUS_BITMASK_SCALE (1)
#define CANSIG_VC_ELLIPSE_COM_STATUS_BITMASK_OFFSET (0)
#define CANSIG_VC_EKF_SOLUTION_MODE_SCALE (1)
#define CANSIG_VC_EKF_SOLUTION_MODE_OFFSET (0)

// VC_EllipseTime
#define CANSIG_VC_ELLIPSE_TIMESTAMP_SCALE (1)// us
#define CANSIG_VC_ELLIPSE_TIMESTAMP_OFFSET (0)// us

// VC_EllipseEulerAngles
#define CANSIG_VC_EULER_ANGLES_ROLL_SCALE (0.1)// deg
#define CANSIG_VC_EULER_ANGLES_ROLL_OFFSET (-180)// deg
#define CANSIG_VC_EULER_ANGLES_PITCH_SCALE (0.1)// deg
#define CANSIG_VC_EULER_ANGLES_PITCH_OFFSET (-180)// deg
#define CANSIG_VC_EULER_ANGLES_YAW_SCALE (0.1)// deg
#define CANSIG_VC_EULER_ANGLES_YAW_OFFSET (-180)// deg

// VC_CommitInfo
#define CANSIG_VC_HASH_SCALE (1)
#define CANSIG_VC_HASH_OFFSET (0)
#define CANSIG_VC_CLEAN_SCALE (1)
#define CANSIG_VC_CLEAN_OFFSET (0)

// VC_PowerEstimate
#define CANSIG_VC_POWER_ESTIMATE_VALUE_SCALE (0.1)
#define CANSIG_VC_POWER_ESTIMATE_VALUE_OFFSET (0)
#define CANSIG_VC_POWER_ESTIMATE_MEASURED_VALUE_SCALE (0.1)
#define CANSIG_VC_POWER_ESTIMATE_MEASURED_VALUE_OFFSET (0)

// VC_PowerEstimatePID
#define CANSIG_VC_PID_POWER_ESTIMATE_OUTPUT_SCALE (0.01)
#define CANSIG_VC_PID_POWER_ESTIMATE_OUTPUT_OFFSET (0)
#define CANSIG_VC_PID_POWER_ESTIMATE_ERROR_SCALE (0.1)
#define CANSIG_VC_PID_POWER_ESTIMATE_ERROR_OFFSET (0)
#define CANSIG_VC_PID_POWER_ESTIMATE_DERIVATIVE_SCALE (0.1)
#define CANSIG_VC_PID_POWER_ESTIMATE_DERIVATIVE_OFFSET (0)
#define CANSIG_VC_PID_POWER_ESTIMATE_INTEGRAL_SCALE (0.1)
#define CANSIG_VC_PID_POWER_ESTIMATE_INTEGRAL_OFFSET (0)

// VC_PIDSlipRatio
#define CANSIG_VC_PID_SLIP_RATIO_OUTPUT_SCALE (0.01)
#define CANSIG_VC_PID_SLIP_RATIO_OUTPUT_OFFSET (0)
#define CANSIG_VC_PID_SLIP_RATIO_ERROR_SCALE (0.1)
#define CANSIG_VC_PID_SLIP_RATIO_ERROR_OFFSET (0)
#define CANSIG_VC_PID_SLIP_RATIO_DERIVATIVE_SCALE (0.1)
#define CANSIG_VC_PID_SLIP_RATIO_DERIVATIVE_OFFSET (0)
#define CANSIG_VC_PID_SLIP_RATIO_INTEGRAL_SCALE (0.1)
#define CANSIG_VC_PID_SLIP_RATIO_INTEGRAL_OFFSET (0)

// VC_SlipRatios
#define CANSIG_VC_SLIP_RATIO_LEFT_SCALE (0.01)
#define CANSIG_VC_SLIP_RATIO_LEFT_OFFSET (0)
#define CANSIG_VC_SLIP_RATIO_RIGHT_SCALE (0.01)
#define CANSIG_VC_SLIP_RATIO_RIGHT_OFFSET (0)

// VC_ActiveDiffOutputs
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_LEFT_SCALE (0.1)
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_LEFT_OFFSET (0)
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_RIGHT_SCALE (0.1)
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_RIGHT_OFFSET (0)

// VC_PowerLimit
#define CANSIG_VC_POWER_LIMIT_VALUE_SCALE (0.1)
#define CANSIG_VC_POWER_LIMIT_VALUE_OFFSET (0)
#define CANSIG_VC_POWER_LIMIT_VALUE_AT_FULL_THROTTLE_SCALE (0.1)
#define CANSIG_VC_POWER_LIMIT_VALUE_AT_FULL_THROTTLE_OFFSET (0)

// VC_VehicleDynamics
#define CANSIG_VC_REGEN_ENABLED_SCALE (1)
#define CANSIG_VC_REGEN_ENABLED_OFFSET (0)
#define CANSIG_VC_TORQUE_VECTORING_ENABLED_SCALE (1)
#define CANSIG_VC_TORQUE_VECTORING_ENABLED_OFFSET (0)
#define CANSIG_VC_VEHICLE_VELOCITY_SCALE (0.01)// km/h
#define CANSIG_VC_VEHICLE_VELOCITY_OFFSET (-150)// km/h

// VC_EllipseEkfNavVelocity
#define CANSIG_VC_VELOCITY_NORTH_SCALE (0.05)// m/s
#define CANSIG_VC_VELOCITY_NORTH_OFFSET (-35)// m/s
#define CANSIG_VC_VELOCITY_NORTH_ACCURACY_SCALE (0.1)// m/s
#define CANSIG_VC_VELOCITY_NORTH_ACCURACY_OFFSET (0)// m/s
#define CANSIG_VC_VELOCITY_EAST_SCALE (0.05)// m/s
#define CANSIG_VC_VELOCITY_EAST_OFFSET (-35)// m/s
#define CANSIG_VC_VELOCITY_EAST_ACCURACY_SCALE (0.1)// m/s
#define CANSIG_VC_VELOCITY_EAST_ACCURACY_OFFSET (0)// m/s
#define CANSIG_VC_VELOCITY_DOWN_SCALE (0.05)// m/s
#define CANSIG_VC_VELOCITY_DOWN_OFFSET (-35)// m/s
#define CANSIG_VC_VELOCITY_DOWN_ACCURACY_SCALE (0.1)// m/s
#define CANSIG_VC_VELOCITY_DOWN_ACCURACY_OFFSET (0)// m/s

// VC_Voltages
#define CANSIG_VC_BAT_VOLTAGE_SCALE (0.01)// V
#define CANSIG_VC_BAT_VOLTAGE_OFFSET (0)// V
#define CANSIG_VC_BOOST_VOLTAGE_SCALE (0.01)// V
#define CANSIG_VC_BOOST_VOLTAGE_OFFSET (0)// V
#define CANSIG_VC_ACC_VOLTAGE_SCALE (0.01)// V
#define CANSIG_VC_ACC_VOLTAGE_OFFSET (0)// V

// VC_CurrentSensing
#define CANSIG_VC_ACC_CURRENT_SCALE (0.01)// A
#define CANSIG_VC_ACC_CURRENT_OFFSET (0)// A
#define CANSIG_VC_BAT_CURRENT_SCALE (0.01)// A
#define CANSIG_VC_BAT_CURRENT_OFFSET (0)// A

// VC_Efuse
#define CANSIG_VC_SHDN_CURRENT_SCALE (0.01)// A
#define CANSIG_VC_SHDN_CURRENT_OFFSET (0)// A
#define CANSIG_VC_SHDN_STATUS_SCALE (1)
#define CANSIG_VC_SHDN_STATUS_OFFSET (0)
#define CANSIG_VC_LV_CURRENT_SCALE (0.01)// A
#define CANSIG_VC_LV_CURRENT_OFFSET (0)// A
#define CANSIG_VC_LV_STATUS_SCALE (1)
#define CANSIG_VC_LV_STATUS_OFFSET (0)
#define CANSIG_VC_PUMP_CURRENT_SCALE (0.01)// A
#define CANSIG_VC_PUMP_CURRENT_OFFSET (0)// A
#define CANSIG_VC_PUMP_STATUS_SCALE (1)
#define CANSIG_VC_PUMP_STATUS_OFFSET (0)
#define CANSIG_VC_AUX_CURRENT_SCALE (0.01)// A
#define CANSIG_VC_AUX_CURRENT_OFFSET (0)// A
#define CANSIG_VC_AUX_STATUS_SCALE (1)
#define CANSIG_VC_AUX_STATUS_OFFSET (0)
#define CANSIG_VC_INV_R_CURRENT_SCALE (0.01)// A
#define CANSIG_VC_INV_R_CURRENT_OFFSET (0)// A
#define CANSIG_VC_INV_R_STATUS_SCALE (1)
#define CANSIG_VC_INV_R_STATUS_OFFSET (0)
#define CANSIG_VC_INV_L_CURRENT_SCALE (0.01)// A
#define CANSIG_VC_INV_L_CURRENT_OFFSET (0)// A
#define CANSIG_VC_INV_L_STATUS_SCALE (1)
#define CANSIG_VC_INV_L_STATUS_OFFSET (0)

// VC_ImuLinearAcceleration
#define CANSIG_VC_IMU_ACCELERATION_X_SCALE (0.1)// m/s
#define CANSIG_VC_IMU_ACCELERATION_X_OFFSET (0)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Y_SCALE (0.1)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Y_OFFSET (0)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Z_SCALE (0.1)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Z_OFFSET (0)// m/s

// VC_CoolantPumpFlowRate
#define CANSIG_VC_FLOW_RATE_SCALE (15.625)// L/H
#define CANSIG_VC_FLOW_RATE_OFFSET (0)// L/H

// VC_VCShdnNodeStatus
#define CANSIG_VC_LE_STOP_OK_STATUS_SCALE (1)
#define CANSIG_VC_LE_STOP_OK_STATUS_OFFSET (0)
#define CANSIG_VC_RE_STOP_OK_STATUS_SCALE (1)
#define CANSIG_VC_RE_STOP_OK_STATUS_OFFSET (0)
#define CANSIG_VC_TSMSOK_STATUS_SCALE (1)
#define CANSIG_VC_TSMSOK_STATUS_OFFSET (0)
#define CANSIG_VC_SPLITTER_BOX_INTERLOCK_OK_STATUS_SCALE (1)
#define CANSIG_VC_SPLITTER_BOX_INTERLOCK_OK_STATUS_OFFSET (0)

// VC_GlobalShdnNodeStatus
#define CANSIG_VC_FIRST_FAULT_NODE_SCALE (1)
#define CANSIG_VC_FIRST_FAULT_NODE_OFFSET (0)

// VC_PedalPercentage
#define CANSIG_VC_MAPPED_PEDAL_PERCENTAGE_SCALE (0.01)// %
#define CANSIG_VC_MAPPED_PEDAL_PERCENTAGE_OFFSET (-1)// %

// BMS_TractiveSystem
#define CANSIG_BMS_TRACTIVE_SYSTEM_VOLTAGE_SCALE (0.1)// V
#define CANSIG_BMS_TRACTIVE_SYSTEM_VOLTAGE_OFFSET (0)// V
#define CANSIG_BMS_TRACTIVE_SYSTEM_CURRENT_SCALE (0.1)// A
#define CANSIG_BMS_TRACTIVE_SYSTEM_CURRENT_OFFSET (-300)// A
#define CANSIG_BMS_TRACTIVE_SYSTEM_POWER_SCALE (0.1)// kW
#define CANSIG_BMS_TRACTIVE_SYSTEM_POWER_OFFSET (-100)// kW
#define CANSIG_BMS_AVAILABLE_POWER_SCALE (1)// W
#define CANSIG_BMS_AVAILABLE_POWER_OFFSET (0)// W
#define CANSIG_BMS_BSPD_CURRENT_THRESHOLD_EXCEEDED_SCALE (1)
#define CANSIG_BMS_BSPD_CURRENT_THRESHOLD_EXCEEDED_OFFSET (0)

// BMS_BMSShdnNodeStatus
#define CANSIG_BMS_HVD_SHDN_OK_STATUS_SCALE (1)
#define CANSIG_BMS_HVD_SHDN_OK_STATUS_OFFSET (0)
#define CANSIG_BMS_TS_ILCK_OK_STATUS_SCALE (1)
#define CANSIG_BMS_TS_ILCK_OK_STATUS_OFFSET (0)

// BMS_CellTemperatures
#define CANSIG_BMS_MIN_CELL_TEMPERATURE_SCALE (0.1)// degC
#define CANSIG_BMS_MIN_CELL_TEMPERATURE_OFFSET (0)// degC
#define CANSIG_BMS_MAX_CELL_TEMPERATURE_SCALE (0.1)// degC
#define CANSIG_BMS_MAX_CELL_TEMPERATURE_OFFSET (0)// degC

// BMS_VoltageAndChargeStats
#define CANSIG_BMS_PACK_VOLTAGE_SCALE (0.01)// V
#define CANSIG_BMS_PACK_VOLTAGE_OFFSET (0)// V
#define CANSIG_BMS_SOC_SCALE (0.1)// %
#define CANSIG_BMS_SOC_OFFSET (0)// %
#define CANSIG_BMS_SOC_CORRUPT_SCALE (1)
#define CANSIG_BMS_SOC_CORRUPT_OFFSET (0)
#define CANSIG_BMS_MIN_CELL_VOLTAGE_SCALE (0.001)// V
#define CANSIG_BMS_MIN_CELL_VOLTAGE_OFFSET (0)// V
#define CANSIG_BMS_MAX_CELL_VOLTAGE_SCALE (0.001)// V
#define CANSIG_BMS_MAX_CELL_VOLTAGE_OFFSET (0)// V

// BMS_OkStatuses
#define CANSIG_BMS_BMS_OK_SCALE (1)
#define CANSIG_BMS_BMS_OK_OFFSET (0)
#define CANSIG_BMS_IMD_OK_SCALE (1)
#define CANSIG_BMS_IMD_OK_OFFSET (0)
#define CANSIG_BMS_BSPD_OK_SCALE (1)
#define CANSIG_BMS_BSPD_OK_OFFSET (0)
#define CANSIG_BMS_BMS_LATCHED_FAULT_SCALE (1)
#define CANSIG_BMS_BMS_LATCHED_FAULT_OFFSET (0)
#define CANSIG_BMS_IMD_LATCHED_FAULT_SCALE (1)
#define CANSIG_BMS_IMD_LATCHED_FAULT_OFFSET (0)
#define CANSIG_BMS_BSPD_LATCHED_FAULT_SCALE (1)
#define CANSIG_BMS_BSPD_LATCHED_FAULT_OFFSET (0)

// BMS_Vitals
#define CANSIG_BMS_HEARTBEAT_SCALE (1)
#define CANSIG_BMS_HEARTBEAT_OFFSET (0)
#define CANSIG_BMS_STATE_SCALE (1)
#define CANSIG_BMS_STATE_OFFSET (0)




// Min/max allowed values for signals
// #define CANSIG_BMS_VITALS_BMS_HEARTBEAT_MIN (0)
// VC_Vitals
#define CANSIG_VC_HEARTBEAT_MIN_VAL (0)
#define CANSIG_VC_HEARTBEAT_MAX_VAL (1)
#define CANSIG_VC_STATE_MIN_VAL (0)
#define CANSIG_VC_STATE_MAX_VAL (2)
#define CANSIG_VC_BUZZER_ON_MIN_VAL (0)
#define CANSIG_VC_BUZZER_ON_MAX_VAL (1)
#define CANSIG_VC_NUMBER_OF_CAN_DATA_LOGS_MIN_VAL (0)
#define CANSIG_VC_NUMBER_OF_CAN_DATA_LOGS_MAX_VAL (1000)
#define CANSIG_VC_CAN_LOGGING_REMAINING_ERRORS_MIN_VAL (0)
#define CANSIG_VC_CAN_LOGGING_REMAINING_ERRORS_MAX_VAL (10)

// VC_LeftInverterCommand
#define CANSIG_VC_LEFT_INVERTER_TORQUE_COMMAND_MIN_VAL (-3276.8)// Nm
#define CANSIG_VC_LEFT_INVERTER_TORQUE_COMMAND_MAX_VAL (3276.7)// Nm
#define CANSIG_VC_LEFT_INVERTER_SPEED_COMMAND_MIN_VAL (-32768)// rpm
#define CANSIG_VC_LEFT_INVERTER_SPEED_COMMAND_MAX_VAL (32767)// rpm
#define CANSIG_VC_LEFT_INVERTER_DIRECTION_COMMAND_MIN_VAL (0)
#define CANSIG_VC_LEFT_INVERTER_DIRECTION_COMMAND_MAX_VAL (1)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_MIN_VAL (0)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_MAX_VAL (1)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_DISCHARGE_MIN_VAL (0)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_DISCHARGE_MAX_VAL (1)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_SPEED_MODE_MIN_VAL (0)
#define CANSIG_VC_LEFT_INVERTER_ENABLE_SPEED_MODE_MAX_VAL (1)
#define CANSIG_VC_LEFT_INVERTER_TORQUE_LIMIT_MIN_VAL (-3276.8)// Nm
#define CANSIG_VC_LEFT_INVERTER_TORQUE_LIMIT_MAX_VAL (3276.7)// Nm

// VC_INVL_ReadWriteParamCommand
#define CANSIG_VC_INVL_COMMAND_PARAMETER_ADDRESS_MIN_VAL (0)
#define CANSIG_VC_INVL_COMMAND_PARAMETER_ADDRESS_MAX_VAL (65535)
#define CANSIG_VC_INVL_COMMAND_READ_WRITE_MIN_VAL (0)
#define CANSIG_VC_INVL_COMMAND_READ_WRITE_MAX_VAL (1)
#define CANSIG_VC_INVL_COMMAND_DATA_MIN_VAL (0)
#define CANSIG_VC_INVL_COMMAND_DATA_MAX_VAL (65535)

// VC_RightInverterCommand
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_COMMAND_MIN_VAL (-3276.8)// Nm
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_COMMAND_MAX_VAL (3276.7)// Nm
#define CANSIG_VC_RIGHT_INVERTER_SPEED_COMMAND_MIN_VAL (-32768)// rpm
#define CANSIG_VC_RIGHT_INVERTER_SPEED_COMMAND_MAX_VAL (32767)// rpm
#define CANSIG_VC_RIGHT_INVERTER_DIRECTION_COMMAND_MIN_VAL (0)
#define CANSIG_VC_RIGHT_INVERTER_DIRECTION_COMMAND_MAX_VAL (1)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_MIN_VAL (0)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_MAX_VAL (1)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_DISCHARGE_MIN_VAL (0)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_DISCHARGE_MAX_VAL (1)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_SPEED_MODE_MIN_VAL (0)
#define CANSIG_VC_RIGHT_INVERTER_ENABLE_SPEED_MODE_MAX_VAL (1)
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_LIMIT_MIN_VAL (-3276.8)// Nm
#define CANSIG_VC_RIGHT_INVERTER_TORQUE_LIMIT_MAX_VAL (3276.7)// Nm

// VC_INVR_ReadWriteParamCommand
#define CANSIG_VC_INVR_COMMAND_PARAMETER_ADDRESS_MIN_VAL (0)
#define CANSIG_VC_INVR_COMMAND_PARAMETER_ADDRESS_MAX_VAL (65535)
#define CANSIG_VC_INVR_COMMAND_READ_WRITE_MIN_VAL (0)
#define CANSIG_VC_INVR_COMMAND_READ_WRITE_MAX_VAL (1)
#define CANSIG_VC_INVR_COMMAND_DATA_MIN_VAL (0)
#define CANSIG_VC_INVR_COMMAND_DATA_MAX_VAL (65535)

// VC_AlertsContext
#define CANSIG_VC_WATCHDOG_TIMEOUT_MIN_VAL (0)
#define CANSIG_VC_WATCHDOG_TIMEOUT_MAX_VAL (1)
#define CANSIG_VC_WATCHDOG_TIMEOUT_TASK_NAME_MIN_VAL (0)
#define CANSIG_VC_WATCHDOG_TIMEOUT_TASK_NAME_MAX_VAL (4)
#define CANSIG_VC_TX_OVERFLOW_COUNT_MIN_VAL (0)
#define CANSIG_VC_TX_OVERFLOW_COUNT_MAX_VAL (65535)
#define CANSIG_VC_RX_OVERFLOW_COUNT_MIN_VAL (0)
#define CANSIG_VC_RX_OVERFLOW_COUNT_MAX_VAL (65535)

// VC_EllipseStatus
#define CANSIG_VC_ELLIPSE_GENERAL_STATUS_BITMASK_MIN_VAL (0)
#define CANSIG_VC_ELLIPSE_GENERAL_STATUS_BITMASK_MAX_VAL (65535)
#define CANSIG_VC_ELLIPSE_COM_STATUS_BITMASK_MIN_VAL (0)
#define CANSIG_VC_ELLIPSE_COM_STATUS_BITMASK_MAX_VAL (4294967295)
#define CANSIG_VC_EKF_SOLUTION_MODE_MIN_VAL (0)
#define CANSIG_VC_EKF_SOLUTION_MODE_MAX_VAL (4)

// VC_EllipseTime
#define CANSIG_VC_ELLIPSE_TIMESTAMP_MIN_VAL (0)// us
#define CANSIG_VC_ELLIPSE_TIMESTAMP_MAX_VAL (4294967295)// us

// VC_EllipseEulerAngles
#define CANSIG_VC_EULER_ANGLES_ROLL_MIN_VAL (-180)// deg
#define CANSIG_VC_EULER_ANGLES_ROLL_MAX_VAL (180)// deg
#define CANSIG_VC_EULER_ANGLES_PITCH_MIN_VAL (-180)// deg
#define CANSIG_VC_EULER_ANGLES_PITCH_MAX_VAL (180)// deg
#define CANSIG_VC_EULER_ANGLES_YAW_MIN_VAL (-180)// deg
#define CANSIG_VC_EULER_ANGLES_YAW_MAX_VAL (180)// deg

// VC_CommitInfo
#define CANSIG_VC_HASH_MIN_VAL (0)
#define CANSIG_VC_HASH_MAX_VAL (4294967295)
#define CANSIG_VC_CLEAN_MIN_VAL (0)
#define CANSIG_VC_CLEAN_MAX_VAL (1)

// VC_PowerEstimate
#define CANSIG_VC_POWER_ESTIMATE_VALUE_MIN_VAL (0)
#define CANSIG_VC_POWER_ESTIMATE_VALUE_MAX_VAL (120)
#define CANSIG_VC_POWER_ESTIMATE_MEASURED_VALUE_MIN_VAL (0)
#define CANSIG_VC_POWER_ESTIMATE_MEASURED_VALUE_MAX_VAL (120)

// VC_PowerEstimatePID
#define CANSIG_VC_PID_POWER_ESTIMATE_OUTPUT_MIN_VAL (-1)
#define CANSIG_VC_PID_POWER_ESTIMATE_OUTPUT_MAX_VAL (1)
#define CANSIG_VC_PID_POWER_ESTIMATE_ERROR_MIN_VAL (-80)
#define CANSIG_VC_PID_POWER_ESTIMATE_ERROR_MAX_VAL (80)
#define CANSIG_VC_PID_POWER_ESTIMATE_DERIVATIVE_MIN_VAL (-160)
#define CANSIG_VC_PID_POWER_ESTIMATE_DERIVATIVE_MAX_VAL (160)
#define CANSIG_VC_PID_POWER_ESTIMATE_INTEGRAL_MIN_VAL (-21474836)
#define CANSIG_VC_PID_POWER_ESTIMATE_INTEGRAL_MAX_VAL (21474836)

// VC_PIDSlipRatio
#define CANSIG_VC_PID_SLIP_RATIO_OUTPUT_MIN_VAL (-1)
#define CANSIG_VC_PID_SLIP_RATIO_OUTPUT_MAX_VAL (1)
#define CANSIG_VC_PID_SLIP_RATIO_ERROR_MIN_VAL (-80)
#define CANSIG_VC_PID_SLIP_RATIO_ERROR_MAX_VAL (80)
#define CANSIG_VC_PID_SLIP_RATIO_DERIVATIVE_MIN_VAL (-160)
#define CANSIG_VC_PID_SLIP_RATIO_DERIVATIVE_MAX_VAL (160)
#define CANSIG_VC_PID_SLIP_RATIO_INTEGRAL_MIN_VAL (-21474836)
#define CANSIG_VC_PID_SLIP_RATIO_INTEGRAL_MAX_VAL (21474836)

// VC_SlipRatios
#define CANSIG_VC_SLIP_RATIO_LEFT_MIN_VAL (-1)
#define CANSIG_VC_SLIP_RATIO_LEFT_MAX_VAL (1)
#define CANSIG_VC_SLIP_RATIO_RIGHT_MIN_VAL (-1)
#define CANSIG_VC_SLIP_RATIO_RIGHT_MAX_VAL (1)

// VC_ActiveDiffOutputs
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_LEFT_MIN_VAL (0)
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_LEFT_MAX_VAL (100)
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_RIGHT_MIN_VAL (0)
#define CANSIG_VC_ACTIVE_DIFF_TORQUE_RIGHT_MAX_VAL (100)

// VC_PowerLimit
#define CANSIG_VC_POWER_LIMIT_VALUE_MIN_VAL (0)
#define CANSIG_VC_POWER_LIMIT_VALUE_MAX_VAL (120)
#define CANSIG_VC_POWER_LIMIT_VALUE_AT_FULL_THROTTLE_MIN_VAL (0)
#define CANSIG_VC_POWER_LIMIT_VALUE_AT_FULL_THROTTLE_MAX_VAL (120)

// VC_VehicleDynamics
#define CANSIG_VC_REGEN_ENABLED_MIN_VAL (0)
#define CANSIG_VC_REGEN_ENABLED_MAX_VAL (1)
#define CANSIG_VC_TORQUE_VECTORING_ENABLED_MIN_VAL (0)
#define CANSIG_VC_TORQUE_VECTORING_ENABLED_MAX_VAL (1)
#define CANSIG_VC_VEHICLE_VELOCITY_MIN_VAL (-150)// km/h
#define CANSIG_VC_VEHICLE_VELOCITY_MAX_VAL (150)// km/h

// VC_EllipseEkfNavVelocity
#define CANSIG_VC_VELOCITY_NORTH_MIN_VAL (-35)// m/s
#define CANSIG_VC_VELOCITY_NORTH_MAX_VAL (35)// m/s
#define CANSIG_VC_VELOCITY_NORTH_ACCURACY_MIN_VAL (0)// m/s
#define CANSIG_VC_VELOCITY_NORTH_ACCURACY_MAX_VAL (35)// m/s
#define CANSIG_VC_VELOCITY_EAST_MIN_VAL (-35)// m/s
#define CANSIG_VC_VELOCITY_EAST_MAX_VAL (35)// m/s
#define CANSIG_VC_VELOCITY_EAST_ACCURACY_MIN_VAL (0)// m/s
#define CANSIG_VC_VELOCITY_EAST_ACCURACY_MAX_VAL (35)// m/s
#define CANSIG_VC_VELOCITY_DOWN_MIN_VAL (-35)// m/s
#define CANSIG_VC_VELOCITY_DOWN_MAX_VAL (35)// m/s
#define CANSIG_VC_VELOCITY_DOWN_ACCURACY_MIN_VAL (0)// m/s
#define CANSIG_VC_VELOCITY_DOWN_ACCURACY_MAX_VAL (35)// m/s

// VC_Voltages
#define CANSIG_VC_BAT_VOLTAGE_MIN_VAL (0)// V
#define CANSIG_VC_BAT_VOLTAGE_MAX_VAL (10)// V
#define CANSIG_VC_BOOST_VOLTAGE_MIN_VAL (0)// V
#define CANSIG_VC_BOOST_VOLTAGE_MAX_VAL (30)// V
#define CANSIG_VC_ACC_VOLTAGE_MIN_VAL (0)// V
#define CANSIG_VC_ACC_VOLTAGE_MAX_VAL (30)// V

// VC_CurrentSensing
#define CANSIG_VC_ACC_CURRENT_MIN_VAL (0)// A
#define CANSIG_VC_ACC_CURRENT_MAX_VAL (20)// A
#define CANSIG_VC_BAT_CURRENT_MIN_VAL (0)// A
#define CANSIG_VC_BAT_CURRENT_MAX_VAL (50)// A

// VC_Efuse
#define CANSIG_VC_SHDN_CURRENT_MIN_VAL (0)// A
#define CANSIG_VC_SHDN_CURRENT_MAX_VAL (5)// A
#define CANSIG_VC_SHDN_STATUS_MIN_VAL (0)
#define CANSIG_VC_SHDN_STATUS_MAX_VAL (1)
#define CANSIG_VC_LV_CURRENT_MIN_VAL (0)// A
#define CANSIG_VC_LV_CURRENT_MAX_VAL (20)// A
#define CANSIG_VC_LV_STATUS_MIN_VAL (0)
#define CANSIG_VC_LV_STATUS_MAX_VAL (1)
#define CANSIG_VC_PUMP_CURRENT_MIN_VAL (0)// A
#define CANSIG_VC_PUMP_CURRENT_MAX_VAL (5)// A
#define CANSIG_VC_PUMP_STATUS_MIN_VAL (0)
#define CANSIG_VC_PUMP_STATUS_MAX_VAL (1)
#define CANSIG_VC_AUX_CURRENT_MIN_VAL (0)// A
#define CANSIG_VC_AUX_CURRENT_MAX_VAL (5)// A
#define CANSIG_VC_AUX_STATUS_MIN_VAL (0)
#define CANSIG_VC_AUX_STATUS_MAX_VAL (1)
#define CANSIG_VC_INV_R_CURRENT_MIN_VAL (0)// A
#define CANSIG_VC_INV_R_CURRENT_MAX_VAL (5)// A
#define CANSIG_VC_INV_R_STATUS_MIN_VAL (0)
#define CANSIG_VC_INV_R_STATUS_MAX_VAL (1)
#define CANSIG_VC_INV_L_CURRENT_MIN_VAL (0)// A
#define CANSIG_VC_INV_L_CURRENT_MAX_VAL (5)// A
#define CANSIG_VC_INV_L_STATUS_MIN_VAL (0)
#define CANSIG_VC_INV_L_STATUS_MAX_VAL (1)

// VC_ImuLinearAcceleration
#define CANSIG_VC_IMU_ACCELERATION_X_MIN_VAL (0)// m/s
#define CANSIG_VC_IMU_ACCELERATION_X_MAX_VAL (20)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Y_MIN_VAL (0)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Y_MAX_VAL (20)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Z_MIN_VAL (0)// m/s
#define CANSIG_VC_IMU_ACCELERATION_Z_MAX_VAL (20)// m/s

// VC_CoolantPumpFlowRate
#define CANSIG_VC_FLOW_RATE_MIN_VAL (0)// L/H
#define CANSIG_VC_FLOW_RATE_MAX_VAL (2000)// L/H

// VC_VCShdnNodeStatus
#define CANSIG_VC_LE_STOP_OK_STATUS_MIN_VAL (0)
#define CANSIG_VC_LE_STOP_OK_STATUS_MAX_VAL (1)
#define CANSIG_VC_RE_STOP_OK_STATUS_MIN_VAL (0)
#define CANSIG_VC_RE_STOP_OK_STATUS_MAX_VAL (1)
#define CANSIG_VC_TSMSOK_STATUS_MIN_VAL (0)
#define CANSIG_VC_TSMSOK_STATUS_MAX_VAL (1)
#define CANSIG_VC_SPLITTER_BOX_INTERLOCK_OK_STATUS_MIN_VAL (0)
#define CANSIG_VC_SPLITTER_BOX_INTERLOCK_OK_STATUS_MAX_VAL (1)

// VC_GlobalShdnNodeStatus
#define CANSIG_VC_FIRST_FAULT_NODE_MIN_VAL (0)
#define CANSIG_VC_FIRST_FAULT_NODE_MAX_VAL (12)

// VC_PedalPercentage
#define CANSIG_VC_MAPPED_PEDAL_PERCENTAGE_MIN_VAL (-1)// %
#define CANSIG_VC_MAPPED_PEDAL_PERCENTAGE_MAX_VAL (1)// %

// BMS_TractiveSystem
#define CANSIG_BMS_TRACTIVE_SYSTEM_VOLTAGE_MIN_VAL (0)// V
#define CANSIG_BMS_TRACTIVE_SYSTEM_VOLTAGE_MAX_VAL (600)// V
#define CANSIG_BMS_TRACTIVE_SYSTEM_CURRENT_MIN_VAL (-300)// A
#define CANSIG_BMS_TRACTIVE_SYSTEM_CURRENT_MAX_VAL (300)// A
#define CANSIG_BMS_TRACTIVE_SYSTEM_POWER_MIN_VAL (-100)// kW
#define CANSIG_BMS_TRACTIVE_SYSTEM_POWER_MAX_VAL (100)// kW
#define CANSIG_BMS_AVAILABLE_POWER_MIN_VAL (0)// W
#define CANSIG_BMS_AVAILABLE_POWER_MAX_VAL (100000)// W
#define CANSIG_BMS_BSPD_CURRENT_THRESHOLD_EXCEEDED_MIN_VAL (0)
#define CANSIG_BMS_BSPD_CURRENT_THRESHOLD_EXCEEDED_MAX_VAL (1)

// BMS_BMSShdnNodeStatus
#define CANSIG_BMS_HVD_SHDN_OK_STATUS_MIN_VAL (0)
#define CANSIG_BMS_HVD_SHDN_OK_STATUS_MAX_VAL (1)
#define CANSIG_BMS_TS_ILCK_OK_STATUS_MIN_VAL (0)
#define CANSIG_BMS_TS_ILCK_OK_STATUS_MAX_VAL (1)

// BMS_CellTemperatures
#define CANSIG_BMS_MIN_CELL_TEMPERATURE_MIN_VAL (0)// degC
#define CANSIG_BMS_MIN_CELL_TEMPERATURE_MAX_VAL (100)// degC
#define CANSIG_BMS_MAX_CELL_TEMPERATURE_MIN_VAL (0)// degC
#define CANSIG_BMS_MAX_CELL_TEMPERATURE_MAX_VAL (100)// degC

// BMS_VoltageAndChargeStats
#define CANSIG_BMS_PACK_VOLTAGE_MIN_VAL (0)// V
#define CANSIG_BMS_PACK_VOLTAGE_MAX_VAL (600)// V
#define CANSIG_BMS_SOC_MIN_VAL (0)// %
#define CANSIG_BMS_SOC_MAX_VAL (100)// %
#define CANSIG_BMS_SOC_CORRUPT_MIN_VAL (0)
#define CANSIG_BMS_SOC_CORRUPT_MAX_VAL (1)
#define CANSIG_BMS_MIN_CELL_VOLTAGE_MIN_VAL (0)// V
#define CANSIG_BMS_MIN_CELL_VOLTAGE_MAX_VAL (5)// V
#define CANSIG_BMS_MAX_CELL_VOLTAGE_MIN_VAL (0)// V
#define CANSIG_BMS_MAX_CELL_VOLTAGE_MAX_VAL (5)// V

// BMS_OkStatuses
#define CANSIG_BMS_BMS_OK_MIN_VAL (0)
#define CANSIG_BMS_BMS_OK_MAX_VAL (1)
#define CANSIG_BMS_IMD_OK_MIN_VAL (0)
#define CANSIG_BMS_IMD_OK_MAX_VAL (1)
#define CANSIG_BMS_BSPD_OK_MIN_VAL (0)
#define CANSIG_BMS_BSPD_OK_MAX_VAL (1)
#define CANSIG_BMS_BMS_LATCHED_FAULT_MIN_VAL (0)
#define CANSIG_BMS_BMS_LATCHED_FAULT_MAX_VAL (1)
#define CANSIG_BMS_IMD_LATCHED_FAULT_MIN_VAL (0)
#define CANSIG_BMS_IMD_LATCHED_FAULT_MAX_VAL (1)
#define CANSIG_BMS_BSPD_LATCHED_FAULT_MIN_VAL (0)
#define CANSIG_BMS_BSPD_LATCHED_FAULT_MAX_VAL (1)

// BMS_Vitals
#define CANSIG_BMS_HEARTBEAT_MIN_VAL (0)
#define CANSIG_BMS_HEARTBEAT_MAX_VAL (1)
#define CANSIG_BMS_STATE_MIN_VAL (0)
#define CANSIG_BMS_STATE_MAX_VAL (6)




/* -------------------------------- Enums --------------------------------- */
typedef enum
{ 
    SWITCH_OFF = 0,
    SWITCH_ON = 1,
    
} SwitchState;

typedef enum
{ 
    RTOS_TASK_1HZ = 0,
    RTOS_TASK_100HZ = 1,
    RTOS_TASK_1KHZ = 2,
    RTOS_TASK_CAN_TX = 3,
    RTOS_TASK_CAN_RX = 4,
    
} RtosTaskName;

typedef enum
{ 
    INVERTER_VSM_START_STATE = 0,
    INVERTER_VSM_PRECHARGE_INIT_STATE = 1,
    INVERTER_VSM_PRECHARGE_ACTIVE_STATE = 2,
    INVERTER_VSM_PRECHARGE_COMPLETE_STATE = 3,
    INVERTER_VSM_WAIT_STATE = 4,
    INVERTER_VSM_READY_STATE = 5,
    INVERTER_VSM_MOTOR_RUNNING_STATE = 6,
    INVERTER_VSM_BLINK_FAULT_CODE_STATE = 7,
    INVERTER_VSM_SHUTDOWN_IN_PROCESS = 14,
    INVERTER_VSM_RECYCLE_POWER_STATE = 15,
    
} InverterVsmState;

typedef enum
{ 
    INVERTER_POWER_ON_STATE = 0,
    INVERTER_STOP_STATE = 1,
    INVERTER_OPEN_LOOP_STATE = 2,
    INVERTER_CLOSED_LOOP_STATE = 3,
    INVERTER_WAIT_STATE = 4,
    INVERTER_IDLE_RUN_STATE = 8,
    INVERTER_IDLE_STOP_STATE = 9,
    
} InverterState;

typedef enum
{ 
    INVERTER_ACTIVE_DISCHARGE_DISABLED = 0,
    INVERTER_ACTIVE_DISCHARGE_ENABLED_WAITING = 1,
    INVERTER_ACTIVE_DISCHARGE_PERFORMING_SPEED_CHECK = 2,
    INVERTER_ACTIVE_DISCHARGE_OCCURING = 3,
    INVERTER_ACTIVE_DISCHARGE_COMPLETED = 4,
    
} InverterActiveDischargeState;

typedef enum
{ 
    INVERTER_CAN_MODE = 0,
    INVERTER_VSM_MODE = 1,
    
} InverterCommandMode;

typedef enum
{ 
    INVERTER_LOCKOUT_UNLOCKED = 0,
    INVERTER_LOCKOUT_LOCKED = 1,
    
} InverterLockout;

typedef enum
{ 
    INVERTER_REVERSE_DIRECTION = 0,
    INVERTER_FORWARD_DIRECTION = 1,
    
} InverterDirection;

typedef enum
{ 
    INVERTER_READ_COMMAND = 0,
    INVERTER_WRITE_COMMAND = 1,
    
} InverterReadWriteCommand;

typedef enum
{ 
    SHDN_BSPD_OK = 0,
    SHDN_BMS_OK = 1,
    SHDN_IMD_OK = 2,
    SHDN_TS_Ilck = 3,
    SHDN_Cockpit_EStop = 4,
    SHDN_Inertia = 5,
    SHDN_BOTS = 6,
    SHDN_L_EStop = 7,
    SHDN_R_EStop = 8,
    SHDN_TSMS = 9,
    SHDN_SB_ILCK = 10,
    SHDN_HVD_ILCK = 11,
    SHDN_OK = 12,
    
} ShutdownNode;

typedef enum
{ 
    VC_INIT_STATE = 0,
    VC_INVERTER_ON_STATE = 1,
    VC_DRIVE_STATE = 2,
    
} VcState;

typedef enum
{ 
    UNINITIALIZED = 0,
    VERTICAL_GYRO = 1,
    AHRS = 2,
    VELOCITY = 3,
    POSITION = 4,
    
} VcEkfStatus;

typedef enum
{ 
    BMS_INIT_STATE = 0,
    BMS_PRECHARGE_STATE = 1,
    BMS_CHARGE_STATE = 2,
    BMS_DRIVE_STATE = 3,
    BMS_BALANCING_STATE = 4,
    BMS_FAULT_STATE = 5,
    BMS_INVERTER_ON_STATE = 6,
    
} BmsState;



/* ------------------------------- Structs -------------------------------- */


typedef struct
{
    bool VC_Heartbeat_value;
    VcState VC_State_value;
    bool VC_BuzzerOn_value;
    uint32_t VC_NumberOfCanDataLogs_value;
    uint32_t VC_CanLoggingRemainingErrors_value;
    
} VC_Vitals_Signals;

typedef struct
{
    float VC_LeftInverterTorqueCommand_value;
    int VC_LeftInverterSpeedCommand_value;
    InverterDirection VC_LeftInverterDirectionCommand_value;
    bool VC_LeftInverterEnable_value;
    bool VC_LeftInverterEnableDischarge_value;
    bool VC_LeftInverterEnableSpeedMode_value;
    float VC_LeftInverterTorqueLimit_value;
    
} VC_LeftInverterCommand_Signals;

typedef struct
{
    uint32_t VC_INVL_CommandParameterAddress_value;
    InverterReadWriteCommand VC_INVL_CommandReadWrite_value;
    uint32_t VC_INVL_CommandData_value;
    
} VC_INVL_ReadWriteParamCommand_Signals;

typedef struct
{
    float VC_RightInverterTorqueCommand_value;
    int VC_RightInverterSpeedCommand_value;
    InverterDirection VC_RightInverterDirectionCommand_value;
    bool VC_RightInverterEnable_value;
    bool VC_RightInverterEnableDischarge_value;
    bool VC_RightInverterEnableSpeedMode_value;
    float VC_RightInverterTorqueLimit_value;
    
} VC_RightInverterCommand_Signals;

typedef struct
{
    uint32_t VC_INVR_CommandParameterAddress_value;
    InverterReadWriteCommand VC_INVR_CommandReadWrite_value;
    uint32_t VC_INVR_CommandData_value;
    
} VC_INVR_ReadWriteParamCommand_Signals;

typedef struct
{
    bool VC_WatchdogTimeout_value;
    RtosTaskName VC_WatchdogTimeoutTaskName_value;
    uint32_t VC_TxOverflowCount_value;
    uint32_t VC_RxOverflowCount_value;
    
} VC_AlertsContext_Signals;

typedef struct
{
    uint32_t VC_EllipseGeneralStatusBitmask_value;
    uint32_t VC_EllipseComStatusBitmask_value;
    VcEkfStatus VC_EkfSolutionMode_value;
    
} VC_EllipseStatus_Signals;

typedef struct
{
    uint32_t VC_EllipseTimestamp_value;
    
} VC_EllipseTime_Signals;

typedef struct
{
    float VC_EulerAnglesRoll_value;
    float VC_EulerAnglesPitch_value;
    float VC_EulerAnglesYaw_value;
    
} VC_EllipseEulerAngles_Signals;

typedef struct
{
    uint32_t VC_Hash_value;
    bool VC_Clean_value;
    
} VC_CommitInfo_Signals;

typedef struct
{
    float VC_PowerEstimateValue_value;
    float VC_PowerEstimateMeasuredValue_value;
    
} VC_PowerEstimate_Signals;

typedef struct
{
    float VC_PIDPowerEstimateOutput_value;
    float VC_PIDPowerEstimateError_value;
    float VC_PIDPowerEstimateDerivative_value;
    float VC_PIDPowerEstimateIntegral_value;
    
} VC_PowerEstimatePID_Signals;

typedef struct
{
    float VC_PIDSlipRatioOutput_value;
    float VC_PIDSlipRatioError_value;
    float VC_PIDSlipRatioDerivative_value;
    float VC_PIDSlipRatioIntegral_value;
    
} VC_PIDSlipRatio_Signals;

typedef struct
{
    float VC_SlipRatioLeft_value;
    float VC_SlipRatioRight_value;
    
} VC_SlipRatios_Signals;

typedef struct
{
    float VC_ActiveDiffTorqueLeft_value;
    float VC_ActiveDiffTorqueRight_value;
    
} VC_ActiveDiffOutputs_Signals;

typedef struct
{
    float VC_PowerLimitValue_value;
    float VC_PowerLimitValueAtFullThrottle_value;
    
} VC_PowerLimit_Signals;

typedef struct
{
    bool VC_RegenEnabled_value;
    bool VC_TorqueVectoringEnabled_value;
    float VC_VehicleVelocity_value;
    
} VC_VehicleDynamics_Signals;

typedef struct
{
    float VC_VelocityNorth_value;
    float VC_VelocityNorthAccuracy_value;
    float VC_VelocityEast_value;
    float VC_VelocityEastAccuracy_value;
    float VC_VelocityDown_value;
    float VC_VelocityDownAccuracy_value;
    
} VC_EllipseEkfNavVelocity_Signals;

typedef struct
{
    float VC_BatVoltage_value;
    float VC_BoostVoltage_value;
    float VC_AccVoltage_value;
    
} VC_Voltages_Signals;

typedef struct
{
    float VC_AccCurrent_value;
    float VC_BatCurrent_value;
    
} VC_CurrentSensing_Signals;

typedef struct
{
    float VC_ShdnCurrent_value;
    bool VC_ShdnStatus_value;
    float VC_LvCurrent_value;
    bool VC_LvStatus_value;
    float VC_PumpCurrent_value;
    bool VC_PumpStatus_value;
    float VC_AuxCurrent_value;
    bool VC_AuxStatus_value;
    float VC_InvRCurrent_value;
    bool VC_InvRStatus_value;
    float VC_InvLCurrent_value;
    bool VC_InvLStatus_value;
    
} VC_Efuse_Signals;

typedef struct
{
    float VC_ImuAccelerationX_value;
    float VC_ImuAccelerationY_value;
    float VC_ImuAccelerationZ_value;
    
} VC_ImuLinearAcceleration_Signals;

typedef struct
{
    float VC_FlowRate_value;
    
} VC_CoolantPumpFlowRate_Signals;

typedef struct
{
    bool VC_LEStopOKStatus_value;
    bool VC_REStopOKStatus_value;
    bool VC_TSMSOKStatus_value;
    bool VC_SplitterBoxInterlockOKStatus_value;
    
} VC_VCShdnNodeStatus_Signals;

typedef struct
{
    ShutdownNode VC_FirstFaultNode_value;
    
} VC_GlobalShdnNodeStatus_Signals;

typedef struct
{
    float VC_MappedPedalPercentage_value;
    
} VC_PedalPercentage_Signals;

typedef struct
{
    float BMS_TractiveSystemVoltage_value;
    float BMS_TractiveSystemCurrent_value;
    float BMS_TractiveSystemPower_value;
    uint32_t BMS_AvailablePower_value;
    bool BMS_BSPDCurrentThresholdExceeded_value;
    
} BMS_TractiveSystem_Signals;

typedef struct
{
    bool BMS_HVDShdnOKStatus_value;
    bool BMS_TSIlckOKStatus_value;
    
} BMS_BMSShdnNodeStatus_Signals;

typedef struct
{
    float BMS_MinCellTemperature_value;
    float BMS_MaxCellTemperature_value;
    
} BMS_CellTemperatures_Signals;

typedef struct
{
    float BMS_PackVoltage_value;
    float BMS_Soc_value;
    bool BMS_SocCorrupt_value;
    float BMS_MinCellVoltage_value;
    float BMS_MaxCellVoltage_value;
    
} BMS_VoltageAndChargeStats_Signals;

typedef struct
{
    bool BMS_BmsOk_value;
    bool BMS_ImdOk_value;
    bool BMS_BspdOk_value;
    bool BMS_BmsLatchedFault_value;
    bool BMS_ImdLatchedFault_value;
    bool BMS_BspdLatchedFault_value;
    
} BMS_OkStatuses_Signals;

typedef struct
{
    bool BMS_Heartbeat_value;
    BmsState BMS_State_value;
    
} BMS_Vitals_Signals;




/* ------------------------- Function Prototypes -------------------------- */


void app_canUtils_VC_Vitals_pack(const VC_Vitals_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_LeftInverterCommand_pack(const VC_LeftInverterCommand_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_INVL_ReadWriteParamCommand_pack(const VC_INVL_ReadWriteParamCommand_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_RightInverterCommand_pack(const VC_RightInverterCommand_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_INVR_ReadWriteParamCommand_pack(const VC_INVR_ReadWriteParamCommand_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_AlertsContext_pack(const VC_AlertsContext_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_EllipseStatus_pack(const VC_EllipseStatus_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_EllipseTime_pack(const VC_EllipseTime_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_EllipseEulerAngles_pack(const VC_EllipseEulerAngles_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_CommitInfo_pack(const VC_CommitInfo_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_PowerEstimate_pack(const VC_PowerEstimate_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_PowerEstimatePID_pack(const VC_PowerEstimatePID_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_PIDSlipRatio_pack(const VC_PIDSlipRatio_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_SlipRatios_pack(const VC_SlipRatios_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_ActiveDiffOutputs_pack(const VC_ActiveDiffOutputs_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_PowerLimit_pack(const VC_PowerLimit_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_VehicleDynamics_pack(const VC_VehicleDynamics_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_EllipseEkfNavVelocity_pack(const VC_EllipseEkfNavVelocity_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_Voltages_pack(const VC_Voltages_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_CurrentSensing_pack(const VC_CurrentSensing_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_Efuse_pack(const VC_Efuse_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_ImuLinearAcceleration_pack(const VC_ImuLinearAcceleration_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_CoolantPumpFlowRate_pack(const VC_CoolantPumpFlowRate_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_VCShdnNodeStatus_pack(const VC_VCShdnNodeStatus_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_GlobalShdnNodeStatus_pack(const VC_GlobalShdnNodeStatus_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_VC_PedalPercentage_pack(const VC_PedalPercentage_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_BMS_TractiveSystem_pack(const BMS_TractiveSystem_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_BMS_BMSShdnNodeStatus_pack(const BMS_BMSShdnNodeStatus_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_BMS_CellTemperatures_pack(const BMS_CellTemperatures_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_BMS_VoltageAndChargeStats_pack(const BMS_VoltageAndChargeStats_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_BMS_OkStatuses_pack(const BMS_OkStatuses_Signals* const in_msg, uint8_t* const out_data);
void app_canUtils_BMS_Vitals_pack(const BMS_Vitals_Signals* const in_msg, uint8_t* const out_data);





void app_canUtils_VC_Vitals_unpack(const uint8_t* const in_data, VC_Vitals_Signals* const out_msg);
void app_canUtils_VC_LeftInverterCommand_unpack(const uint8_t* const in_data, VC_LeftInverterCommand_Signals* const out_msg);
void app_canUtils_VC_INVL_ReadWriteParamCommand_unpack(const uint8_t* const in_data, VC_INVL_ReadWriteParamCommand_Signals* const out_msg);
void app_canUtils_VC_RightInverterCommand_unpack(const uint8_t* const in_data, VC_RightInverterCommand_Signals* const out_msg);
void app_canUtils_VC_INVR_ReadWriteParamCommand_unpack(const uint8_t* const in_data, VC_INVR_ReadWriteParamCommand_Signals* const out_msg);
void app_canUtils_VC_AlertsContext_unpack(const uint8_t* const in_data, VC_AlertsContext_Signals* const out_msg);
void app_canUtils_VC_EllipseStatus_unpack(const uint8_t* const in_data, VC_EllipseStatus_Signals* const out_msg);
void app_canUtils_VC_EllipseTime_unpack(const uint8_t* const in_data, VC_EllipseTime_Signals* const out_msg);
void app_canUtils_VC_EllipseEulerAngles_unpack(const uint8_t* const in_data, VC_EllipseEulerAngles_Signals* const out_msg);
void app_canUtils_VC_CommitInfo_unpack(const uint8_t* const in_data, VC_CommitInfo_Signals* const out_msg);
void app_canUtils_VC_PowerEstimate_unpack(const uint8_t* const in_data, VC_PowerEstimate_Signals* const out_msg);
void app_canUtils_VC_PowerEstimatePID_unpack(const uint8_t* const in_data, VC_PowerEstimatePID_Signals* const out_msg);
void app_canUtils_VC_PIDSlipRatio_unpack(const uint8_t* const in_data, VC_PIDSlipRatio_Signals* const out_msg);
void app_canUtils_VC_SlipRatios_unpack(const uint8_t* const in_data, VC_SlipRatios_Signals* const out_msg);
void app_canUtils_VC_ActiveDiffOutputs_unpack(const uint8_t* const in_data, VC_ActiveDiffOutputs_Signals* const out_msg);
void app_canUtils_VC_PowerLimit_unpack(const uint8_t* const in_data, VC_PowerLimit_Signals* const out_msg);
void app_canUtils_VC_VehicleDynamics_unpack(const uint8_t* const in_data, VC_VehicleDynamics_Signals* const out_msg);
void app_canUtils_VC_EllipseEkfNavVelocity_unpack(const uint8_t* const in_data, VC_EllipseEkfNavVelocity_Signals* const out_msg);
void app_canUtils_VC_Voltages_unpack(const uint8_t* const in_data, VC_Voltages_Signals* const out_msg);
void app_canUtils_VC_CurrentSensing_unpack(const uint8_t* const in_data, VC_CurrentSensing_Signals* const out_msg);
void app_canUtils_VC_Efuse_unpack(const uint8_t* const in_data, VC_Efuse_Signals* const out_msg);
void app_canUtils_VC_ImuLinearAcceleration_unpack(const uint8_t* const in_data, VC_ImuLinearAcceleration_Signals* const out_msg);
void app_canUtils_VC_CoolantPumpFlowRate_unpack(const uint8_t* const in_data, VC_CoolantPumpFlowRate_Signals* const out_msg);
void app_canUtils_VC_VCShdnNodeStatus_unpack(const uint8_t* const in_data, VC_VCShdnNodeStatus_Signals* const out_msg);
void app_canUtils_VC_GlobalShdnNodeStatus_unpack(const uint8_t* const in_data, VC_GlobalShdnNodeStatus_Signals* const out_msg);
void app_canUtils_VC_PedalPercentage_unpack(const uint8_t* const in_data, VC_PedalPercentage_Signals* const out_msg);
void app_canUtils_BMS_TractiveSystem_unpack(const uint8_t* const in_data, BMS_TractiveSystem_Signals* const out_msg);
void app_canUtils_BMS_BMSShdnNodeStatus_unpack(const uint8_t* const in_data, BMS_BMSShdnNodeStatus_Signals* const out_msg);
void app_canUtils_BMS_CellTemperatures_unpack(const uint8_t* const in_data, BMS_CellTemperatures_Signals* const out_msg);
void app_canUtils_BMS_VoltageAndChargeStats_unpack(const uint8_t* const in_data, BMS_VoltageAndChargeStats_Signals* const out_msg);
void app_canUtils_BMS_OkStatuses_unpack(const uint8_t* const in_data, BMS_OkStatuses_Signals* const out_msg);
void app_canUtils_BMS_Vitals_unpack(const uint8_t* const in_data, BMS_Vitals_Signals* const out_msg);


