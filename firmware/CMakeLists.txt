include(cmake/shared.cmake)
include(cmake/dependencies.cmake)
IF (HANDLE_DEPS)
    include(cmake/optional_deps.cmake)
ENDIF ()

IF ("${TARGET}" STREQUAL "binary")
    include(cmake/stmlib.cmake)
    include(cmake/embedded.cmake)
    include(cmake/bootlib.cmake)
    add_compile_definitions(TARGET_EMBEDDED)
ELSEIF ("${TARGET}" STREQUAL "test")
    include(cmake/tests.cmake)
    add_compile_definitions(TARGET_TEST)
    add_compile_definitions(_USE_MATH_DEFINES)
    # We assume this cmake is running on a x86 TARGET, so the
    # *default compiler* settings should be fine

    # For Windows: Prevent overriding the parent project's compiler/linker settings
    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

    # For ctest to return a non-zero code when Valgrind fails, we must use
    # --error-exitcode. On the other hand, --leak-check=full ensures that any
    # memory leak issue will cause ctest to return a non-zero code.
    #
    # This must be set before include(CTest) is called, or ELSE
    # MEMORYCHECK_COMMAND_OPTIONS won't be overwritten correctly!
    set(MEMORYCHECK_COMMAND_OPTIONS "--error-exitcode=1 --leak-check=full")
    include(CTest)
    enable_testing()
ENDIF ()


add_subdirectory(third_party)
add_subdirectory(shared)

IF ("${TARGET}" STREQUAL "binary")
    add_subdirectory(chimera)
ENDIF ()

add_subdirectory(logfs)
add_subdirectory(quadruna)
add_subdirectory(dev) 
