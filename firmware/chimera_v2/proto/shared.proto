syntax = "proto3";

/*
For enums, the default value is the first defined enum value, which must be 0.
For numeric types, the default value is zero.
*/

/* 
Pin Naming Conventions
---
Not all the characters supported for naming pins in Altium are supported for naming
variables, so the following changes are made: 
* ! in Altium is replaced with N
* + in Altium is replaced with _P
* Any Altium pin name starting wtih a numeric character has an added _ to the beginning
*/

import "nanopb.proto";

import "f4dev.proto";
import "ssm.proto";
import "crit.proto";
import "fsm.proto";

/* GPIOs */
message GpioNetName {
  oneof name {
    f4dev.GpioNetName f4dev_net_name = 1;
    ssm.GpioNetName ssm_net_name = 2;
    crit.GpioNetName crit_net_name = 3;
    fsm.GpioNetName fsm_net_name = 4;
  }
}

// GPIO read request/response.
message GpioReadRequest {
  GpioNetName net_name = 1;
}

message GpioReadResponse {
  bool value = 1;
}

// GPIO write request/response.
message GpioWriteRequest {
  GpioNetName net_name = 1;
  bool value = 2;
}

message GpioWriteResponse {
  bool success = 1;
}

/* ADCs */
message AdcNetName {
  oneof name {
    f4dev.AdcNetName f4dev_net_name = 1;
    ssm.AdcNetName ssm_net_name = 2;
    crit.AdcNetName crit_net_name = 3;
    fsm.AdcNetName fsm_net_name = 4;
  }
}

// ADC read request/response.
message AdcReadRequest {
  AdcNetName net_name = 1;
}

message AdcReadResponse {
  float value = 1;
}

/* I2Cs */
message I2cNetName {
  oneof name {
    f4dev.I2cNetName f4dev_net_name = 1;
    ssm.I2cNetName ssm_net_name = 2;
    crit.I2cNetName crit_net_name = 3;
    fsm.I2cNetName fsm_net_name = 4;
  }
}

// I2C ready check request/response.
message I2cReadyRequest {
  I2cNetName net_name = 1;
}

message I2cReadyResponse {
  bool ready = 1;
}

// I2C receive data request/response.
message I2cReceiveRequest {
  I2cNetName net_name = 1;
  uint32 length = 2;
}

message I2cReceiveResponse {
  bytes data = 1 [(nanopb).max_size = 1024];
}

// I2C transmit data request/response.
message I2cTransmitRequest {
  I2cNetName net_name = 1;
  bytes data = 2 [(nanopb).max_size = 1024];
}

message I2cTransmitResponse {
  bool success = 1;
}

// I2C read memory request/response.
message I2cMemoryReadRequest {
  I2cNetName net_name = 1;
  uint32 memory_address = 2;
  uint32 length = 3;
}

message I2cMemoryReadResponse {
  bytes data = 1 [(nanopb).max_size = 1024];
}

// I2C write memory request/response.
message I2cMemoryWriteRequest {
  I2cNetName net_name = 1;
  uint32 memory_address = 2;
  bytes data = 3 [(nanopb).max_size = 1024];
}

message I2cMemoryWriteResponse {
  bool success = 1;
}

/* 
  Wrapper around all messages 

  There is no RPC support in nanopb, so we construct our own request/response protocol.
  Some interesting projects to like at in the future if this ever gets too cumbersome are:
  - https://github.com/EmbeddedRPC/erpc
  - https://github.com/d21d3q/nanogrpc
*/
message ChimeraV2Request {
  oneof payload {
    // GPIO.
    GpioReadRequest gpio_read = 1;
    GpioWriteRequest gpio_write = 2;

    // ADC.
    AdcReadRequest adc_read = 3;

    // I2C.
    I2cReadyRequest i2c_ready = 4;
    I2cReceiveRequest i2c_receive = 5;
    I2cTransmitRequest i2c_transmit = 6;
    I2cMemoryReadRequest i2c_memory_read = 7;
    I2cMemoryWriteRequest i2c_memory_write = 8;
  }
}

message ChimeraV2Response {
  oneof payload {
    // GPIO.
    GpioReadResponse gpio_read = 1;
    GpioWriteResponse gpio_write = 2;

    // ADC.
    AdcReadResponse adc_read = 3;

    // I2C.
    I2cReadyResponse i2c_ready = 4;
    I2cReceiveResponse i2c_receive = 5;
    I2cTransmitResponse i2c_transmit = 6;
    I2cMemoryReadResponse i2c_memory_read = 7;
    I2cMemoryWriteResponse i2c_memory_write = 8;
  }
}
